; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	\Offi SRC_real\Offi src!\_Network\Misc\Src\heapmng.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CHeapMng@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeapMng@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHeapMng@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Malloc@CHeapMng@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CHeapMng@@QAEXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Realloc@CHeapMng@@QAEPAXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0CSystemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CHeapMng@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1CHeapMng@@UAE@XZ				; CHeapMng::~CHeapMng
PUBLIC	??_7CHeapMng@@6B@				; CHeapMng::`vftable'
PUBLIC	??_GCHeapMng@@UAEPAXI@Z				; CHeapMng::`scalar deleting destructor'
EXTRN	??_ECHeapMng@@UAEPAXI@Z:NEAR			; CHeapMng::`vector deleting destructor'
EXTRN	__imp__HeapDestroy@4:NEAR
;	COMDAT ??_7CHeapMng@@6B@
; File c:\offi src_real\offi src!\_network\misc\src\heapmng.cpp
CONST	SEGMENT
??_7CHeapMng@@6B@ DD FLAT:??_ECHeapMng@@UAEPAXI@Z	; CHeapMng::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??1CHeapMng@@UAE@XZ
_TEXT	SEGMENT
??1CHeapMng@@UAE@XZ PROC NEAR				; CHeapMng::~CHeapMng, COMDAT
; _this$ = ecx

; 24   : 	HeapDestroy( m_hHeap );

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CHeapMng@@6B@
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapDestroy@4

; 25   : #ifdef __VM_0819
; 26   : 	DeleteCriticalSection( &m_cs );
; 27   : #endif // __VM_0819
; 28   : }

  00010	c3		 ret	 0
??1CHeapMng@@UAE@XZ ENDP				; CHeapMng::~CHeapMng
_TEXT	ENDS
PUBLIC	?Malloc@CHeapMng@@QAEPAXI@Z			; CHeapMng::Malloc
EXTRN	__imp__HeapAlloc@12:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Malloc@CHeapMng@@QAEPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
?Malloc@CHeapMng@@QAEPAXI@Z PROC NEAR			; CHeapMng::Malloc, COMDAT
; _this$ = ecx

; 32   : #ifdef __VM_0819
; 33   : 	EnterCriticalSection( &m_cs );
; 34   : 	m_nAlloc++;
; 35   : 	m_nTotal	+= nSize;
; 36   : #endif	// __VM_0819
; 37   : 	LPVOID lpMem	= HeapAlloc( m_hHeap, 0, nSize );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nSize$[esp-4]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12

; 38   : #ifdef __VM_0819
; 39   : 	LeaveCriticalSection( &m_cs );
; 40   : #endif __VM_0819
; 41   : 	return lpMem;
; 42   : }

  00011	c2 04 00	 ret	 4
?Malloc@CHeapMng@@QAEPAXI@Z ENDP			; CHeapMng::Malloc
_TEXT	ENDS
PUBLIC	?Free@CHeapMng@@QAEXPAX@Z			; CHeapMng::Free
EXTRN	__imp__HeapFree@12:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Free@CHeapMng@@QAEXPAX@Z
_TEXT	SEGMENT
_lpMem$ = 8						; size = 4
?Free@CHeapMng@@QAEXPAX@Z PROC NEAR			; CHeapMng::Free, COMDAT
; _this$ = ecx

; 50   : #ifdef __VM_0819
; 51   : 	EnterCriticalSection( &m_cs );
; 52   : 	m_nAlloc--;
; 53   : 	m_nTotal	-= nSize;
; 54   : #endif	// __VM_0819
; 55   : 	HeapFree( m_hHeap, 0, lpMem );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _lpMem$[esp-4]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 56   : #ifdef __VM_0819
; 57   : 	LeaveCriticalSection( &m_cs );
; 58   : #endif // __VM_0819
; 59   : }

  00011	c2 04 00	 ret	 4
?Free@CHeapMng@@QAEXPAX@Z ENDP				; CHeapMng::Free
_TEXT	ENDS
PUBLIC	?Realloc@CHeapMng@@QAEPAXPAXI@Z			; CHeapMng::Realloc
EXTRN	__imp__HeapReAlloc@16:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Realloc@CHeapMng@@QAEPAXPAXI@Z
_TEXT	SEGMENT
_lpMem$ = 8						; size = 4
_nSize$ = 12						; size = 4
?Realloc@CHeapMng@@QAEPAXPAXI@Z PROC NEAR		; CHeapMng::Realloc, COMDAT
; _this$ = ecx

; 67   : #ifdef __VM_0819
; 68   : 	EnterCriticalSection( &m_cs );
; 69   : 	m_nTotal	+= ( nSize - nOldSize );
; 70   : #endif	// __VM_0819
; 71   : 	LPVOID lpNewMem		= HeapReAlloc( m_hHeap, 0, lpMem, nSize );

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _nSize$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _lpMem$[esp-4]
  00008	50		 push	 eax
  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000c	52		 push	 edx
  0000d	6a 00		 push	 0
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapReAlloc@16

; 72   : #ifdef __VM_0819
; 73   : 	LeaveCriticalSection( &m_cs );
; 74   : #endif // __VM_0819
; 75   : 	return lpNewMem;
; 76   : }

  00016	c2 08 00	 ret	 8
?Realloc@CHeapMng@@QAEPAXPAXI@Z ENDP			; CHeapMng::Realloc
_TEXT	ENDS
PUBLIC	??0CSystemInfo@@QAE@XZ				; CSystemInfo::CSystemInfo
EXTRN	__imp__GetSystemInfo@4:NEAR
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\cmnhdr.h
;	COMDAT ??0CSystemInfo@@QAE@XZ
_TEXT	SEGMENT
??0CSystemInfo@@QAE@XZ PROC NEAR			; CSystemInfo::CSystemInfo, COMDAT
; _this$ = ecx

; 242  : 	CSystemInfo()	{	GetSystemInfo( this );	}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemInfo@4
  0000a	8b c6		 mov	 eax, esi
  0000c	5e		 pop	 esi
  0000d	c3		 ret	 0
??0CSystemInfo@@QAE@XZ ENDP				; CSystemInfo::CSystemInfo
_TEXT	ENDS
PUBLIC	??0CHeapMng@@QAE@XZ				; CHeapMng::CHeapMng
EXTRN	__imp__HeapCreate@12:NEAR
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\src\heapmng.cpp
;	COMDAT ??0CHeapMng@@QAE@XZ
_TEXT	SEGMENT
_si$ = -36						; size = 36
??0CHeapMng@@QAE@XZ PROC NEAR				; CHeapMng::CHeapMng, COMDAT
; _this$ = ecx

; 11   : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	56		 push	 esi

; 12   : #ifdef __VM_0819
; 13   : 	strcpy( m_szHeap, szHeap );
; 14   : #endif	// __VM_0819
; 15   : 	CSystemInfo si;

  00004	8d 44 24 04	 lea	 eax, DWORD PTR _si$[esp+40]
  00008	8b f1		 mov	 esi, ecx
  0000a	50		 push	 eax
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CHeapMng@@6B@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemInfo@4

; 16   : 	m_hHeap		= HeapCreate( 0, si.dwPageSize, 0 );

  00017	8b 4c 24 08	 mov	 ecx, DWORD PTR _si$[esp+44]
  0001b	6a 00		 push	 0
  0001d	51		 push	 ecx
  0001e	6a 00		 push	 0
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapCreate@12
  00026	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 17   : #ifdef __VM_0819
; 18   : 	InitializeCriticalSectionAndSpinCount( &m_cs, 2000 );
; 19   : #endif // __VM_0819
; 20   : }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	83 c4 24	 add	 esp, 36			; 00000024H
  0002f	c3		 ret	 0
??0CHeapMng@@QAE@XZ ENDP				; CHeapMng::CHeapMng
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ??_GCHeapMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCHeapMng@@UAEPAXI@Z PROC NEAR			; CHeapMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CHeapMng@@6B@
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapDestroy@4
  00013	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00018	74 09		 je	 SHORT $L148028
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L148028:
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 04 00	 ret	 4
??_GCHeapMng@@UAEPAXI@Z ENDP				; CHeapMng::`scalar deleting destructor'
_TEXT	ENDS
END
