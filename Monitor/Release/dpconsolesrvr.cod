; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\dpconsolesrvr.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01FMEDJKGI@o?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@JLDPDOPG@?7?$CF?932s?5?9?9?9?9?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09PKKCPLIP@bad?5alloc?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?GetPacketSize@CBuffer2@@UAEKPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHeader@CBuffer2@@UAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CBuffer2@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBuffer2@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBuffer2@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@CBufferQueue@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRecvHandle@CDPSock@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Send@CDPMng@@QAEHPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendHdr@CHost@@QAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHandler@CDPConsoleSrvr@@AAEP81@AEXAAVCAr@@K@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CMyTreeCtrl@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEnumerating@CMyTreeCtrl@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanupEnumItem@CMyTreeCtrl@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CDPConsoleSrvr@@QAE@PAVCMonitorDlg@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDPConsoleSrvr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CDPConsoleSrvr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SysMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UserMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnAddConnection@CDPConsoleSrvr@@AAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnRemoveConnection@CDPConsoleSrvr@@AAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendOverview@CDPConsoleSrvr@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendError@CDPConsoleSrvr@@QAEXJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCommand@CDPConsoleSrvr@@AAEXAAVCAr@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCBuffer@@@@QAEPAVCBuffer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCBuffer@@@@QAEHPAVCBuffer@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCBuffer2@@@@QAEPAVCBuffer2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCBuffer2@@@@QAEHPAVCBuffer2@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCClientSock@@@@QAEPAVCClientSock@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCClientSock@@@@QAEHPAVCClientSock@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCClientSockE@@@@QAEPAVCClientSockE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCClientSockE@@@@QAEHPAVCClientSockE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatV@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCBuffer@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCBuffer2@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCClientSock@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCClientSockE@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXViterator@12@ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAXV?$allocator@PAX@std@@@std@@IAEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@0ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Incsize@?$list@PAXV?$allocator@PAX@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$list@PAXV?$allocator@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@QAE@PAU012@0ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAX@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyPool@V?$CMyBucket@PAVCClientSock@@@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyMap@PAVCClientSock@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CMyMap@PAVCClientSock@@@@QAEHKAAPAVCClientSock@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyPool@V?$CMyBucket@PAVCClientSockE@@@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyMap@PAVCClientSockE@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CMyMap@PAVCClientSockE@@@@QAEHKAAPAVCClientSockE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyPool@V?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyMap@P8CHost@@AEXAAVCAr@@K@Z@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CMyMap@P8CHost@@AEXAAVCAr@@K@Z@@QAEHKAAP8CHost@@AEXAAVCAr@@K@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXIII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHKAAP8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAt@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXKABQ8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyPool@V?$CMyBucket@PAVCClientSock@@@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$stack@PAV?$CMyBucket@PAVCClientSock@@@@V?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyMap@PAVCClientSock@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyPool@V?$CMyBucket@PAVCClientSockE@@@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$stack@PAV?$CMyBucket@PAVCClientSockE@@@@V?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyMap@PAVCClientSockE@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyPool@V?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$stack@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyMap@P8CHost@@AEXAAVCAr@@K@Z@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_E?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@QAEXPAPAV?$CMyBucket@PAVCClientSock@@@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAV?$CMyBucket@PAVCClientSock@@@@@std@@QAEXPAPAPAV?$CMyBucket@PAVCClientSock@@@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAV?$CMyBucket@PAVCClientSock@@@@@std@@QAEXPAPAPAV?$CMyBucket@PAVCClientSock@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@QAEXPAPAV?$CMyBucket@PAVCClientSockE@@@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAV?$CMyBucket@PAVCClientSockE@@@@@std@@QAEXPAPAPAV?$CMyBucket@PAVCClientSockE@@@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAV?$CMyBucket@PAVCClientSockE@@@@@std@@QAEXPAPAPAV?$CMyBucket@PAVCClientSockE@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@QAEXPAPAV?$CMyBucket@PAVCClientSock@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@QAEXPAPAV?$CMyBucket@PAVCClientSockE@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@?$CMyPool@V?$CMyBucket@PAVCClientSock@@@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyBucket@PAVCClientSock@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqual@?$CMyBucket@PAVCClientSock@@@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@?$CMyPool@V?$CMyBucket@PAVCClientSockE@@@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyBucket@PAVCClientSockE@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqual@?$CMyBucket@PAVCClientSockE@@@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@?$CMyPool@V?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqual@?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Pop@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItToActiveList@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqual@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAV?$CMyBucket@PAVCClientSock@@@@@std@@YAXPAPAPAV?$CMyBucket@PAVCClientSock@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAV?$CMyBucket@PAVCClientSockE@@@@@std@@YAXPAPAPAV?$CMyBucket@PAVCClientSockE@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAV?$CMyBucket@PAVCClientSock@@@@@std@@YAXPAPAV?$CMyBucket@PAVCClientSock@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@YAXPAPAV?$CMyBucket@PAVCClientSockE@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyBucket@PAVCClientSock@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyBucket@PAVCClientSockE@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$stack@PAV?$CMyBucket@PAVCClientSock@@@@V?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@?$stack@PAV?$CMyBucket@PAVCClientSock@@@@V?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$stack@PAV?$CMyBucket@PAVCClientSockE@@@@V?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@?$stack@PAV?$CMyBucket@PAVCClientSockE@@@@V?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$stack@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@?$stack@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?top@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBEAAPAV?$CMyBucket@PAVCClientSock@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBEAAPAV?$CMyBucket@PAVCClientSockE@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBEABQAV?$CMyBucket@PAVCClientSock@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBEABQAV?$CMyBucket@PAVCClientSockE@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@KAAAPAV?$CMyBucket@PAVCClientSock@@@@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@KAAAPAV?$CMyBucket@PAVCClientSockE@@@@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_ptr@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_map@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Ziterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXViterator@12@ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Growmap@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU012@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAV1@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAV1@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyBucket@PAVCClientSockE@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyBucket@PAVCClientSock@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsPrime@@YAHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMclCritSec@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMclCritSec@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCMclCritSec@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyMap@P8CHost@@AEXAAVCAr@@K@Z@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyPool@V?$CMyBucket@P8CHost@@AEXAAVCAr@@K@Z@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyMap@PAVCClientSockE@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyPool@V?$CMyBucket@PAVCClientSockE@@@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IDHash@@YAKKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMclCritSec@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CMyMap@PAVCClientSock@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyPool@V?$CMyBucket@PAVCClientSock@@@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CDPConsoleSrvr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMclAutoLock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Leave@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMclAutoLock@@QAE@AAVCMclCritSec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Enter@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBuffer2@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?sOverview@@3PADA				; sOverview
_BSS	SEGMENT
?sOverview@@3PADA DB 08000H DUP (?)			; sOverview
_BSS	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@J@Z				; CAr::operator<<
EXTRN	?CheckBuf@CAr@@QAEXI@Z:NEAR			; CAr::CheckBuf
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\ar.h
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??6CAr@@QAEAAV0@J@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 113  : 	{ CheckBuf( sizeof(LONG) );

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf

; 114  : 		*(UNALIGNED LONG*)m_lpBufCur = l; m_lpBufCur += sizeof(LONG); return *this; }

  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _l$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@J@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@K@Z				; CAr::operator<<
; Function compile flags: /Ogty
;	COMDAT ??6CAr@@QAEAAV0@K@Z
_TEXT	SEGMENT
_dw$ = 8						; size = 4
??6CAr@@QAEAAV0@K@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 116  : 	{ CheckBuf( sizeof(DWORD) );

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf

; 117  : 		*(UNALIGNED DWORD*)m_lpBufCur = dw; m_lpBufCur += sizeof(DWORD); return *this; }

  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _dw$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@K@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAK@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAK@Z
_TEXT	SEGMENT
_dw$ = 8						; size = 4
??5CAr@@QAEAAV0@AAK@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 146  : 	{	CAR_SAFE_READ( DWORD, dw );	}

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L153446
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _dw$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L153446:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _dw$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAK@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	?Send@CDPMng@@QAEHPAXKK@Z			; CDPMng::Send
EXTRN	?Send@CDPSock@@QAEHPADKK@Z:NEAR			; CDPSock::Send
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\net\include\dpmng.h
;	COMDAT ?Send@CDPMng@@QAEHPAXKK@Z
_TEXT	SEGMENT
_lpData$ = 8						; size = 4
_dwDataSize$ = 12					; size = 4
_dpidTo$ = 16						; size = 4
?Send@CDPMng@@QAEHPAXKK@Z PROC NEAR			; CDPMng::Send, COMDAT
; _this$ = ecx

; 171  : 	if( !m_pDPSock )

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	75 05		 jne	 SHORT $L153645

; 172  : 		return FALSE;

  00007	33 c0		 xor	 eax, eax

; 174  : }

  00009	c2 0c 00	 ret	 12			; 0000000cH
$L153645:

; 173  : 	return m_pDPSock->Send( (char*)lpData, dwDataSize, dpidTo );

  0000c	e9 00 00 00 00	 jmp	 ?Send@CDPSock@@QAEHPADKK@Z ; CDPSock::Send
?Send@CDPMng@@QAEHPAXKK@Z ENDP				; CDPMng::Send
_TEXT	ENDS
PUBLIC	?SendHdr@CHost@@QAEXKK@Z			; CHost::SendHdr
EXTRN	__except_list:DWORD
EXTRN	__chkstk:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??0CAr@@QAE@PAXI@Z:NEAR				; CAr::CAr
EXTRN	??1CAr@@QAE@XZ:NEAR				; CAr::~CAr
EXTRN	?GetBuffer@CAr@@QAEPAEPAH@Z:NEAR		; CAr::GetBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
$T160007 DD	0ffffffffH
	DD	FLAT:$L159988
$T160000 DD	019930520H
	DD	01H
	DD	FLAT:$T160007
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\host.h
xdata$x	ENDS
;	COMDAT ?SendHdr@CHost@@QAEXKK@Z
_TEXT	SEGMENT
_nBufSize$ = -16424					; size = 4
_ar$ = -16420						; size = 16404
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_dwHdr$ = 8						; size = 4
_dpid$ = 12						; size = 4
?SendHdr@CHost@@QAEXKK@Z PROC NEAR			; CHost::SendHdr, COMDAT
; _this$ = ecx

; 49   : {

  00000	6a ff		 push	 -1
  00002	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00008	68 00 00 00 00	 push	 __ehhandler$?SendHdr@CHost@@QAEXKK@Z
  0000d	50		 push	 eax
  0000e	b8 1c 40 00 00	 mov	 eax, 16412		; 0000401cH
  00013	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	56		 push	 esi

; 50   : 	BEFORESEND( ar, dwHdr );

  00025	6a 00		 push	 0
  00027	8b f1		 mov	 esi, ecx
  00029	6a 00		 push	 0
  0002b	8d 4c 24 10	 lea	 ecx, DWORD PTR _ar$[esp+16436]
  0002f	89 84 24 24 40
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+16436], eax
  00036	e8 00 00 00 00	 call	 ??0CAr@@QAE@PAXI@Z	; CAr::CAr
  0003b	6a 04		 push	 4
  0003d	8d 4c 24 0c	 lea	 ecx, DWORD PTR _ar$[esp+16432]
  00041	c7 84 24 2c 40
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+16440], 0
  0004c	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  00051	8b 44 24 10	 mov	 eax, DWORD PTR _ar$[esp+16436]
  00055	8b 8c 24 30 40
	00 00		 mov	 ecx, DWORD PTR _dwHdr$[esp+16424]
  0005c	89 08		 mov	 DWORD PTR [eax], ecx
  0005e	8b 4c 24 10	 mov	 ecx, DWORD PTR _ar$[esp+16436]
  00062	83 c1 04	 add	 ecx, 4

; 51   : 	SEND( ar, this, dpid );

  00065	8d 54 24 04	 lea	 edx, DWORD PTR _nBufSize$[esp+16428]
  00069	89 4c 24 10	 mov	 DWORD PTR _ar$[esp+16436], ecx
  0006d	52		 push	 edx
  0006e	8d 4c 24 0c	 lea	 ecx, DWORD PTR _ar$[esp+16432]
  00072	e8 00 00 00 00	 call	 ?GetBuffer@CAr@@QAEPAEPAH@Z ; CAr::GetBuffer
  00077	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0007a	85 c9		 test	 ecx, ecx
  0007c	5e		 pop	 esi
  0007d	74 13		 je	 SHORT $L159993
  0007f	8b 94 24 30 40
	00 00		 mov	 edx, DWORD PTR _dpid$[esp+16420]
  00086	52		 push	 edx
  00087	8b 54 24 04	 mov	 edx, DWORD PTR _nBufSize$[esp+16428]
  0008b	52		 push	 edx
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?Send@CDPSock@@QAEHPADKK@Z ; CDPSock::Send
$L159993:

; 52   : }

  00092	8d 4c 24 04	 lea	 ecx, DWORD PTR _ar$[esp+16424]
  00096	c7 84 24 24 40
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+16432], -1
  000a1	e8 00 00 00 00	 call	 ??1CAr@@QAE@XZ		; CAr::~CAr
  000a6	8b 8c 24 1c 40
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+16424]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b4	8b 8c 24 18 40
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16424]
  000bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c0	81 c4 28 40 00
	00		 add	 esp, 16424		; 00004028H
  000c6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L159988:
  00000	8d 8d dc bf ff
	ff		 lea	 ecx, DWORD PTR _ar$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CAr@@QAE@XZ		; CAr::~CAr
__ehhandler$?SendHdr@CHost@@QAEXKK@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160000
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendHdr@CHost@@QAEXKK@Z ENDP				; CHost::SendHdr
PUBLIC	?GetSize@CMyTreeCtrl@@QAEKXZ			; CMyTreeCtrl::GetSize
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\mytreectrl.h
;	COMDAT ?GetSize@CMyTreeCtrl@@QAEKXZ
_TEXT	SEGMENT
?GetSize@CMyTreeCtrl@@QAEKXZ PROC NEAR			; CMyTreeCtrl::GetSize, COMDAT
; _this$ = ecx

; 70   : 	u_long	GetSize( void )		{	return m_nSizeOfahItem;		}

  00000	8b 81 50 04 00
	00		 mov	 eax, DWORD PTR [ecx+1104]
  00006	c3		 ret	 0
?GetSize@CMyTreeCtrl@@QAEKXZ ENDP			; CMyTreeCtrl::GetSize
_TEXT	ENDS
PUBLIC	?IsEnumerating@CMyTreeCtrl@@QAEHXZ		; CMyTreeCtrl::IsEnumerating
; Function compile flags: /Ogty
;	COMDAT ?IsEnumerating@CMyTreeCtrl@@QAEHXZ
_TEXT	SEGMENT
?IsEnumerating@CMyTreeCtrl@@QAEHXZ PROC NEAR		; CMyTreeCtrl::IsEnumerating, COMDAT
; _this$ = ecx

; 73   : 	BOOL	IsEnumerating( void )	{	return( m_uSizeofEnumItem > 0 );	}

  00000	8b 91 54 08 00
	00		 mov	 edx, DWORD PTR [ecx+2132]
  00006	33 c0		 xor	 eax, eax
  00008	3b c2		 cmp	 eax, edx
  0000a	1b c0		 sbb	 eax, eax
  0000c	f7 d8		 neg	 eax
  0000e	c3		 ret	 0
?IsEnumerating@CMyTreeCtrl@@QAEHXZ ENDP			; CMyTreeCtrl::IsEnumerating
_TEXT	ENDS
PUBLIC	?CleanupEnumItem@CMyTreeCtrl@@QAEXXZ		; CMyTreeCtrl::CleanupEnumItem
; Function compile flags: /Ogty
;	COMDAT ?CleanupEnumItem@CMyTreeCtrl@@QAEXXZ
_TEXT	SEGMENT
?CleanupEnumItem@CMyTreeCtrl@@QAEXXZ PROC NEAR		; CMyTreeCtrl::CleanupEnumItem, COMDAT
; _this$ = ecx

; 74   : 	void	CleanupEnumItem( void )		{	m_uSizeofEnumItem	= m_uIndexofEnumItem	= 0;	}

  00000	33 c0		 xor	 eax, eax
  00002	89 81 58 08 00
	00		 mov	 DWORD PTR [ecx+2136], eax
  00008	89 81 54 08 00
	00		 mov	 DWORD PTR [ecx+2132], eax
  0000e	c3		 ret	 0
?CleanupEnumItem@CMyTreeCtrl@@QAEXXZ ENDP		; CMyTreeCtrl::CleanupEnumItem
_TEXT	ENDS
PUBLIC	?OnRemoveConnection@CDPConsoleSrvr@@AAEXK@Z	; CDPConsoleSrvr::OnRemoveConnection
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.cpp
;	COMDAT ?OnRemoveConnection@CDPConsoleSrvr@@AAEXK@Z
_TEXT	SEGMENT
_dpid$ = 8						; size = 4
?OnRemoveConnection@CDPConsoleSrvr@@AAEXK@Z PROC NEAR	; CDPConsoleSrvr::OnRemoveConnection, COMDAT
; _this$ = ecx

; 58   : }

  00000	c2 04 00	 ret	 4
?OnRemoveConnection@CDPConsoleSrvr@@AAEXK@Z ENDP	; CDPConsoleSrvr::OnRemoveConnection
_TEXT	ENDS
PUBLIC	?SendError@CDPConsoleSrvr@@QAEXJK@Z		; CDPConsoleSrvr::SendError
;	COMDAT xdata$x
; File c:\offi src_real\offi src!\_network\net\include\dpmng.h
xdata$x	SEGMENT
$T160043 DD	0ffffffffH
	DD	FLAT:$L160027
$T160040 DD	019930520H
	DD	01H
	DD	FLAT:$T160043
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.cpp
xdata$x	ENDS
;	COMDAT ?SendError@CDPConsoleSrvr@@QAEXJK@Z
_TEXT	SEGMENT
_nBufSize$ = -16424					; size = 4
_ar$ = -16420						; size = 16404
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lError$ = 8						; size = 4
_dpid$ = 12						; size = 4
?SendError@CDPConsoleSrvr@@QAEXJK@Z PROC NEAR		; CDPConsoleSrvr::SendError, COMDAT
; _this$ = ecx

; 84   : {

  00000	6a ff		 push	 -1
  00002	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00008	68 00 00 00 00	 push	 __ehhandler$?SendError@CDPConsoleSrvr@@QAEXJK@Z
  0000d	50		 push	 eax
  0000e	b8 1c 40 00 00	 mov	 eax, 16412		; 0000401cH
  00013	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	56		 push	 esi

; 85   : 	BEFORESEND( ar, PACKETTYPE_ERROR );

  00025	6a 00		 push	 0
  00027	8b f1		 mov	 esi, ecx
  00029	6a 00		 push	 0
  0002b	8d 4c 24 10	 lea	 ecx, DWORD PTR _ar$[esp+16436]
  0002f	89 84 24 24 40
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+16436], eax
  00036	e8 00 00 00 00	 call	 ??0CAr@@QAE@PAXI@Z	; CAr::CAr
  0003b	6a 04		 push	 4
  0003d	8d 4c 24 0c	 lea	 ecx, DWORD PTR _ar$[esp+16432]
  00041	c7 84 24 2c 40
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+16440], 0
  0004c	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  00051	8b 44 24 10	 mov	 eax, DWORD PTR _ar$[esp+16436]
  00055	c7 00 fe 00 00
	00		 mov	 DWORD PTR [eax], 254	; 000000feH
  0005b	83 44 24 10 04	 add	 DWORD PTR _ar$[esp+16436], 4

; 86   : 	ar << lError;

  00060	6a 04		 push	 4
  00062	8d 4c 24 0c	 lea	 ecx, DWORD PTR _ar$[esp+16432]
  00066	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0006b	8b 4c 24 10	 mov	 ecx, DWORD PTR _ar$[esp+16436]
  0006f	8b 94 24 30 40
	00 00		 mov	 edx, DWORD PTR _lError$[esp+16424]
  00076	89 11		 mov	 DWORD PTR [ecx], edx
  00078	8b 54 24 10	 mov	 edx, DWORD PTR _ar$[esp+16436]

; 87   : 	SEND( ar, this, dpid );

  0007c	8d 44 24 04	 lea	 eax, DWORD PTR _nBufSize$[esp+16428]
  00080	83 c2 04	 add	 edx, 4
  00083	50		 push	 eax
  00084	8d 4c 24 0c	 lea	 ecx, DWORD PTR _ar$[esp+16432]
  00088	89 54 24 14	 mov	 DWORD PTR _ar$[esp+16440], edx
  0008c	e8 00 00 00 00	 call	 ?GetBuffer@CAr@@QAEPAEPAH@Z ; CAr::GetBuffer
  00091	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00094	85 c9		 test	 ecx, ecx
  00096	5e		 pop	 esi
  00097	74 13		 je	 SHORT $L160035
  00099	8b 94 24 30 40
	00 00		 mov	 edx, DWORD PTR _dpid$[esp+16420]
  000a0	52		 push	 edx
  000a1	8b 54 24 04	 mov	 edx, DWORD PTR _nBufSize$[esp+16428]
  000a5	52		 push	 edx
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?Send@CDPSock@@QAEHPADKK@Z ; CDPSock::Send
$L160035:

; 88   : }

  000ac	8d 4c 24 04	 lea	 ecx, DWORD PTR _ar$[esp+16424]
  000b0	c7 84 24 24 40
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+16432], -1
  000bb	e8 00 00 00 00	 call	 ??1CAr@@QAE@XZ		; CAr::~CAr
  000c0	8b 8c 24 1c 40
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+16424]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ce	8b 8c 24 18 40
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16424]
  000d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000da	81 c4 28 40 00
	00		 add	 esp, 16424		; 00004028H
  000e0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160027:
  00000	8d 8d dc bf ff
	ff		 lea	 ecx, DWORD PTR _ar$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CAr@@QAE@XZ		; CAr::~CAr
__ehhandler$?SendError@CDPConsoleSrvr@@QAEXJK@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160040
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendError@CDPConsoleSrvr@@QAEXJK@Z ENDP		; CDPConsoleSrvr::SendError
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
EXTRN	?AfxThrowMemoryException@@YGXXZ:NEAR		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:NEAR		; AfxThrowOleException
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hr$[esp-4]
  00004	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  00009	75 05		 jne	 SHORT $L37616

; 65   : 	{
; 66   : 		AfxThrowMemoryException();

  0000b	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$L160050:
$L37616:

; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$L160051:
$L160049:
  00016	cc		 int	 3
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
_TEXT	ENDS
PUBLIC	?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z	; ATL::ChTraitsCRT<char>::StringCompare
EXTRN	__mbscmp:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT
_pszA$ = 8						; size = 4
_pszB$ = 12						; size = 4
?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z PROC NEAR	; ATL::ChTraitsCRT<char>::StringCompare, COMDAT

; 336  : 		return _mbscmp( reinterpret_cast< const unsigned char* >( pszA ), reinterpret_cast< const unsigned char* >( pszB ) );

  00000	e9 00 00 00 00	 jmp	 __mbscmp
?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z ENDP	; ATL::ChTraitsCRT<char>::StringCompare
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 66   : 		return (this+1);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 67   : 	}

  00003	c3		 ret	 0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
PUBLIC	?IsShared@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsShared
; Function compile flags: /Ogty
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
?IsShared@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsShared, COMDAT
; _this$ = ecx

; 80   : 		return( nRefs > 1 ); 

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	33 c0		 xor	 eax, eax
  00005	83 fa 01	 cmp	 edx, 1
  00008	0f 9f c0	 setg	 al

; 81   : 	}

  0000b	c3		 ret	 0
?IsShared@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsShared
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
; Function compile flags: /Ogty
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 93   : 		ATLASSERT( nRefs != 0 );
; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	83 ca ff	 or	 edx, -1
  00006	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  0000a	4a		 dec	 edx
  0000b	85 d2		 test	 edx, edx
  0000d	7f 0a		 jg	 SHORT $L38333

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b c8		 mov	 ecx, eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L38333:

; 98   : 		}
; 99   : 	}

  00019	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	?empty@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::empty
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?empty@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NXZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::empty, COMDAT
; _this$ = ecx

; 502  : 		return (_Mysize == 0);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al

; 503  : 		}

  0000a	c3		 ret	 0
?empty@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NXZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::empty
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Nextnode
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Nextnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Nextnode, COMDAT

; 108  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 109  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Prevnode
; Function compile flags: /Ogty
;	COMDAT ?_Prevnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Prevnode, COMDAT

; 113  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 114  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::deallocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?AddItToActiveList@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::AddItToActiveList
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mymap.h
;	COMDAT ?AddItToActiveList@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
_pBucket$ = 8						; size = 4
?AddItToActiveList@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::AddItToActiveList, COMDAT
; _this$ = ecx

; 443  : 	// Add it to the active list
; 444  : 	if( m_pFirstActive )

  00000	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00003	85 d2		 test	 edx, edx
  00005	8b 44 24 04	 mov	 eax, DWORD PTR _pBucket$[esp-4]
  00009	74 03		 je	 SHORT $L158778

; 445  : 		m_pFirstActive->pPrevious	= pBucket;

  0000b	89 42 10	 mov	 DWORD PTR [edx+16], eax
$L158778:

; 446  : 	pBucket->pNext	= m_pFirstActive;

  0000e	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00011	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 447  : 	pBucket->pPrevious	= NULL;

  00014	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 448  : 	m_pFirstActive	= pBucket;

  0001b	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 449  : }

  0001e	c2 04 00	 ret	 4
?AddItToActiveList@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::AddItToActiveList
_TEXT	ENDS
PUBLIC	??0?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
PUBLIC	??_7?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`vftable'
PUBLIC	??_E?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`vector deleting destructor'
;	COMDAT ??_7?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@
CONST	SEGMENT
??_7?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@ DD FLAT:??_E?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ
_TEXT	SEGMENT
??0?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ PROC NEAR ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>, COMDAT
; _this$ = ecx

; 52   : {

  00000	8b c1		 mov	 eax, ecx

; 53   : 	m_dwKey		= INVALID_KEY;
; 54   : 	m_pNext		= NULL;	// map

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@
  0000a	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 55   : 	pPrevious	= pNext		= NULL;	// list

  00014	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00017	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 56   : }

  0001a	c3		 ret	 0
??0?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ ENDP ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
_TEXT	ENDS
PUBLIC	??1?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
; Function compile flags: /Ogty
;	COMDAT ??1?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ
_TEXT	SEGMENT
??1?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ PROC NEAR ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>, COMDAT
; _this$ = ecx

; 59   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@

; 60   : 
; 61   : }

  00006	c3		 ret	 0
??1?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ENDP ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
_TEXT	ENDS
PUBLIC	?IsEqual@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHK@Z ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::IsEqual
; Function compile flags: /Ogty
;	COMDAT ?IsEqual@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHK@Z
_TEXT	SEGMENT
_dwKey$ = 8						; size = 4
?IsEqual@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHK@Z PROC NEAR ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::IsEqual, COMDAT
; _this$ = ecx

; 70   : 	return( dwKey == m_dwKey );

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _dwKey$[esp-4]
  00004	56		 push	 esi
  00005	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00008	33 c0		 xor	 eax, eax
  0000a	3b d6		 cmp	 edx, esi
  0000c	0f 94 c0	 sete	 al
  0000f	5e		 pop	 esi

; 71   : }

  00010	c2 04 00	 ret	 4
?IsEqual@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHK@Z ENDP ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::IsEqual
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHXZ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::IsEmpty
; Function compile flags: /Ogty
;	COMDAT ?IsEmpty@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHXZ
_TEXT	SEGMENT
?IsEmpty@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHXZ PROC NEAR ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::IsEmpty, COMDAT
; _this$ = ecx

; 75   : 	return( m_dwKey == INVALID_KEY );

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	33 c0		 xor	 eax, eax
  00005	83 fa ff	 cmp	 edx, -1
  00008	0f 94 c0	 sete	 al

; 76   : }

  0000b	c3		 ret	 0
?IsEmpty@?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHXZ ENDP ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::IsEmpty
_TEXT	ENDS
PUBLIC	??$_Destroy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::_Destroy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::_Destroy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::_Destroy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::_Destroy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::_Destroy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::_Destroy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>
_TEXT	ENDS
PUBLIC	?empty@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QBE_NXZ ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::empty
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stack
;	COMDAT ?empty@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QBE_NXZ PROC NEAR ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::empty, COMDAT
; _this$ = ecx

; 33   : 		return (c.empty());

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al

; 34   : 		}

  0000a	c3		 ret	 0
?empty@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QBE_NXZ ENDP ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::empty
_TEXT	ENDS
PUBLIC	??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@XZ ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@XZ PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@XZ ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator++
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??Econst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 170  : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 171  : 			_Ptr = _Nextnode(_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	89 10		 mov	 DWORD PTR [eax], edx

; 172  : 			return (*this);
; 173  : 			}

  00008	c3		 ret	 0
??Econst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??8const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 197  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 198  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV01@@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	?_Myval@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Myval
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Myval@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Myval, COMDAT

; 118  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 119  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@KAAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Myval
_TEXT	ENDS
PUBLIC	??0const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 156  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 157  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator*
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??Dconst_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 109  : 			size_type _Block = _Myoff / _DEQUESIZ;

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 110  : 			size_type _Off = _Myoff - _Block * _DEQUESIZ;
; 111  : 			if (_Mycont->_Mapsize <= _Block)

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b c2		 mov	 eax, edx
  00007	c1 e8 02	 shr	 eax, 2
  0000a	56		 push	 esi
  0000b	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00012	2b d6		 sub	 edx, esi
  00014	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00017	3b f0		 cmp	 esi, eax
  00019	77 02		 ja	 SHORT $L159171

; 112  : 				_Block -= _Mycont->_Mapsize;

  0001b	2b c6		 sub	 eax, esi
$L159171:

; 113  : 			return ((_Mycont->_Map)[_Block][_Off]);

  0001d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00020	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00023	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00026	5e		 pop	 esi

; 114  : 			}

  00027	c3		 ret	 0
??Dconst_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Yiterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yiterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 282  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 283  : 			this->_Myoff += _Off;

  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00009	03 d1		 add	 edx, ecx
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 284  : 			return (*this);
; 285  : 			}

  0000e	c2 04 00	 ret	 4
??Yiterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??0const_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0const_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 102  : 			{	// construct with offset _Off in *_Pdeque
; 103  : 			_Mycont = _Pdeque;
; 104  : 			_Myoff = _Off;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 08	 mov	 ecx, DWORD PTR __Pdeque$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 105  : 			}

  0000f	c2 08 00	 ret	 8
??0const_iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z PROC NEAR ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ENDP ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *,std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@ABQAU120@@Z PROC NEAR ; std::_Construct<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *,std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L160160
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L160160:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *,std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
;	COMDAT ??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
;	COMDAT ??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z PROC NEAR ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@ABV?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ENDP ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node><CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@3@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::_Mynode
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Mynode@const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@3@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 207  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 208  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@3@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU012@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node::_Node
; Function compile flags: /Ogty
;	COMDAT ??0_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU012@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Nextarg$ = 8						; size = 4
__Prevarg$ = 12						; size = 4
__Myvalarg$ = 16					; size = 4
??0_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU012@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node::_Node, COMDAT
; _this$ = ecx

; 34   : 			{	// construct a node with value

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Prevarg$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR __Nextarg$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Myvalarg$[esp-4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 35   : 			}

  00018	c2 0c 00	 ret	 12			; 0000000cH
??0_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU012@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node::_Node
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QBEIXZ ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QBEIXZ PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QBEIXZ ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@Z ; std::_Allocate<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@Z PROC NEAR ; std::_Allocate<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@Z ENDP ; std::_Allocate<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	??$_Construct@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAV1@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV1@@Z ; std::_Construct<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAV1@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAV1@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV1@@Z PROC NEAR ; std::_Construct<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L160189
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L160189:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAV1@@std@@YAXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV1@@Z ENDP ; std::_Construct<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAPAV1@@Z ; std::_Allocate<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAPAV1@@Z PROC NEAR ; std::_Allocate<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAPAV1@@Z ENDP ; std::_Allocate<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0@Z ; std::_Ptr_cat<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0@Z PROC NEAR ; std::_Ptr_cat<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>, COMDAT

; 218  : 	{	// return pointer category from pointer to pointer arguments

  00000	51		 push	 ecx

; 219  : 	_Scalar_ptr_iterator_tag _Cat;
; 220  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 221  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0@Z ENDP ; std::_Ptr_cat<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAV1@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAV1@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAV1@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>, COMDAT

; 106  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 107  : 	return ((_Ty2 *)memmove(&*_Dest, &*_First,
; 108  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 109  : 	}

  00027	c3		 ret	 0
??$_Uninit_copy@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAV1@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >
_TEXT	ENDS
PUBLIC	??$fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@@Z ; std::fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@@Z PROC NEAR ; std::fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>, COMDAT

; 1160 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 14		 jbe	 SHORT $L159539
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$L159537:

; 1161 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L159537
  0001b	5e		 pop	 esi
$L159539:

; 1162 : 	}

  0001c	c3		 ret	 0
??$fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@@Z ENDP ; std::fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
_TEXT	ENDS
PUBLIC	?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ	; CTreeCtrl::GetRootItem
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcmn.inl
;	COMDAT ?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ
_TEXT	SEGMENT
?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ PROC NEAR	; CTreeCtrl::GetRootItem, COMDAT
; _this$ = ecx

; 286  : 	{ ASSERT(::IsWindow(m_hWnd)); return (HTREEITEM)::SendMessage(m_hWnd, TVM_GETNEXTITEM, TVGN_ROOT, 0); }

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	68 0a 11 00 00	 push	 4362			; 0000110aH
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00013	c3		 ret	 0
?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ ENDP	; CTreeCtrl::GetRootItem
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L160220:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L160220
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	??0CMclCritSec@@QAE@XZ				; CMclCritSec::CMclCritSec
PUBLIC	??_7CMclCritSec@@6B@				; CMclCritSec::`vftable'
PUBLIC	??_GCMclCritSec@@UAEPAXI@Z			; CMclCritSec::`scalar deleting destructor'
EXTRN	??_ECMclCritSec@@UAEPAXI@Z:NEAR			; CMclCritSec::`vector deleting destructor'
EXTRN	__imp__InitializeCriticalSection@4:NEAR
;	COMDAT ??_7CMclCritSec@@6B@
; File c:\offi src_real\offi src!\_network\mcl\include\cmclcritsec.h
CONST	SEGMENT
??_7CMclCritSec@@6B@ DD FLAT:??_ECMclCritSec@@UAEPAXI@Z	; CMclCritSec::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CMclCritSec@@QAE@XZ
_TEXT	SEGMENT
??0CMclCritSec@@QAE@XZ PROC NEAR			; CMclCritSec::CMclCritSec, COMDAT
; _this$ = ecx

; 19   :     CMclCritSec(void)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 20   :     {
; 21   : 		::InitializeCriticalSection( &m_CritSec );

  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CMclCritSec@@6B@
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 22   : 	}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c3		 ret	 0
??0CMclCritSec@@QAE@XZ ENDP				; CMclCritSec::CMclCritSec
_TEXT	ENDS
PUBLIC	??1CMclCritSec@@UAE@XZ				; CMclCritSec::~CMclCritSec
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ??1CMclCritSec@@UAE@XZ
_TEXT	SEGMENT
??1CMclCritSec@@UAE@XZ PROC NEAR			; CMclCritSec::~CMclCritSec, COMDAT
; _this$ = ecx

; 26   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CMclCritSec@@6B@

; 27   : 		::DeleteCriticalSection( &m_CritSec );

  00006	83 c1 04	 add	 ecx, 4
  00009	51		 push	 ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 28   : 	}

  00010	c3		 ret	 0
??1CMclCritSec@@UAE@XZ ENDP				; CMclCritSec::~CMclCritSec
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCMclCritSec@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMclCritSec@@UAEPAXI@Z PROC NEAR			; CMclCritSec::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CMclCritSec@@6B@
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00013	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00018	74 09		 je	 SHORT $L160240
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L160240:
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 04 00	 ret	 4
??_GCMclCritSec@@UAEPAXI@Z ENDP				; CMclCritSec::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?IDHash@@YAKKI@Z				; IDHash
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\cmnhdr.h
;	COMDAT ?IDHash@@YAKKI@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
_HashSize$ = 12						; size = 4
?IDHash@@YAKKI@Z PROC NEAR				; IDHash, COMDAT

; 48   : 	return (((id) + (id>>8) + (id>>16) + (id>>24)) & (HashSize-1));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _id$[esp-4]
  00004	8b d0		 mov	 edx, eax
  00006	8b c8		 mov	 ecx, eax
  00008	c1 ea 10	 shr	 edx, 16			; 00000010H
  0000b	03 d0		 add	 edx, eax
  0000d	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00010	c1 e8 08	 shr	 eax, 8
  00013	03 d1		 add	 edx, ecx
  00015	8b 4c 24 08	 mov	 ecx, DWORD PTR _HashSize$[esp-4]
  00019	03 c2		 add	 eax, edx
  0001b	49		 dec	 ecx
  0001c	23 c1		 and	 eax, ecx

; 49   : }

  0001e	c3		 ret	 0
?IDHash@@YAKKI@Z ENDP					; IDHash
_TEXT	ENDS
PUBLIC	?IsPrime@@YAHK@Z				; IsPrime
; Function compile flags: /Ogty
;	COMDAT ?IsPrime@@YAHK@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?IsPrime@@YAHK@Z PROC NEAR				; IsPrime, COMDAT

; 78   : {

  00000	56		 push	 esi

; 79   : 	u_long i = 2, j = n;
; 80   : 	while( i < j ) {

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _n$[esp]
  00005	b9 02 00 00 00	 mov	 ecx, 2
  0000a	3b f1		 cmp	 esi, ecx
  0000c	76 11		 jbe	 SHORT $L130212
  0000e	8b ff		 npad	 2
$L130211:

; 81   : 		if( n % i == 0 )

  00010	33 d2		 xor	 edx, edx
  00012	8b c6		 mov	 eax, esi
  00014	f7 f1		 div	 ecx
  00016	85 d2		 test	 edx, edx
  00018	74 0c		 je	 SHORT $L160248

; 83   : 		j = n / i++;

  0001a	41		 inc	 ecx
  0001b	3b c8		 cmp	 ecx, eax
  0001d	72 f1		 jb	 SHORT $L130211
$L130212:

; 84   : 	}
; 85   : 	return TRUE;

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	5e		 pop	 esi

; 86   : }

  00025	c3		 ret	 0
$L160248:

; 82   : 			return FALSE;

  00026	33 c0		 xor	 eax, eax
  00028	5e		 pop	 esi

; 86   : }

  00029	c3		 ret	 0
?IsPrime@@YAHK@Z ENDP					; IsPrime
_TEXT	ENDS
PUBLIC	??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ		; ATL::CSimpleStringT<char,0>::operator char const *
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::operator char const *, COMDAT
; _this$ = ecx

; 379  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 380  : 	}

  00002	c3		 ret	 0
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP		; ATL::CSimpleStringT<char,0>::operator char const *
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ	; ATL::CSimpleStringT<char,0>::GetString
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetString, COMDAT
; _this$ = ecx

; 510  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 511  : 	}

  00002	c3		 ret	 0
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP	; ATL::CSimpleStringT<char,0>::GetString
_TEXT	ENDS
PUBLIC	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
; Function compile flags: /Ogty
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetData, COMDAT
; _this$ = ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 732  : 	}

  00005	c3		 ret	 0
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetData
_TEXT	ENDS
PUBLIC	?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::SetLength
; Function compile flags: /Ogty
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetLength, COMDAT
; _this$ = ecx

; 790  : 		ATLASSERT( nLength >= 0 );
; 791  : 		ATLASSERT( nLength <= GetData()->nAllocLength );
; 792  : 
; 793  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nLength$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 13		 jl	 SHORT $L147368
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	3b 42 f8	 cmp	 eax, DWORD PTR [edx-8]
  0000d	7f 0c		 jg	 SHORT $L147368

; 794  : 			AtlThrow(E_INVALIDARG);
; 795  : 			
; 796  : 		GetData()->nDataLength = nLength;

  0000f	89 42 f4	 mov	 DWORD PTR [edx-12], eax

; 797  : 		m_pszData[nLength] = 0;

  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 798  : 	}

  00018	c2 04 00	 ret	 4
$L147368:
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L160272:
$L160271:
  00025	cc		 int	 3
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::SetLength
_TEXT	ENDS
PUBLIC	?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
EXTRN	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ:NEAR ; AfxGetStringManager
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ PROC NEAR ; StrTraitMFC<char,ATL::ChTraitsCRT<char> >::GetDefaultManager, COMDAT

; 50   : 		return( AfxGetStringManager() );

  00000	e9 00 00 00 00	 jmp	 ?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager
?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ENDP ; StrTraitMFC<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L160280
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L160280:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<char,0>::Attach
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Attach, COMDAT
; _this$ = ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pData$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H
  00007	89 01		 mov	 DWORD PTR [ecx], eax

; 713  : 	}

  00009	c2 04 00	 ret	 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<char,0>::Attach
_TEXT	ENDS
PUBLIC	?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z ; ATL::ChTraitsCRT<char>::GetFormattedLength
EXTRN	__vscprintf:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT
_pszFormat$ = 8						; size = 4
_args$ = 12						; size = 4
?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z PROC NEAR ; ATL::ChTraitsCRT<char>::GetFormattedLength, COMDAT

; 408  : 		return _vscprintf( pszFormat, args );

  00000	e9 00 00 00 00	 jmp	 __vscprintf
?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z ENDP ; ATL::ChTraitsCRT<char>::GetFormattedLength
_TEXT	ENDS
PUBLIC	?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z	; ATL::ChTraitsCRT<char>::Format
EXTRN	_vsprintf:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT
_pszBuffer$ = 8						; size = 4
_pszFormat$ = 12					; size = 4
_args$ = 16						; size = 4
?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z PROC NEAR	; ATL::ChTraitsCRT<char>::Format, COMDAT

; 413  : 		return vsprintf( pszBuffer, pszFormat, args );

  00000	e9 00 00 00 00	 jmp	 _vsprintf
?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z ENDP		; ATL::ChTraitsCRT<char>::Format
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L160302
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L160302:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ; ATL::CSimpleStringT<char,0>::CopyChars
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CopyChars, COMDAT

; 653  : 		memcpy( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nChars$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _pchSrc$[esp]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	8b 7c 24 0c	 mov	 edi, DWORD PTR _pchDest$[esp+4]
  00010	c1 e9 02	 shr	 ecx, 2
  00013	f3 a5		 rep movsd
  00015	8b c8		 mov	 ecx, eax
  00017	83 e1 03	 and	 ecx, 3
  0001a	f3 a4		 rep movsb
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 654  : 	}

  0001e	c3		 ret	 0
?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ENDP ; ATL::CSimpleStringT<char,0>::CopyChars
_TEXT	ENDS
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
; Function compile flags: /Ogty
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::ThrowMemoryException, COMDAT

; 705  : 		AtlThrow( E_OUTOFMEMORY );

  00000	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00005	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L160314:
$L160313:
  0000a	cc		 int	 3
?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
_TEXT	ENDS
PUBLIC	?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::Fork
; Function compile flags: /Ogty
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv181 = 8						; size = 4
_nLength$ = 8						; size = 4
?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::Fork, COMDAT
; _this$ = ecx

; 715  : 	{

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 716  : 		CStringData* pOldData = GetData();

  00002	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00004	83 eb 10	 sub	 ebx, 16			; 00000010H
  00007	55		 push	 ebp

; 717  : 		int nOldLength = pOldData->nDataLength;

  00008	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  0000b	89 4c 24 08	 mov	 DWORD PTR _this$[esp+12], ecx

; 718  : 		CStringData* pNewData = pOldData->pStringMgr->Clone()->Allocate( nLength, sizeof( XCHAR ) );

  0000f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	56		 push	 esi
  00014	ff 50 10	 call	 DWORD PTR [eax+16]
  00017	8b 74 24 14	 mov	 esi, DWORD PTR _nLength$[esp+12]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	6a 01		 push	 1
  0001f	56		 push	 esi
  00020	8b c8		 mov	 ecx, eax
  00022	ff 12		 call	 DWORD PTR [edx]

; 719  : 		if( pNewData == NULL )

  00024	85 c0		 test	 eax, eax
  00026	75 05		 jne	 SHORT $L147773

; 720  : 		{
; 721  : 			ThrowMemoryException();

  00028	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L160345:
$L147773:

; 722  : 		}
; 723  : 		int nCharsToCopy = ((nOldLength < nLength) ? nOldLength : nLength)+1;  // Copy '\0'

  0002d	3b ee		 cmp	 ebp, esi
  0002f	7d 02		 jge	 SHORT $L160319
  00031	8b f5		 mov	 esi, ebp
$L160319:
  00033	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]

; 724  : 		CopyChars( PXSTR( pNewData->data() ), PCXSTR( pOldData->data() ), nCharsToCopy );

  00036	8b d1		 mov	 edx, ecx
  00038	57		 push	 edi
  00039	c1 e9 02	 shr	 ecx, 2
  0003c	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  0003f	89 7c 24 18	 mov	 DWORD PTR tv181[esp+16], edi
  00043	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
  00046	f3 a5		 rep movsd
  00048	8b ca		 mov	 ecx, edx
  0004a	83 e1 03	 and	 ecx, 3
  0004d	f3 a4		 rep movsb

; 725  : 		pNewData->nDataLength = nOldLength;

  0004f	89 68 04	 mov	 DWORD PTR [eax+4], ebp

; 726  : 		pOldData->Release();

  00052	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00055	83 c9 ff	 or	 ecx, -1
  00058	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  0005c	49		 dec	 ecx
  0005d	85 c9		 test	 ecx, ecx
  0005f	5f		 pop	 edi
  00060	7f 08		 jg	 SHORT $L160334
  00062	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	53		 push	 ebx
  00067	ff 52 04	 call	 DWORD PTR [edx+4]
$L160334:

; 727  : 		Attach( pNewData );

  0006a	8b 44 24 14	 mov	 eax, DWORD PTR tv181[esp+12]
  0006e	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$[esp+16]
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp
  00074	89 01		 mov	 DWORD PTR [ecx], eax
  00076	5b		 pop	 ebx

; 728  : 	}

  00077	59		 pop	 ecx
  00078	c2 04 00	 ret	 4
$L160344:
?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP		; ATL::CSimpleStringT<char,0>::Fork
_TEXT	ENDS
PUBLIC	?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::Reallocate
; Function compile flags: /Ogty
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Reallocate, COMDAT
; _this$ = ecx

; 776  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi

; 777  : 		CStringData* pOldData = GetData();
; 778  : 		ATLASSERT( pOldData->nAllocLength < nLength );
; 779  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;
; 780  : 		CStringData* pNewData = pStringMgr->Reallocate( pOldData, nLength, sizeof( XCHAR ) );

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _nLength$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	8b 48 f0	 mov	 ecx, DWORD PTR [eax-16]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	83 e8 10	 sub	 eax, 16			; 00000010H
  00012	6a 01		 push	 1
  00014	57		 push	 edi
  00015	50		 push	 eax
  00016	ff 52 08	 call	 DWORD PTR [edx+8]

; 781  : 		if( pNewData == NULL )

  00019	85 c0		 test	 eax, eax
  0001b	75 05		 jne	 SHORT $L147782

; 782  : 		{
; 783  : 			ThrowMemoryException();

  0001d	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L160361:
$L147782:

; 784  : 		}
; 785  : 		Attach( pNewData );

  00022	83 c0 10	 add	 eax, 16			; 00000010H
  00025	5f		 pop	 edi
  00026	89 06		 mov	 DWORD PTR [esi], eax
  00028	5e		 pop	 esi

; 786  : 	}

  00029	c2 04 00	 ret	 4
$L160360:
?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::Reallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L160370
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L160371
$L160370:
  00011	8b d0		 mov	 edx, eax
$L160371:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L147799
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L160378
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L160378:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L147799
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L147799:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	?Compare@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Compare
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?Compare@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?Compare@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z PROC NEAR ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Compare, COMDAT
; _this$ = ecx

; 1088 : 		ATLASSERT( AtlIsValidString( psz ) );
; 1089 : 		return( StringTraits::StringCompare( GetString(), psz ) );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _psz$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	50		 push	 eax
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 __mbscmp
  0000d	83 c4 08	 add	 esp, 8

; 1090 : 	}

  00010	c2 04 00	 ret	 4
?Compare@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Compare
_TEXT	ENDS
PUBLIC	?Lookup@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHKAAP8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::Lookup
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mymap.h
;	COMDAT ?Lookup@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHKAAP8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z
_TEXT	SEGMENT
_dwKey$ = 8						; size = 4
_value$ = 12						; size = 4
?Lookup@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHKAAP8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z PROC NEAR ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::Lookup, COMDAT
; _this$ = ecx

; 325  : 	ASSERT( m_nHashSize > 0 );
; 326  : 
; 327  : 	if( dwKey == INVALID_KEY )

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _dwKey$[esp-4]
  00004	83 fa ff	 cmp	 edx, -1

; 328  : 		return FALSE;

  00007	74 38		 je	 SHORT $L157941
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 329  : 	
; 330  : 	INIT_LOOP(1000);
; 331  : 	CMyBucket<T>* pBucket	= &m_pBuckets[IDHash( dwKey, m_nHashSize )];

  0000b	8b fa		 mov	 edi, edx
  0000d	c1 ef 10	 shr	 edi, 16			; 00000010H
  00010	03 fa		 add	 edi, edx
  00012	8b f2		 mov	 esi, edx
  00014	c1 ee 18	 shr	 esi, 24			; 00000018H
  00017	03 fe		 add	 edi, esi
  00019	8b 71 38	 mov	 esi, DWORD PTR [ecx+56]
  0001c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 08	 shr	 eax, 8
  00024	03 c7		 add	 eax, edi
  00026	4e		 dec	 esi
  00027	23 c6		 and	 eax, esi
  00029	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002c	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]

; 332  : 	while( pBucket )

  0002f	85 c0		 test	 eax, eax
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	74 0c		 je	 SHORT $L157941
$L157940:

; 333  : 	{
; 334  : 		VERIFY_LOOP( __FILE__, __LINE__ );
; 335  : 		if( pBucket->IsEqual( dwKey ) )

  00035	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00038	74 0c		 je	 SHORT $L160407

; 339  : 		}
; 340  : 		pBucket		= pBucket->m_pNext;

  0003a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0003d	85 c0		 test	 eax, eax
  0003f	75 f4		 jne	 SHORT $L157940
$L157941:

; 341  : 	}
; 342  : 	return FALSE;

  00041	33 c0		 xor	 eax, eax

; 343  : }

  00043	c2 08 00	 ret	 8
$L160407:

; 336  : 		{
; 337  : 			value	= pBucket->m_value;

  00046	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00049	8b 44 24 08	 mov	 eax, DWORD PTR _value$[esp-4]
  0004d	89 10		 mov	 DWORD PTR [eax], edx

; 338  : 			return TRUE;

  0004f	b8 01 00 00 00	 mov	 eax, 1

; 343  : }

  00054	c2 08 00	 ret	 8
?Lookup@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHKAAP8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z ENDP ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::Lookup
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
; Function compile flags: /Ogty
;	COMDAT ??_E?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_E?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z PROC NEAR ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	8a 5c 24 08	 mov	 bl, BYTE PTR ___flags$[esp]
  00005	f6 c3 02	 test	 bl, 2
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	74 2b		 je	 SHORT $L158006
  0000d	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00010	57		 push	 edi
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??1?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
  00016	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  00019	50		 push	 eax
  0001a	6a 18		 push	 24			; 00000018H
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00022	f6 c3 01	 test	 bl, 1
  00025	74 09		 je	 SHORT $L158007
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002d	83 c4 04	 add	 esp, 4
$L158007:
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	c2 04 00	 ret	 4
$L158006:
  00038	f6 c3 01	 test	 bl, 1
  0003b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@
  00041	74 09		 je	 SHORT $L158009
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00049	83 c4 04	 add	 esp, 4
$L158009:
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	c2 04 00	 ret	 4
??_E?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z ENDP ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::destroy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z PROC NEAR ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z PROC NEAR ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??Eiterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??Eiterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator++, COMDAT
; _this$ = ecx

; 249  : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 250  : 			++(*(const_iterator *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	89 10		 mov	 DWORD PTR [eax], edx

; 251  : 			return (*this);
; 252  : 			}

  00008	c3		 ret	 0
??Eiterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??9const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 202  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 203  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??0iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 235  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 236  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 161  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 162  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::construct
; Function compile flags: /Ogty
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@ABQAU342@@Z PROC NEAR ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L160488
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L160488:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	??Diterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??Diterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT
??Diterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 247  : 			return ((reference)**(const_iterator *)this);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b c2		 mov	 eax, edx
  00007	c1 e8 02	 shr	 eax, 2
  0000a	56		 push	 esi
  0000b	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00012	2b d6		 sub	 edx, esi
  00014	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00017	3b f0		 cmp	 esi, eax
  00019	77 02		 ja	 SHORT $L160499
  0001b	2b c6		 sub	 eax, esi
$L160499:
  0001d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00020	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00023	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00026	5e		 pop	 esi

; 248  : 			}

  00027	c3		 ret	 0
??Diterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??0?$_Deque_map@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ; std::_Deque_map<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Deque_map<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Deque_map@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Deque_map@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z PROC NEAR ; std::_Deque_map<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Deque_map<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Deque_map@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ENDP ; std::_Deque_map<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Deque_map<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	??0?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ; std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z PROC NEAR ; std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 44   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 45   : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ENDP ; std::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_nod<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	??0iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??0iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 242  : 			{	// construct with offset _Off in *_Pdeque

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 08	 mov	 ecx, DWORD PTR __Pdeque$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 243  : 			}

  0000f	c2 08 00	 ret	 8
??0iterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@IPBV12@@Z ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Ziterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator-=
; Function compile flags: /Ogty
;	COMDAT ??Ziterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Ziterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator-=, COMDAT
; _this$ = ecx

; 294  : 			{	// decrement by integer

  00000	8b c1		 mov	 eax, ecx

; 295  : 			return (*this += -_Off);

  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00009	2b d1		 sub	 edx, ecx
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 296  : 			}

  0000e	c2 04 00	 ret	 4
??Ziterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator-=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV3@@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::construct
; Function compile flags: /Ogty
;	COMDAT ?construct@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV3@@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L160543
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L160543:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEXPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@ABQAV3@@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *>::construct
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode
EXTRN	__CxxThrowException@8:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode, COMDAT
; _this$ = ecx

; 918  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 0c		 push	 12			; 0000000cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 919  : 		_TRY_BEGIN
; 920  : 		new ((void *)_Pnode) _Node(_Next, _Prev, _Val);

  0000a	85 c0		 test	 eax, eax
  0000c	74 16		 je	 SHORT $L160553
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Next$[esp-4]
  00012	8b 54 24 08	 mov	 edx, DWORD PTR __Prev$[esp-4]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
  00018	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0001c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
$L160553:

; 921  : 		_CATCH_ALL
; 922  : 		this->_Alnod.deallocate(_Pnode, 1);
; 923  : 		_RERAISE;
; 924  : 		_CATCH_END
; 925  : 		return (_Pnode);
; 926  : 		}

  00024	c2 0c 00	 ret	 12			; 0000000cH
?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode
_TEXT	ENDS
PUBLIC	?max_size@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?max_size@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::max_size, COMDAT
; _this$ = ecx

; 497  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 498  : 		}

  00005	c3		 ret	 0
?max_size@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z PROC NEAR ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@QAEPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@I@Z ENDP ; std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?max_size@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::max_size, COMDAT
; _this$ = ecx

; 436  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 437  : 		}

  00005	c3		 ret	 0
?max_size@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEIXZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::max_size
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z ; std::_Uninitialized_copy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_copy@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >, COMDAT

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 129  : 	}

  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@PAPAPAV1@00AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z ENDP ; std::_Uninitialized_copy<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z ; std::_Destroy_range<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z PROC NEAR ; std::_Destroy_range<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@0AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z ENDP ; std::_Destroy_range<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_fill_n@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>, COMDAT

; 237  : 	fill_n(_First, _Count, _Val);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L160637
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L160635:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L160635
  0001b	5e		 pop	 esi
$L160637:

; 238  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *>
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );
; 213  : 		CStringData* pData = pStringMgr->GetNilString();

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _pStringMgr$[esp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 0c	 call	 DWORD PTR [eax+12]

; 214  : 		Attach( pData );

  0000c	83 c0 10	 add	 eax, 16			; 00000010H
  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 215  : 	}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	c2 04 00	 ret	 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
; Function compile flags: /Ogty
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 263  : 		CStringData* pData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 264  : 		pData->Release();

  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L160662
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L160662:

; 265  : 	}

  0001c	c3		 ret	 0
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength
; Function compile flags: /Ogty
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_nNewLength$ = 8					; size = 4
?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength, COMDAT
; _this$ = ecx

; 547  : 		ATLASSERT( nNewLength >= 0 );
; 548  : 		SetLength( nNewLength );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nNewLength$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 13		 jl	 SHORT $L160681
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	3b 42 f8	 cmp	 eax, DWORD PTR [edx-8]
  0000d	7f 0c		 jg	 SHORT $L160681
  0000f	89 42 f4	 mov	 DWORD PTR [edx-12], eax
  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 549  : 	}

  00018	c2 04 00	 ret	 4
$L160681:
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L160684:
$L160683:
  00025	cc		 int	 3
?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::PrepareWrite2, COMDAT
; _this$ = ecx

; 747  : 		CStringData* pOldData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 748  : 		if( pOldData->nDataLength > nLength )

  00002	8b 54 24 04	 mov	 edx, DWORD PTR _nLength$[esp-4]
  00006	83 e8 10	 sub	 eax, 16			; 00000010H
  00009	56		 push	 esi
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	3b f2		 cmp	 esi, edx
  0000f	7e 02		 jle	 SHORT $L147693

; 749  : 		{
; 750  : 			nLength = pOldData->nDataLength;

  00011	8b d6		 mov	 edx, esi
$L147693:

; 751  : 		}
; 752  : 		if( pOldData->IsShared() )

  00013	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00017	5e		 pop	 esi
  00018	7e 09		 jle	 SHORT $L147694

; 753  : 		{
; 754  : 			Fork( nLength );

  0001a	89 54 24 04	 mov	 DWORD PTR _nLength$[esp-4], edx
  0001e	e9 00 00 00 00	 jmp	 ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::Fork
$L147694:

; 755  : 		}
; 756  : 		else if( pOldData->nAllocLength < nLength )

  00023	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00026	3b c2		 cmp	 eax, edx
  00028	7d 1f		 jge	 SHORT $L147696

; 757  : 		{
; 758  : 			// Grow exponentially, until we hit 1K.
; 759  : 			int nNewLength = pOldData->nAllocLength;
; 760  : 			if( nNewLength > 1024 )

  0002a	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0002f	7e 07		 jle	 SHORT $L147698

; 761  : 			{
; 762  : 				nNewLength += 1024;

  00031	05 00 04 00 00	 add	 eax, 1024		; 00000400H

; 763  : 			}
; 764  : 			else

  00036	eb 02		 jmp	 SHORT $L147699
$L147698:

; 765  : 			{
; 766  : 				nNewLength *= 2;

  00038	03 c0		 add	 eax, eax
$L147699:

; 767  : 			}
; 768  : 			if( nNewLength < nLength )

  0003a	3b c2		 cmp	 eax, edx
  0003c	7d 02		 jge	 SHORT $L147700

; 769  : 			{
; 770  : 				nNewLength = nLength;

  0003e	8b c2		 mov	 eax, edx
$L147700:

; 771  : 			}
; 772  : 			Reallocate( nNewLength );

  00040	89 44 24 04	 mov	 DWORD PTR _nLength$[esp-4], eax
  00044	e9 00 00 00 00	 jmp	 ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::Reallocate
$L147696:

; 773  : 		}
; 774  : 	}

  00049	c2 04 00	 ret	 4
?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::PrepareWrite2
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L160709
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L160709:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?GetHandler@CDPConsoleSrvr@@AAEP81@AEXAAVCAr@@K@ZK@Z ; CDPConsoleSrvr::GetHandler
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.h
;	COMDAT ?GetHandler@CDPConsoleSrvr@@AAEP81@AEXAAVCAr@@K@ZK@Z
_TEXT	SEGMENT
_pfn$ = 8						; size = 4
_dwType$ = 8						; size = 4
?GetHandler@CDPConsoleSrvr@@AAEP81@AEXAAVCAr@@K@ZK@Z PROC NEAR ; CDPConsoleSrvr::GetHandler, COMDAT
; _this$ = ecx

; 29   : 	USES_PFNENTRIES;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _dwType$[esp-4]
  00004	8d 44 24 04	 lea	 eax, DWORD PTR _pfn$[esp-4]
  00008	50		 push	 eax
  00009	52		 push	 edx
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ?Lookup@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHKAAP8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::Lookup
  00012	8b 4c 24 04	 mov	 ecx, DWORD PTR _pfn$[esp-4]
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	23 c1		 and	 eax, ecx
  0001c	c2 04 00	 ret	 4
?GetHandler@CDPConsoleSrvr@@AAEP81@AEXAAVCAr@@K@ZK@Z ENDP ; CDPConsoleSrvr::GetHandler
_TEXT	ENDS
PUBLIC	?UserMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z ; CDPConsoleSrvr::UserMessageHandler
;	COMDAT xdata$x
xdata$x	SEGMENT
$T160755 DD	0ffffffffH
	DD	FLAT:$L160740
$T160752 DD	019930520H
	DD	01H
	DD	FLAT:$T160755
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.cpp
xdata$x	ENDS
;	COMDAT ?UserMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z
_TEXT	SEGMENT
_pfn$160749 = -16424					; size = 4
_ar$ = -16420						; size = 16404
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lpMsg$ = 8						; size = 4
_dwMsgSize$ = 12					; size = 4
_dpid$ = 16						; size = 4
?UserMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z PROC NEAR ; CDPConsoleSrvr::UserMessageHandler, COMDAT
; _this$ = ecx

; 37   : {

  00000	6a ff		 push	 -1
  00002	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00008	68 00 00 00 00	 push	 __ehhandler$?UserMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z
  0000d	50		 push	 eax
  0000e	b8 1c 40 00 00	 mov	 eax, 16412		; 0000401cH
  00013	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	56		 push	 esi
  00025	89 84 24 1c 40
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+16428], eax

; 38   : 	CAr ar( (LPBYTE)lpMsg, dwMsgSize );

  0002c	8b 84 24 34 40
	00 00		 mov	 eax, DWORD PTR _dwMsgSize$[esp+16424]
  00033	8b f1		 mov	 esi, ecx
  00035	8b 8c 24 30 40
	00 00		 mov	 ecx, DWORD PTR _lpMsg$[esp+16424]
  0003c	50		 push	 eax
  0003d	51		 push	 ecx
  0003e	8d 4c 24 10	 lea	 ecx, DWORD PTR _ar$[esp+16436]
  00042	e8 00 00 00 00	 call	 ??0CAr@@QAE@PAXI@Z	; CAr::CAr

; 39   : 	GETTYPE( ar );

  00047	8b 4c 24 10	 mov	 ecx, DWORD PTR _ar$[esp+16436]
  0004b	8b 54 24 14	 mov	 edx, DWORD PTR _ar$[esp+16440]
  0004f	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00052	3b c2		 cmp	 eax, edx
  00054	c7 84 24 28 40
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+16436], 0
  0005f	77 08		 ja	 SHORT $L160743
  00061	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00063	89 44 24 10	 mov	 DWORD PTR _ar$[esp+16436], eax
  00067	eb 06		 jmp	 SHORT $L160744
$L160743:
  00069	33 c9		 xor	 ecx, ecx
  0006b	89 54 24 10	 mov	 DWORD PTR _ar$[esp+16436], edx
$L160744:

; 40   : 	void ( theClass::*pfn )( theParameters )

  0006f	8d 54 24 04	 lea	 edx, DWORD PTR _pfn$160749[esp+16428]
  00073	52		 push	 edx
  00074	51		 push	 ecx
  00075	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00078	e8 00 00 00 00	 call	 ?Lookup@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEHKAAP8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::Lookup
  0007d	8b 4c 24 04	 mov	 ecx, DWORD PTR _pfn$160749[esp+16428]
  00081	f7 d8		 neg	 eax
  00083	1b c0		 sbb	 eax, eax
  00085	23 c1		 and	 eax, ecx

; 41   : 		=	GetHandler( dw );
; 42   : 	
; 43   : 	if( pfn ) {

  00087	74 11		 je	 SHORT $L157290

; 44   : 		( this->*( pfn ) )( ar, dpid );

  00089	8b 8c 24 38 40
	00 00		 mov	 ecx, DWORD PTR _dpid$[esp+16424]
  00090	51		 push	 ecx
  00091	8d 54 24 0c	 lea	 edx, DWORD PTR _ar$[esp+16432]
  00095	52		 push	 edx
  00096	8b ce		 mov	 ecx, esi
  00098	ff d0		 call	 eax
$L157290:

; 45   : 	}
; 46   : 	else {
; 47   : //		ASSERT( 0 );
; 48   : 	}
; 49   : }

  0009a	8d 4c 24 08	 lea	 ecx, DWORD PTR _ar$[esp+16428]
  0009e	c7 84 24 28 40
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+16436], -1
  000a9	e8 00 00 00 00	 call	 ??1CAr@@QAE@XZ		; CAr::~CAr
  000ae	8b 8c 24 20 40
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+16428]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000bc	8b 8c 24 1c 40
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16428]
  000c3	5e		 pop	 esi
  000c4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c9	81 c4 28 40 00
	00		 add	 esp, 16424		; 00004028H
  000cf	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160740:
  00000	8d 8d dc bf ff
	ff		 lea	 ecx, DWORD PTR _ar$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CAr@@QAE@XZ		; CAr::~CAr
__ehhandler$?UserMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160752
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?UserMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z ENDP ; CDPConsoleSrvr::UserMessageHandler
PUBLIC	??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ; ATL::operator==
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_psz2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z PROC NEAR ; ATL::operator==, COMDAT

; 2088 : 		return( str1.Compare( psz2 ) == 0 );

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _psz2$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _str1$[esp-4]
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
  0000a	51		 push	 ecx
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __mbscmp
  00011	83 c4 08	 add	 esp, 8
  00014	f7 d8		 neg	 eax
  00016	1b c0		 sbb	 eax, eax
  00018	40		 inc	 eax

; 2089 : 	}

  00019	c3		 ret	 0
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ENDP ; ATL::operator==
_TEXT	ENDS
PUBLIC	?pop_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::pop_back
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?pop_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::pop_back, COMDAT
; _this$ = ecx

; 599  : 		if (!empty())

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 0d		 je	 SHORT $L158236

; 600  : 			{	// something to erase, do it
; 601  : 			size_type _Newoff = _Mysize + _Myoff - 1;
; 602  : 			size_type _Block = _Newoff / _DEQUESIZ;
; 603  : 			if (_Mapsize <= _Block)
; 604  : 				_Block -= _Mapsize;
; 605  : 			this->_Alval.destroy(_Map[_Block] + _Newoff % _DEQUESIZ);
; 606  : 			if (--_Mysize == 0)

  00007	48		 dec	 eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	75 07		 jne	 SHORT $L158236

; 607  : 				_Myoff = 0;

  0000d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L158236:

; 608  : 			}
; 609  : 		}

  00014	c3		 ret	 0
?pop_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::pop_back
_TEXT	ENDS
PUBLIC	?clear@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::clear
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?clear@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::clear, COMDAT
; _this$ = ecx

; 610  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 611  : 		_Nodeptr _Pnext;
; 612  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 613  : 		_Nextnode(_Myhead) = _Myhead;

  00008	89 09		 mov	 DWORD PTR [ecx], ecx

; 614  : 		_Prevnode(_Myhead) = _Myhead;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 615  : 		_Mysize = 0;
; 616  : 
; 617  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00010	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00013	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001a	74 19		 je	 SHORT $L158269
  0001c	57		 push	 edi
  0001d	8d 49 00	 npad	 3
$L158267:

; 618  : 			{	// delete an element
; 619  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 38		 mov	 edi, DWORD PTR [eax]

; 620  : 			this->_Alnod.destroy(_Pnode);
; 621  : 			this->_Alnod.deallocate(_Pnode, 1);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b f9		 cmp	 edi, ecx
  00030	8b c7		 mov	 eax, edi
  00032	75 ec		 jne	 SHORT $L158267
  00034	5f		 pop	 edi
$L158269:
  00035	5e		 pop	 esi

; 622  : 			}
; 623  : 		}

  00036	c3		 ret	 0
?clear@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::clear
_TEXT	ENDS
PUBLIC	?pop@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXXZ ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::pop
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stack
;	COMDAT ?pop@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXXZ PROC NEAR ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::pop, COMDAT
; _this$ = ecx

; 58   : 		c.pop_back();

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 0d		 je	 SHORT $L160818
  00007	48		 dec	 eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	75 07		 jne	 SHORT $L160818
  0000d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L160818:

; 59   : 		}

  00014	c3		 ret	 0
?pop@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXXZ ENDP ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::pop
_TEXT	ENDS
PUBLIC	?begin@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::begin
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?begin@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::begin, COMDAT
; _this$ = ecx

; 377  : 		return (iterator(_Nextnode(_Myhead)));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 378  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::end, COMDAT
; _this$ = ecx

; 387  : 		return (iterator(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 388  : 		}

  00009	c2 04 00	 ret	 4
?end@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::end
_TEXT	ENDS
PUBLIC	??Diterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT
??Diterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 240  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 241  : 			}

  00005	c3		 ret	 0
??Diterator@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode, COMDAT
; _this$ = ecx

; 899  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 0c		 push	 12			; 0000000cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 900  : 		int _Linkcnt = 0;
; 901  : 
; 902  : 		_TRY_BEGIN
; 903  : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000a	85 c0		 test	 eax, eax
  0000c	74 02		 je	 SHORT $L160892
  0000e	89 00		 mov	 DWORD PTR [eax], eax
$L160892:

; 904  : 		++_Linkcnt;
; 905  : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00010	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 02		 je	 SHORT $L160920
  00017	89 01		 mov	 DWORD PTR [ecx], eax
$L160920:

; 906  : 		_CATCH_ALL
; 907  : 		if (0 < _Linkcnt)
; 908  : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 909  : 		this->_Alnod.deallocate(_Pnode, 1);
; 910  : 		_RERAISE;
; 911  : 		_CATCH_END
; 912  : 		return (_Pnode);
; 913  : 		}

  00019	c3		 ret	 0
?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode
_TEXT	ENDS
PUBLIC	?end@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::end
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?end@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::end, COMDAT
; _this$ = ecx

; 449  : 		return (iterator(_Myoff + _Mysize, this));

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00006	03 d0		 add	 edx, eax
  00008	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 450  : 		}

  00011	c2 04 00	 ret	 4
?end@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::end
_TEXT	ENDS
PUBLIC	??0?$_Deque_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ; std::_Deque_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Deque_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Deque_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Deque_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z PROC NEAR ; std::_Deque_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Deque_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct allocator and base from _Al

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Deque_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ENDP ; std::_Deque_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Deque_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ; std::_List_ptr<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_ptr<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0?$_List_ptr@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z PROC NEAR ; std::_List_ptr<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_ptr<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 64   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 65   : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_ptr@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ENDP ; std::_List_ptr<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_ptr<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	??Giterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE?AV012@H@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator-
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??Giterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Giterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator-, COMDAT
; _this$ = ecx

; 300  : 			iterator _Tmp = *this;

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 301  : 			return (_Tmp -= _Off);

  00005	2b 4c 24 08	 sub	 ecx, DWORD PTR __Off$[esp-4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 302  : 			}

  00012	c2 08 00	 ret	 8
??Giterator@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::iterator::operator-
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z ; std::_Uninitialized_fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >, COMDAT

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L161020
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L161018:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L161018
  0001b	5e		 pop	 esi
$L161020:

; 258  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_fill_n@PAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IPAPAV1@V?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@YAXPAPAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@IABQAPAV1@AAV?$allocator@PAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@0@@Z ENDP ; std::_Uninitialized_fill_n<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * * *,unsigned int,CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> * *> >
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 796  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	8b c8		 mov	 ecx, eax
  0000c	ff 52 0c	 call	 DWORD PTR [edx+12]
  0000f	83 c0 10	 add	 eax, 16			; 00000010H
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 797  : 	}

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	c3		 ret	 0
??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 963  : 	}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H
  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L161063
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L161063:
  0001c	c3		 ret	 0
??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::PrepareWrite, COMDAT
; _this$ = ecx

; 734  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 735  : 		CStringData* pOldData = GetData();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]

; 736  : 		int nShared = 1-pOldData->nRefs;  // nShared < 0 means true, >= 0 means false

  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00008	83 e8 10	 sub	 eax, 16			; 00000010H
  0000b	b9 01 00 00 00	 mov	 ecx, 1
  00010	2b ca		 sub	 ecx, edx

; 737  : 		int nTooShort = pOldData->nAllocLength-nLength;  // nTooShort < 0 means true, >= 0 means false

  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	8b 44 24 08	 mov	 eax, DWORD PTR _nLength$[esp]
  00019	2b d0		 sub	 edx, eax

; 738  : 		if( (nShared|nTooShort) < 0 )  // If either sign bit is set (i.e. either is less than zero), we need to copy data

  0001b	0b ca		 or	 ecx, edx
  0001d	7d 08		 jge	 SHORT $L161072

; 739  : 		{
; 740  : 			PrepareWrite2( nLength );

  0001f	50		 push	 eax
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L161072:

; 741  : 		}
; 742  : 
; 743  : 		return( m_pszData );

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	5e		 pop	 esi

; 744  : 	}

  0002a	c2 04 00	 ret	 4
?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z ENDP ; ATL::CSimpleStringT<char,0>::PrepareWrite
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L161080

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L161080

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L161078
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L161078:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L161080:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L147725

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L147725:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L147726

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L147726:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L161146

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L161112
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L161113
$L161112:
  00036	8b d3		 mov	 edx, ebx
$L161113:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L161119
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L161120
$L161119:
  00041	8b cb		 mov	 ecx, ebx
$L161120:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L161143

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L161143:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L161146:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T161350 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T161352 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L161153
$T161353 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L161151
$T161351 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T161352
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T161353
$T161345 DD	019930520H
	DD	04H
	DD	FLAT:$T161350
	DD	02H
	DD	FLAT:$T161351
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L147789

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L147791
$L147789:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L147791
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L147791

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L147791:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L147793
$L161151:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L161346
  00092	c3		 ret	 0
$L161346:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L147793:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L161270

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L161267
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L161268
$L161267:
  000ae	83 c6 04	 add	 esi, 4
$L161268:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L161270:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L161312
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L161312:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L161341
  000f2	8b c2		 mov	 eax, edx
$L161341:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L161153:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L161251
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L161251:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L161354:
$L161349:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161345
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Tidy@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?_Tidy@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy, COMDAT
; _this$ = ecx

; 950  : 		{	// free all storage

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 951  : 		while (!empty())

  00004	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00007	33 db		 xor	 ebx, ebx
  00009	3b c3		 cmp	 eax, ebx
  0000b	74 1a		 je	 SHORT $L158069
  0000d	8d 49 00	 npad	 3
$L158068:

; 952  : 			pop_back();

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	3b c3		 cmp	 eax, ebx
  00015	74 0b		 je	 SHORT $L161371
  00017	48		 dec	 eax
  00018	3b c3		 cmp	 eax, ebx
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0001d	75 03		 jne	 SHORT $L161371
  0001f	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
$L161371:
  00022	39 5e 10	 cmp	 DWORD PTR [esi+16], ebx
  00025	75 e9		 jne	 SHORT $L158068
$L158069:
  00027	57		 push	 edi

; 953  : 		for (size_type _Count = _Mapsize; 0 < _Count; )

  00028	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0002b	3b fb		 cmp	 edi, ebx
  0002d	76 1a		 jbe	 SHORT $L158073
  0002f	90		 npad	 1
$L158072:

; 954  : 			{	// free storage for a block and destroy pointer
; 955  : 			if (*(_Map + --_Count) != 0)

  00030	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00033	8b 44 b8 fc	 mov	 eax, DWORD PTR [eax+edi*4-4]
  00037	4f		 dec	 edi
  00038	3b c3		 cmp	 eax, ebx
  0003a	74 09		 je	 SHORT $L161376

; 956  : 				this->_Alval.deallocate(*(_Map + _Count), _DEQUESIZ);

  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$L161376:

; 953  : 		for (size_type _Count = _Mapsize; 0 < _Count; )

  00045	3b fb		 cmp	 edi, ebx
  00047	77 e7		 ja	 SHORT $L158072
$L158073:

; 957  : 			this->_Almap.destroy(_Map + _Count);
; 958  : 			}
; 959  : 
; 960  : 		if (_Map)

  00049	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004c	3b c3		 cmp	 eax, ebx
  0004e	5f		 pop	 edi
  0004f	74 09		 je	 SHORT $L161387

; 961  : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for map

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$L161387:

; 962  : 		_Mapsize = 0;

  0005a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 963  : 		_Map = 0;

  0005d	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx

; 964  : 		}

  00062	c3		 ret	 0
?_Tidy@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Tidy@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy, COMDAT
; _this$ = ecx

; 929  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 930  : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::clear

; 931  : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 932  : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 933  : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 934  : 		_Myhead = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	5e		 pop	 esi

; 935  : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy
_TEXT	ENDS
PUBLIC	?Clear@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXXZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Clear
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mymap.h
;	COMDAT ?Clear@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXXZ
_TEXT	SEGMENT
?Clear@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXXZ PROC NEAR ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Clear, COMDAT
; _this$ = ecx

; 171  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 172  : 	INIT_LOOP(1000);
; 173  : 	for( list<T*>::iterator i = m_listBlock.begin(); i != m_listBlock.end(); ++i )

  00004	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00007	57		 push	 edi
  00008	8b 38		 mov	 edi, DWORD PTR [eax]
  0000a	33 db		 xor	 ebx, ebx
  0000c	3b f8		 cmp	 edi, eax
  0000e	74 29		 je	 SHORT $L158746
$L161444:

; 174  : 	{
; 175  : 		VERIFY_LOOP( __FILE__, __LINE__ );
; 176  : 		safe_delete_array( *i );

  00010	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00013	3b cb		 cmp	 ecx, ebx
  00015	74 1b		 je	 SHORT $L158745
  00017	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0001a	3b d3		 cmp	 edx, ebx
  0001c	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0001f	74 08		 je	 SHORT $L161409
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	6a 03		 push	 3
  00025	ff 10		 call	 DWORD PTR [eax]
  00027	eb 09		 jmp	 SHORT $L158745
$L161409:
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002f	83 c4 04	 add	 esp, 4
$L158745:
  00032	8b 3f		 mov	 edi, DWORD PTR [edi]
  00034	3b 7e 1c	 cmp	 edi, DWORD PTR [esi+28]
  00037	75 d7		 jne	 SHORT $L161444
$L158746:

; 177  : 	}
; 178  : 
; 179  : 	m_listBlock.clear();

  00039	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	89 09		 mov	 DWORD PTR [ecx], ecx
  00040	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00043	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  00046	3b 46 1c	 cmp	 eax, DWORD PTR [esi+28]
  00049	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  0004c	74 16		 je	 SHORT $L161512
  0004e	8b ff		 npad	 2
$L161510:
  00050	8b 38		 mov	 edi, DWORD PTR [eax]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00058	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0005b	83 c4 04	 add	 esp, 4
  0005e	3b f9		 cmp	 edi, ecx
  00060	8b c7		 mov	 eax, edi
  00062	75 ec		 jne	 SHORT $L161510
$L161512:

; 180  : 
; 181  : 	{
; 182  : 		INIT_LOOP(1000);
; 183  : 		while( !m_stackData.empty() )

  00064	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00067	74 1e		 je	 SHORT $L161563
  00069	8d a4 24 00 00
	00 00		 npad	 7
$L158754:

; 184  : 		{
; 185  : 			VERIFY_LOOP( __FILE__, __LINE__ );
; 186  : 			m_stackData.pop();

  00070	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00073	3b c3		 cmp	 eax, ebx
  00075	74 0b		 je	 SHORT $L161554
  00077	48		 dec	 eax
  00078	3b c3		 cmp	 eax, ebx
  0007a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0007d	75 03		 jne	 SHORT $L161554
  0007f	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
$L161554:
  00082	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00085	75 e9		 jne	 SHORT $L158754
$L161563:
  00087	5f		 pop	 edi

; 187  : 		}
; 188  : 	}
; 189  : 
; 190  : 	m_nInitialSize	= m_nGrowSize	= 0;

  00088	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  0008b	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx

; 191  : }

  00090	c3		 ret	 0
?Clear@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXXZ ENDP ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Clear
_TEXT	ENDS
PUBLIC	??0?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??0?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct empty deque

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 328  : 		}

  00010	c3		 ret	 0
??0?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	?back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::back
; Function compile flags: /Ogty
;	COMDAT ?back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT
?back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::back, COMDAT
; _this$ = ecx

; 546  : 		return (*(end() - 1));

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	56		 push	 esi
  00004	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00007	48		 dec	 eax
  00008	8b d1		 mov	 edx, ecx
  0000a	8b c8		 mov	 ecx, eax
  0000c	c1 e8 02	 shr	 eax, 2
  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	2b ce		 sub	 ecx, esi
  00018	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  0001b	3b f0		 cmp	 esi, eax
  0001d	77 02		 ja	 SHORT $L161649
  0001f	2b c6		 sub	 eax, esi
$L161649:
  00021	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00024	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00027	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0002a	5e		 pop	 esi

; 547  : 		}

  0002b	c3		 ret	 0
?back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::back
_TEXT	ENDS
PUBLIC	??0?$_List_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ; std::_List_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0?$_List_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z PROC NEAR ; std::_List_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 82   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 83   : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_val@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAE@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@1@@Z ENDP ; std::_List_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_List_val<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z ; ATL::CSimpleStringT<char,0>::GetBuffer
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT
_nMinBufferLength$ = 8					; size = 4
?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::GetBuffer, COMDAT
; _this$ = ecx

; 489  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 490  : 		return( PrepareWrite( nMinBufferLength ) );

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00008	83 e8 10	 sub	 eax, 16			; 00000010H
  0000b	b9 01 00 00 00	 mov	 ecx, 1
  00010	2b ca		 sub	 ecx, edx
  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	8b 44 24 08	 mov	 eax, DWORD PTR _nMinBufferLength$[esp]
  00019	2b d0		 sub	 edx, eax
  0001b	0b ca		 or	 ecx, edx
  0001d	7d 08		 jge	 SHORT $L161706
  0001f	50		 push	 eax
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L161706:
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	5e		 pop	 esi

; 491  : 	}

  0002a	c2 04 00	 ret	 4
?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z ENDP	; ATL::CSimpleStringT<char,0>::GetBuffer
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L161749
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L161749:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L147734

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L147734:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L147735

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L147735:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L147737
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L147737
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L161764
  00047	8b de		 mov	 ebx, esi
$L161764:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L161834
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L161832
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L161832:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L161834:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L147737:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L161855

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L161851
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L161851:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L161855:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?FormatV@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEXPBDPAD@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::FormatV
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?FormatV@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT
_pszFormat$ = 8						; size = 4
_args$ = 12						; size = 4
?FormatV@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEXPBDPAD@Z PROC NEAR ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::FormatV, COMDAT
; _this$ = ecx

; 1855 : 	{

  00000	53		 push	 ebx

; 1856 : 		ATLASSERT( AtlIsValidString( pszFormat ) );
; 1857 : 		if(pszFormat == NULL)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _pszFormat$[esp]
  00005	85 db		 test	 ebx, ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	75 0a		 jne	 SHORT $L157454

; 1858 : 			AtlThrow(E_INVALIDARG);

  0000c	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00011	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L161921:
$L157454:
  00016	55		 push	 ebp

; 1859 : 
; 1860 : 		int nLength = StringTraits::GetFormattedLength( pszFormat, args );

  00017	8b 6c 24 14	 mov	 ebp, DWORD PTR _args$[esp+8]
  0001b	56		 push	 esi
  0001c	55		 push	 ebp
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 __vscprintf
  00023	8b f0		 mov	 esi, eax

; 1861 : 		PXSTR pszBuffer = GetBuffer( nLength );

  00025	8b 07		 mov	 eax, DWORD PTR [edi]
  00027	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002a	83 e8 10	 sub	 eax, 16			; 00000010H
  0002d	b9 01 00 00 00	 mov	 ecx, 1
  00032	2b ca		 sub	 ecx, edx
  00034	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00037	2b d6		 sub	 edx, esi
  00039	83 c4 08	 add	 esp, 8
  0003c	0b ca		 or	 ecx, edx
  0003e	7d 08		 jge	 SHORT $L161886
  00040	56		 push	 esi
  00041	8b cf		 mov	 ecx, edi
  00043	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L161886:

; 1862 : 		StringTraits::Format( pszBuffer, pszFormat, args );

  00048	8b 07		 mov	 eax, DWORD PTR [edi]
  0004a	55		 push	 ebp
  0004b	53		 push	 ebx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _vsprintf
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1863 : 		ReleaseBufferSetLength( nLength );

  00055	85 f6		 test	 esi, esi
  00057	7c 17		 jl	 SHORT $L161916
  00059	8b 07		 mov	 eax, DWORD PTR [edi]
  0005b	3b 70 f8	 cmp	 esi, DWORD PTR [eax-8]
  0005e	7f 10		 jg	 SHORT $L161916
  00060	89 70 f4	 mov	 DWORD PTR [eax-12], esi
  00063	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00065	c6 04 0e 00	 mov	 BYTE PTR [esi+ecx], 0
  00069	5e		 pop	 esi
  0006a	5d		 pop	 ebp
  0006b	5f		 pop	 edi
  0006c	5b		 pop	 ebx

; 1864 : 	}

  0006d	c2 08 00	 ret	 8
$L161916:
  00070	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00075	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L161922:
$L161920:
  0007a	cc		 int	 3
?FormatV@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEXPBDPAD@Z ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::FormatV
_TEXT	ENDS
PUBLIC	??1?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::~deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??1?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::~deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 414  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy
??1?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::~deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	??1?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::~list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??1?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::~list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 364  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 365  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::clear
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	5e		 pop	 esi

; 366  : 		}

  0001c	c3		 ret	 0
??1?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::~list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	??0?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stack
;	COMDAT ??0?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ PROC NEAR ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >, COMDAT
; _this$ = ecx

; 23   : 		{	// construct with empty container

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 24   : 		}

  00010	c3		 ret	 0
??0?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >
_TEXT	ENDS
PUBLIC	?top@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::top
; Function compile flags: /Ogty
;	COMDAT ?top@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT
?top@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ PROC NEAR ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::top, COMDAT
; _this$ = ecx

; 43   : 		return (c.back());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	56		 push	 esi
  00004	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00007	48		 dec	 eax
  00008	8b d1		 mov	 edx, ecx
  0000a	8b c8		 mov	 ecx, eax
  0000c	c1 e8 02	 shr	 eax, 2
  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	2b ce		 sub	 ecx, esi
  00018	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  0001b	3b f0		 cmp	 esi, eax
  0001d	77 02		 ja	 SHORT $L162077
  0001f	2b c6		 sub	 eax, esi
$L162077:
  00021	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00024	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00027	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0002a	5e		 pop	 esi

; 44   : 		}

  0002b	c3		 ret	 0
?top@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEAAPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ENDP ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::top
_TEXT	ENDS
PUBLIC	??0?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >, COMDAT
; _this$ = ecx

; 280  : 		{	// construct empty list

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 281  : 		}

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??0?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L162208
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L162208:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L162236
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L162236:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L162243
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L162243:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L147398

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L147398:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L147400

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L147400:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L147401

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L147401:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L162352
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L162352:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L162353
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L162440:
  0006b	76 6d		 jbe	 SHORT $L162439

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L162405
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L162406

; 599  : 		else if (_Grow(_Num))

$L162353:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L162440
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L162396
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L162396:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L162405:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L162406:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L162412
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L162413
$L162412:
  000b7	8b f8		 mov	 edi, eax
$L162413:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L162436
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L162436:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L162439:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L162466
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L162467
$L162466:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L162467:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L147721
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L162470
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L162471
$L162470:
  00029	8b c8		 mov	 ecx, eax
$L162471:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L147721

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L162479
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L162479:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L147721:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L162577
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L162577:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L162578
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L162658:
  00077	76 68		 jbe	 SHORT $L162655

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L162630
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L162631

; 611  : 
; 612  : 		if (_Grow(_Num))

$L162578:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L162658
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L162621
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L162621:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L162630:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L162631:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L162653
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L162653:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L162655:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Format
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFormat$ = 12					; size = 4
?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ PROC NEAR ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Format, COMDAT

; 1796 : 		ATLASSERT( AtlIsValidString( pszFormat ) );
; 1797 : 		
; 1798 : 		va_list argList;
; 1799 : 		va_start( argList, pszFormat );
; 1800 : 		FormatV( pszFormat, argList );

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _pszFormat$[esp-4]
  00004	8d 44 24 0c	 lea	 eax, DWORD PTR _pszFormat$[esp]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$[esp+4]
  0000e	e8 00 00 00 00	 call	 ?FormatV@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEXPBDPAD@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::FormatV

; 1801 : 		va_end( argList );
; 1802 : 	}

  00013	c3		 ret	 0
?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Format
_TEXT	ENDS
PUBLIC	??1?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::~stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ PROC NEAR ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::~stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy
??1?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::~stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >
_TEXT	ENDS
PUBLIC	??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
PUBLIC	??_7?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@6B@ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::`vftable'
PUBLIC	??_G?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAEPAXI@Z ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::`scalar deleting destructor'
EXTRN	??_E?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAEPAXI@Z:NEAR ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T162832 DD	0ffffffffH
	DD	FLAT:$L162672
$T162830 DD	019930520H
	DD	01H
	DD	FLAT:$T162832
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@6B@
CONST	SEGMENT
??_7?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@6B@ DD FLAT:??_E?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAEPAXI@Z ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::`vftable'
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mymap.h
CONST	ENDS
;	COMDAT ??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ PROC NEAR ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >, COMDAT
; _this$ = ecx

; 156  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	33 db		 xor	 ebx, ebx
  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@6B@
  00022	57		 push	 edi
  00023	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00027	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0002a	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0002d	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00030	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00033	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  00036	8b cf		 mov	 ecx, edi
  00038	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  0003c	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode

; 157  : 	m_nInitialSize	= m_nGrowSize	= 0;
; 158  : }

  00041	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00045	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00048	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  0004b	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  0004e	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00051	5f		 pop	 edi
  00052	8b c6		 mov	 eax, esi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L162672:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T162830
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ ENDP ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L162907:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L162907
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?SendOverview@CDPConsoleSrvr@@QAEXK@Z		; CDPConsoleSrvr::SendOverview
PUBLIC	??_C@_01FJMABOPO@x?$AA@				; `string'
PUBLIC	??_C@_01FMEDJKGI@o?$AA@				; `string'
PUBLIC	??_C@_0BA@JLDPDOPG@?7?$CF?932s?5?9?9?9?9?5?$CFs?6?$AA@ ; `string'
EXTRN	?GethItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@H@Z:NEAR ; CMyTreeCtrl::GethItem
EXTRN	?WriteString@CAr@@QAEXPBD@Z:NEAR		; CAr::WriteString
EXTRN	?GetItemText@CTreeCtrl@@QBE?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAU_TREEITEM@@@Z:NEAR ; CTreeCtrl::GetItemText
EXTRN	?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z:NEAR ; CTreeCtrl::GetItemData
EXTRN	?GetCheck@CTreeCtrl@@QBEHPAU_TREEITEM@@@Z:NEAR	; CTreeCtrl::GetCheck
;	COMDAT xdata$x
; File c:\offi src_real\offi src!\_network\net\include\dpmng.h
xdata$x	SEGMENT
$T163029 DD	0ffffffffH
	DD	FLAT:$L162915
	DD	00H
	DD	FLAT:$L162916
	DD	0ffffffffH
	DD	FLAT:$L162917
$T163020 DD	019930520H
	DD	03H
	DD	FLAT:$T163029
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
CONST	SEGMENT
??_C@_01FJMABOPO@x?$AA@ DB 'x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FMEDJKGI@o?$AA@
CONST	SEGMENT
??_C@_01FMEDJKGI@o?$AA@ DB 'o', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JLDPDOPG@?7?$CF?932s?5?9?9?9?9?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BA@JLDPDOPG@?7?$CF?932s?5?9?9?9?9?5?$CFs?6?$AA@ DB 09H, '%-32s ---'
	DB	'- %s', 0aH, 00H				; `string'
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.cpp
CONST	ENDS
;	COMDAT ?SendOverview@CDPConsoleSrvr@@QAEXK@Z
_TEXT	SEGMENT
_sItem$157313 = -16440					; size = 4
_i$157307 = -16436					; size = 4
$T162914 = -16432					; size = 4
_nBufSize$ = -16428					; size = 4
_nSizeOfItem$ = -16424					; size = 4
_ar$ = -16420						; size = 16404
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_dpid$ = 8						; size = 4
?SendOverview@CDPConsoleSrvr@@QAEXK@Z PROC NEAR		; CDPConsoleSrvr::SendOverview, COMDAT
; _this$ = ecx

; 62   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendOverview@CDPConsoleSrvr@@QAEXK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	b8 2c 40 00 00	 mov	 eax, 16428		; 0000402cH
  00013	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	53		 push	 ebx
  00025	55		 push	 ebp
  00026	8b e9		 mov	 ebp, ecx
  00028	89 84 24 30 40
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+16448], eax

; 63   : 	*sOverview	= '\0';

  0002f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?sOverview@@3PADA, 0

; 64   : 	int nSizeOfItem		= (int)m_pMonitorDlg->m_tree.GetSize();

  00036	8b 45 10	 mov	 eax, DWORD PTR [ebp+16]
  00039	8b 88 c8 04 00
	00		 mov	 ecx, DWORD PTR [eax+1224]

; 65   : 	for( int i = 0; i < nSizeOfItem; i++ )

  0003f	33 c0		 xor	 eax, eax
  00041	85 c9		 test	 ecx, ecx
  00043	89 4c 24 18	 mov	 DWORD PTR _nSizeOfItem$[esp+16448], ecx
  00047	89 44 24 0c	 mov	 DWORD PTR _i$157307[esp+16448], eax
  0004b	0f 8e 23 01 00
	00		 jle	 $L157310
  00051	56		 push	 esi
  00052	57		 push	 edi
$L163026:

; 66   : 	{
; 67   : 		HTREEITEM hItem	= m_pMonitorDlg->m_tree.GethItem( i );

  00053	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00056	50		 push	 eax
  00057	83 c1 78	 add	 ecx, 120		; 00000078H
  0005a	e8 00 00 00 00	 call	 ?GethItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@H@Z ; CMyTreeCtrl::GethItem
  0005f	8b f0		 mov	 esi, eax

; 68   : 		if( NULL != hItem )

  00061	85 f6		 test	 esi, esi
  00063	0f 84 f4 00 00
	00		 je	 $L157309

; 69   : 		{
; 70   : 			CString sItem;

  00069	e8 00 00 00 00	 call	 ?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager
  0006e	8b 10		 mov	 edx, DWORD PTR [eax]
  00070	8b c8		 mov	 ecx, eax
  00072	ff 52 0c	 call	 DWORD PTR [edx+12]
  00075	83 c0 10	 add	 eax, 16			; 00000010H
  00078	89 44 24 10	 mov	 DWORD PTR _sItem$157313[esp+16456], eax

; 71   : 			PSrvrData pData
; 72   : 				= (PSrvrData)m_pMonitorDlg->m_tree.GetItemData( hItem );

  0007c	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  0007f	56		 push	 esi
  00080	83 c1 78	 add	 ecx, 120		; 00000078H
  00083	c7 84 24 48 40
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+16468], 0
  0008e	e8 00 00 00 00	 call	 ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z ; CTreeCtrl::GetItemData

; 73   : 			sItem.Format( "\t%-32s ---- %s\n", m_pMonitorDlg->m_tree.GetItemText( hItem ), m_pMonitorDlg->m_tree.GetCheck( hItem )?"x":"o" );

  00093	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00096	56		 push	 esi
  00097	83 c1 78	 add	 ecx, 120		; 00000078H
  0009a	e8 00 00 00 00	 call	 ?GetCheck@CTreeCtrl@@QBEHPAU_TREEITEM@@@Z ; CTreeCtrl::GetCheck
  0009f	85 c0		 test	 eax, eax
  000a1	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_01FJMABOPO@x?$AA@
  000a6	75 05		 jne	 SHORT $L162913
  000a8	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_01FMEDJKGI@o?$AA@
$L162913:
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  000b0	56		 push	 esi
  000b1	8d 44 24 1c	 lea	 eax, DWORD PTR $T162914[esp+16460]
  000b5	50		 push	 eax
  000b6	83 c1 78	 add	 ecx, 120		; 00000078H
  000b9	e8 00 00 00 00	 call	 ?GetItemText@CTreeCtrl@@QBE?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAU_TREEITEM@@@Z ; CTreeCtrl::GetItemText
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	57		 push	 edi
  000c1	51		 push	 ecx
  000c2	8d 54 24 18	 lea	 edx, DWORD PTR _sItem$157313[esp+16464]
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@JLDPDOPG@?7?$CF?932s?5?9?9?9?9?5?$CFs?6?$AA@
  000cb	52		 push	 edx
  000cc	c6 84 24 54 40
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+16480], 1
  000d4	e8 00 00 00 00	 call	 ?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Format
  000d9	8b 44 24 28	 mov	 eax, DWORD PTR $T162914[esp+16472]
  000dd	83 c0 f0	 add	 eax, -16		; fffffff0H
  000e0	83 c4 10	 add	 esp, 16			; 00000010H
  000e3	c6 84 24 44 40
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+16464], 0
  000eb	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000ee	83 ca ff	 or	 edx, -1
  000f1	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000f5	4a		 dec	 edx
  000f6	85 d2		 test	 edx, edx
  000f8	7f 08		 jg	 SHORT $L162977
  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fe	50		 push	 eax
  000ff	ff 52 04	 call	 DWORD PTR [edx+4]
$L162977:

; 74   : 			strcat( sOverview, (LPCSTR)sItem );

  00102	8b 5c 24 10	 mov	 ebx, DWORD PTR _sItem$157313[esp+16456]
  00106	8b c3		 mov	 eax, ebx
  00108	8b d3		 mov	 edx, ebx
  0010a	8d 9b 00 00 00
	00		 npad	 6
$L163023:
  00110	8a 08		 mov	 cl, BYTE PTR [eax]
  00112	40		 inc	 eax
  00113	84 c9		 test	 cl, cl
  00115	75 f9		 jne	 SHORT $L163023
  00117	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:?sOverview@@3PADA ; sOverview
  0011c	2b c2		 sub	 eax, edx
  0011e	4f		 dec	 edi
  0011f	90		 npad	 1
$L163024:
  00120	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00123	47		 inc	 edi
  00124	84 c9		 test	 cl, cl
  00126	75 f8		 jne	 SHORT $L163024
  00128	8b c8		 mov	 ecx, eax
  0012a	c1 e9 02	 shr	 ecx, 2
  0012d	8b f2		 mov	 esi, edx
  0012f	f3 a5		 rep movsd
  00131	8b c8		 mov	 ecx, eax
  00133	83 e1 03	 and	 ecx, 3

; 75   : 		}

  00136	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00139	f3 a4		 rep movsb
  0013b	c7 84 24 44 40
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+16464], -1
  00146	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00149	83 ca ff	 or	 edx, -1
  0014c	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00150	4a		 dec	 edx
  00151	85 d2		 test	 edx, edx
  00153	7f 08		 jg	 SHORT $L157309
  00155	8b 08		 mov	 ecx, DWORD PTR [eax]
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	50		 push	 eax
  0015a	ff 52 04	 call	 DWORD PTR [edx+4]
$L157309:
  0015d	8b 44 24 14	 mov	 eax, DWORD PTR _i$157307[esp+16456]
  00161	8b 4c 24 20	 mov	 ecx, DWORD PTR _nSizeOfItem$[esp+16456]
  00165	40		 inc	 eax
  00166	3b c1		 cmp	 eax, ecx
  00168	89 44 24 14	 mov	 DWORD PTR _i$157307[esp+16456], eax
  0016c	0f 8c e1 fe ff
	ff		 jl	 $L163026
  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
$L157310:

; 76   : 	}
; 77   : 
; 78   : 	BEFORESEND( ar, PACKETTYPE_CONSOLE_OVERVIEW );

  00174	6a 00		 push	 0
  00176	6a 00		 push	 0
  00178	8d 4c 24 24	 lea	 ecx, DWORD PTR _ar$[esp+16456]
  0017c	e8 00 00 00 00	 call	 ??0CAr@@QAE@PAXI@Z	; CAr::CAr
  00181	6a 04		 push	 4
  00183	8d 4c 24 20	 lea	 ecx, DWORD PTR _ar$[esp+16452]
  00187	c7 84 24 40 40
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+16460], 2
  00192	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  00197	8b 44 24 24	 mov	 eax, DWORD PTR _ar$[esp+16456]
  0019b	c7 00 02 80 00
	f0		 mov	 DWORD PTR [eax], -268402686 ; f0008002H
  001a1	8b 5c 24 24	 mov	 ebx, DWORD PTR _ar$[esp+16456]
  001a5	83 c3 04	 add	 ebx, 4

; 79   : 	ar.WriteString( sOverview );

  001a8	68 00 00 00 00	 push	 OFFSET FLAT:?sOverview@@3PADA ; sOverview
  001ad	8d 4c 24 20	 lea	 ecx, DWORD PTR _ar$[esp+16452]
  001b1	89 5c 24 28	 mov	 DWORD PTR _ar$[esp+16460], ebx
  001b5	e8 00 00 00 00	 call	 ?WriteString@CAr@@QAEXPBD@Z ; CAr::WriteString

; 80   : 	SEND( ar, this, dpid );

  001ba	8d 4c 24 14	 lea	 ecx, DWORD PTR _nBufSize$[esp+16448]
  001be	51		 push	 ecx
  001bf	8d 4c 24 20	 lea	 ecx, DWORD PTR _ar$[esp+16452]
  001c3	e8 00 00 00 00	 call	 ?GetBuffer@CAr@@QAEPAEPAH@Z ; CAr::GetBuffer
  001c8	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  001cb	85 c9		 test	 ecx, ecx
  001cd	5d		 pop	 ebp
  001ce	5b		 pop	 ebx
  001cf	74 13		 je	 SHORT $L163015
  001d1	8b 94 24 3c 40
	00 00		 mov	 edx, DWORD PTR _dpid$[esp+16436]
  001d8	52		 push	 edx
  001d9	8b 54 24 10	 mov	 edx, DWORD PTR _nBufSize$[esp+16444]
  001dd	52		 push	 edx
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ?Send@CDPSock@@QAEHPADKK@Z ; CDPSock::Send
$L163015:

; 81   : }

  001e4	8d 4c 24 14	 lea	 ecx, DWORD PTR _ar$[esp+16440]
  001e8	c7 84 24 34 40
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+16448], -1
  001f3	e8 00 00 00 00	 call	 ??1CAr@@QAE@XZ		; CAr::~CAr
  001f8	8b 8c 24 2c 40
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+16440]
  001ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00206	8b 8c 24 28 40
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16440]
  0020d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00212	81 c4 38 40 00
	00		 add	 esp, 16440		; 00004038H
  00218	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L162915:
  00000	8d 8d c8 bf ff
	ff		 lea	 ecx, DWORD PTR _sItem$157313[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
$L162916:
  0000b	8d 8d d0 bf ff
	ff		 lea	 ecx, DWORD PTR $T162914[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
$L162917:
  00016	8d 8d dc bf ff
	ff		 lea	 ecx, DWORD PTR _ar$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1CAr@@QAE@XZ		; CAr::~CAr
__ehhandler$?SendOverview@CDPConsoleSrvr@@QAEXK@Z:
  00021	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163020
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendOverview@CDPConsoleSrvr@@QAEXK@Z ENDP		; CDPConsoleSrvr::SendOverview
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?OnCommand@CDPConsoleSrvr@@AAEXAAVCAr@@K@Z	; CDPConsoleSrvr::OnCommand
EXTRN	?Error@@YAPBDPBDZZ:NEAR				; Error
EXTRN	?SendTerminateLwrProcess@CHost@@QAEXXZ:NEAR	; CHost::SendTerminateLwrProcess
EXTRN	?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z:NEAR ; CMyTreeCtrl::FindItem
EXTRN	?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z:NEAR ; CMyTreeCtrl::EnumItem
EXTRN	?ReadString@CAr@@QAEPADPADH@Z:NEAR		; CAr::ReadString
EXTRN	??0CScanner@@QAE@PAXH@Z:NEAR			; CScanner::CScanner
EXTRN	??1CScanner@@UAE@XZ:NEAR			; CScanner::~CScanner
EXTRN	?GetToken@CScanner@@UAEHH@Z:NEAR		; CScanner::GetToken
EXTRN	?GetNumber@CScanner@@QAEHH@Z:NEAR		; CScanner::GetNumber
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
xdata$x	SEGMENT
$T163125 DD	0ffffffffH
	DD	FLAT:$L163036
$T163122 DD	019930520H
	DD	01H
	DD	FLAT:$T163125
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.cpp
CONST	ENDS
;	COMDAT ?OnCommand@CDPConsoleSrvr@@AAEXAAVCAr@@K@Z
_TEXT	SEGMENT
_buffer$ = -3432					; size = 260
_s$ = -3168						; size = 3140
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_ar$ = 8						; size = 4
_dpid$ = 12						; size = 4
?OnCommand@CDPConsoleSrvr@@AAEXAAVCAr@@K@Z PROC NEAR	; CDPConsoleSrvr::OnCommand, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?OnCommand@CDPConsoleSrvr@@AAEXAAVCAr@@K@Z
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00013	50		 push	 eax
  00014	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001b	81 ec 60 0d 00
	00		 sub	 esp, 3424		; 00000d60H
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 84 24 64 0d
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+3448], eax
  00030	8b f1		 mov	 esi, ecx

; 92   : 	char buffer[260]	= { 0,};

  00032	33 c0		 xor	 eax, eax
  00034	33 db		 xor	 ebx, ebx
  00036	88 5c 24 10	 mov	 BYTE PTR _buffer$[esp+3448], bl
  0003a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0003f	8d 7c 24 11	 lea	 edi, DWORD PTR _buffer$[esp+3449]
  00043	f3 ab		 rep stosd

; 93   : 
; 94   : 	ar.ReadString( buffer, 260 );

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00048	66 ab		 stosw
  0004a	aa		 stosb
  0004b	68 04 01 00 00	 push	 260			; 00000104H
  00050	8d 44 24 14	 lea	 eax, DWORD PTR _buffer$[esp+3452]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?ReadString@CAr@@QAEPADPADH@Z ; CAr::ReadString

; 95   : 	
; 96   : 	Error( buffer );

  0005a	8d 4c 24 10	 lea	 ecx, DWORD PTR _buffer$[esp+3448]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?Error@@YAPBDPBDZZ	; Error
  00064	83 c4 04	 add	 esp, 4

; 97   : 
; 98   : 	CScanner s( buffer );

  00067	53		 push	 ebx
  00068	8d 54 24 14	 lea	 edx, DWORD PTR _buffer$[esp+3452]
  0006c	52		 push	 edx
  0006d	8d 8c 24 20 01
	00 00		 lea	 ecx, DWORD PTR _s$[esp+3456]
  00074	e8 00 00 00 00	 call	 ??0CScanner@@QAE@PAXH@Z	; CScanner::CScanner

; 99   : 
; 100  : 	s.GetToken();

  00079	53		 push	 ebx
  0007a	8d 8c 24 1c 01
	00 00		 lea	 ecx, DWORD PTR _s$[esp+3452]
  00081	89 9c 24 78 0d
	00 00		 mov	 DWORD PTR __$EHRec$[esp+3460], ebx
  00088	e8 00 00 00 00	 call	 ?GetToken@CScanner@@UAEHH@Z ; CScanner::GetToken

; 101  : 	if( s.Token == "r" )

  0008d	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR _s$[esp+3484]
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 __mbscmp
  0009f	83 c4 08	 add	 esp, 8
  000a2	85 c0		 test	 eax, eax
  000a4	0f 85 85 00 00
	00		 jne	 $L157343

; 102  : 	{
; 103  : 		DWORD dwId	= 0;
; 104  : 		dwId	= (DWORD)s.GetNumber();

  000aa	53		 push	 ebx
  000ab	8d 8c 24 1c 01
	00 00		 lea	 ecx, DWORD PTR _s$[esp+3452]
  000b2	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 105  : 		HTREEITEM hFind		= m_pMonitorDlg->m_tree.FindItem( m_pMonitorDlg->m_tree.GetRootItem(), dwId, true );

  000b7	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000ba	6a 01		 push	 1
  000bc	50		 push	 eax
  000bd	53		 push	 ebx
  000be	53		 push	 ebx
  000bf	83 c1 78	 add	 ecx, 120		; 00000078H
  000c2	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  000c5	68 0a 11 00 00	 push	 4362			; 0000110aH
  000ca	51		 push	 ecx
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000d1	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000d4	50		 push	 eax
  000d5	83 c1 78	 add	 ecx, 120		; 00000078H
  000d8	e8 00 00 00 00	 call	 ?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z ; CMyTreeCtrl::FindItem

; 106  : 		
; 107  : 		if( NULL == hFind ) {

  000dd	3b c3		 cmp	 eax, ebx
  000df	75 15		 jne	 SHORT $L157348

; 108  : 			SendError( ERROR_NODE_NOT_FOUND, dpid );

  000e1	8b 55 0c	 mov	 edx, DWORD PTR _dpid$[ebp]
  000e4	52		 push	 edx
  000e5	68 e8 03 00 00	 push	 1000			; 000003e8H
  000ea	8b ce		 mov	 ecx, esi
  000ec	e8 00 00 00 00	 call	 ?SendError@CDPConsoleSrvr@@QAEXJK@Z ; CDPConsoleSrvr::SendError

; 109  : 			return;

  000f1	e9 fb 00 00 00	 jmp	 $L157361
$L157348:

; 110  : 		}
; 111  : 
; 112  : 		m_pMonitorDlg->m_tree.EnumItem( hFind, true );

  000f6	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000f9	6a 01		 push	 1
  000fb	50		 push	 eax
  000fc	83 c1 78	 add	 ecx, 120		; 00000078H
  000ff	e8 00 00 00 00	 call	 ?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z ; CMyTreeCtrl::EnumItem

; 113  : 		PSrvrData pData	= (PSrvrData)m_pMonitorDlg->m_tree.GetItemData( m_pMonitorDlg->m_tree.m_ahEnumItem[0] );

  00104	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00107	8b 88 cc 04 00
	00		 mov	 ecx, DWORD PTR [eax+1228]
  0010d	51		 push	 ecx
  0010e	8d 48 78	 lea	 ecx, DWORD PTR [eax+120]
  00111	e8 00 00 00 00	 call	 ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z ; CTreeCtrl::GetItemData

; 114  : 		m_pMonitorDlg->m_pHost->SendHdr( PACKETTYPE_CREATE_PROCESS, pData->dpid );

  00116	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00119	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0011c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0011f	52		 push	 edx
  00120	68 00 a0 00 f0	 push	 -268394496		; f000a000H
  00125	e8 00 00 00 00	 call	 ?SendHdr@CHost@@QAEXKK@Z ; CHost::SendHdr

; 115  : 	}
; 116  : 	else if( s.Token == "s" )

  0012a	e9 c2 00 00 00	 jmp	 $L157361
$L157343:
  0012f	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR _s$[esp+3484]
  00136	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 __mbscmp
  00141	83 c4 08	 add	 esp, 8
  00144	85 c0		 test	 eax, eax
  00146	0f 85 81 00 00
	00		 jne	 $L157353

; 117  : 	{
; 118  : 		DWORD dwId	= 0;
; 119  : 		dwId	= (DWORD)s.GetNumber();

  0014c	53		 push	 ebx
  0014d	8d 8c 24 1c 01
	00 00		 lea	 ecx, DWORD PTR _s$[esp+3452]
  00154	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 120  : 		HTREEITEM hFind		= m_pMonitorDlg->m_tree.FindItem( m_pMonitorDlg->m_tree.GetRootItem(), dwId, true );

  00159	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0015c	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00162	6a 01		 push	 1
  00164	50		 push	 eax
  00165	53		 push	 ebx
  00166	53		 push	 ebx
  00167	83 c1 78	 add	 ecx, 120		; 00000078H
  0016a	68 0a 11 00 00	 push	 4362			; 0000110aH
  0016f	52		 push	 edx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00176	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00179	50		 push	 eax
  0017a	83 c1 78	 add	 ecx, 120		; 00000078H
  0017d	e8 00 00 00 00	 call	 ?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z ; CMyTreeCtrl::FindItem

; 121  : 
; 122  : 		if( NULL == hFind ) {

  00182	3b c3		 cmp	 eax, ebx
  00184	75 12		 jne	 SHORT $L157358

; 123  : 			SendError( ERROR_NODE_NOT_FOUND, dpid );

  00186	8b 45 0c	 mov	 eax, DWORD PTR _dpid$[ebp]
  00189	50		 push	 eax
  0018a	68 e8 03 00 00	 push	 1000			; 000003e8H
  0018f	8b ce		 mov	 ecx, esi
  00191	e8 00 00 00 00	 call	 ?SendError@CDPConsoleSrvr@@QAEXJK@Z ; CDPConsoleSrvr::SendError

; 124  : 			return;

  00196	eb 59		 jmp	 SHORT $L157361
$L157358:

; 125  : 		}
; 126  : 
; 127  : 		if( FALSE == m_pMonitorDlg->m_tree.IsEnumerating() )

  00198	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0019b	39 99 cc 08 00
	00		 cmp	 DWORD PTR [ecx+2252], ebx
  001a1	77 4e		 ja	 SHORT $L157361

; 128  : 		{
; 129  : 			m_pMonitorDlg->m_tree.EnumItem( hFind, true );

  001a3	6a 01		 push	 1
  001a5	50		 push	 eax
  001a6	83 c1 78	 add	 ecx, 120		; 00000078H
  001a9	e8 00 00 00 00	 call	 ?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z ; CMyTreeCtrl::EnumItem

; 130  : 			m_pMonitorDlg->m_pHost->SendTerminateLwrProcess();

  001ae	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  001b1	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  001b4	e8 00 00 00 00	 call	 ?SendTerminateLwrProcess@CHost@@QAEXXZ ; CHost::SendTerminateLwrProcess

; 131  : 			m_pMonitorDlg->m_tree.CleanupEnumItem();

  001b9	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
  001bc	83 c6 78	 add	 esi, 120		; 00000078H
  001bf	89 9e 58 08 00
	00		 mov	 DWORD PTR [esi+2136], ebx
  001c5	89 9e 54 08 00
	00		 mov	 DWORD PTR [esi+2132], ebx

; 132  : 		}
; 133  : 	}
; 134  : 	else if( s.Token == "" )

  001cb	eb 24		 jmp	 SHORT $L157361
$L157353:
  001cd	8b 94 24 3c 01
	00 00		 mov	 edx, DWORD PTR _s$[esp+3484]
  001d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001d9	52		 push	 edx
  001da	e8 00 00 00 00	 call	 __mbscmp
  001df	83 c4 08	 add	 esp, 8
  001e2	85 c0		 test	 eax, eax
  001e4	75 0b		 jne	 SHORT $L157361

; 135  : 	{
; 136  : 		SendOverview( dpid );

  001e6	8b 45 0c	 mov	 eax, DWORD PTR _dpid$[ebp]
  001e9	50		 push	 eax
  001ea	8b ce		 mov	 ecx, esi
  001ec	e8 00 00 00 00	 call	 ?SendOverview@CDPConsoleSrvr@@QAEXK@Z ; CDPConsoleSrvr::SendOverview
$L157361:

; 137  : 	}
; 138  : }

  001f1	8d 8c 24 18 01
	00 00		 lea	 ecx, DWORD PTR _s$[esp+3448]
  001f8	c7 84 24 74 0d
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+3456], -1
  00203	e8 00 00 00 00	 call	 ??1CScanner@@UAE@XZ	; CScanner::~CScanner
  00208	8b 8c 24 6c 0d
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+3448]
  0020f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00216	8b 8c 24 64 0d
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+3448]
  0021d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5b		 pop	 ebx
  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163036:
  00000	8d 8d a0 f3 ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CScanner@@UAE@XZ	; CScanner::~CScanner
__ehhandler$?OnCommand@CDPConsoleSrvr@@AAEXAAVCAr@@K@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163122
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnCommand@CDPConsoleSrvr@@AAEXAAVCAr@@K@Z ENDP		; CDPConsoleSrvr::OnCommand
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L163201:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L163201
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::~CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
xdata$x	SEGMENT
$T163250 DD	0ffffffffH
	DD	FLAT:$L163205
	DD	00H
	DD	FLAT:$L163206
$T163248 DD	019930520H
	DD	02H
	DD	FLAT:$T163250
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mymap.h
xdata$x	ENDS
;	COMDAT ??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ PROC NEAR ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::~CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >, COMDAT
; _this$ = ecx

; 166  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	57		 push	 edi
  0001a	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@6B@
  00024	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 1

; 167  : 	Clear();

  0002c	e8 00 00 00 00	 call	 ?Clear@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXXZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Clear

; 168  : }

  00031	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  00034	8b cf		 mov	 ecx, edi
  00036	e8 00 00 00 00	 call	 ?clear@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXXZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::clear
  0003b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00044	83 c4 04	 add	 esp, 4
  00047	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0004a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00051	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Tidy
  00056	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163205:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAE@XZ
$L163206:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	e9 00 00 00 00	 jmp	 ??1?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAE@XZ ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::~list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >
__ehhandler$??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ:
  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163248
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ ENDP ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::~CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
PUBLIC	??0?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
PUBLIC	??_7?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@ ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`vftable'
PUBLIC	??_G?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`scalar deleting destructor'
EXTRN	??_E?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z:NEAR ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`vector deleting destructor'
;	COMDAT ??_7?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@
; File c:\offi src_real\offi src!\_network\mcl\include\cmclcritsec.h
CONST	SEGMENT
??_7?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@ DD FLAT:??_E?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`vftable'
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mymap.h
CONST	ENDS
;	COMDAT ??0?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ
_TEXT	SEGMENT
??0?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ PROC NEAR ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>, COMDAT
; _this$ = ecx

; 283  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@
  0000c	e8 00 00 00 00	 call	 ??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
  00011	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  00014	50		 push	 eax
  00015	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], OFFSET FLAT:??_7CMclCritSec@@6B@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 284  : 	m_pBuckets	= NULL;

  00022	33 c0		 xor	 eax, eax
  00024	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 285  : 	m_nHashSize		= 0;

  00027	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 286  : 	m_nTotal	= 0;

  0002a	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 287  : 	m_pFirstActive	= NULL;

  0002d	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 288  : }

  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi
  00033	c3		 ret	 0
??0?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ ENDP ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
_TEXT	ENDS
PUBLIC	??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
;	COMDAT xdata$x
; File c:\offi src_real\offi src!\_network\mcl\include\cmclcritsec.h
xdata$x	SEGMENT
$T163281 DD	0ffffffffH
	DD	FLAT:$L163272
	DD	00H
	DD	FLAT:$L163273
$T163279 DD	019930520H
	DD	02H
	DD	FLAT:$T163281
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mymap.h
xdata$x	ENDS
;	COMDAT ??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ PROC NEAR ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>, COMDAT
; _this$ = ecx

; 296  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@

; 297  : 	SAFE_DELETE_ARRAY( m_pBuckets );

  00023	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00026	85 c9		 test	 ecx, ecx
  00028	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 1
  00030	74 22		 je	 SHORT $L157870
  00032	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00035	85 d2		 test	 edx, edx
  00037	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0003a	74 08		 je	 SHORT $L163268
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	6a 03		 push	 3
  00040	ff 10		 call	 DWORD PTR [eax]
  00042	eb 09		 jmp	 SHORT $L163269
$L163268:
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004a	83 c4 04	 add	 esp, 4
$L163269:
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$L157870:

; 298  : }

  00054	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00057	51		 push	 ecx
  00058	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], OFFSET FLAT:??_7CMclCritSec@@6B@
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00065	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00068	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+28], -1
  00070	e8 00 00 00 00	 call	 ??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::~CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
  00075	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00079	5e		 pop	 esi
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163272:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::~CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
$L163273:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 40	 add	 ecx, 64			; 00000040H
  00011	e9 00 00 00 00	 jmp	 ??1CMclCritSec@@UAE@XZ	; CMclCritSec::~CMclCritSec
__ehhandler$??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ:
  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163279
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ENDP ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
; Function compile flags: /Ogty
;	COMDAT ??_G?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAEPAXI@Z PROC NEAR ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAE@XZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::~CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L163287
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L163287:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@UAEPAXI@Z ENDP ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_G?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z PROC NEAR ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L163291
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L163291:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAEPAXI@Z ENDP ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T163394 DD	0ffffffffH
	DD	FLAT:$L163295
$T163392 DD	019930520H
	DD	01H
	DD	FLAT:$T163394
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163295:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163392
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L163404
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L163404:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L163498
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L163498:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??1CDPConsoleSrvr@@UAE@XZ			; CDPConsoleSrvr::~CDPConsoleSrvr
PUBLIC	?SysMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z ; CDPConsoleSrvr::SysMessageHandler
PUBLIC	??_7CDPConsoleSrvr@@6B@				; CDPConsoleSrvr::`vftable'
PUBLIC	??_GCDPConsoleSrvr@@UAEPAXI@Z			; CDPConsoleSrvr::`scalar deleting destructor'
EXTRN	??1CDPMng@@UAE@XZ:NEAR				; CDPMng::~CDPMng
EXTRN	??_ECDPConsoleSrvr@@UAEPAXI@Z:NEAR		; CDPConsoleSrvr::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.cpp
xdata$x	SEGMENT
$T163519 DD	0ffffffffH
	DD	FLAT:$L163514
$T163517 DD	019930520H
	DD	01H
	DD	FLAT:$T163519
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CDPConsoleSrvr@@6B@
CONST	SEGMENT
??_7CDPConsoleSrvr@@6B@ DD FLAT:??_ECDPConsoleSrvr@@UAEPAXI@Z ; CDPConsoleSrvr::`vftable'
	DD	FLAT:?SysMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z
	DD	FLAT:?UserMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??1CDPConsoleSrvr@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDPConsoleSrvr@@UAE@XZ PROC NEAR			; CDPConsoleSrvr::~CDPConsoleSrvr, COMDAT
; _this$ = ecx

; 14   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1CDPConsoleSrvr@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CDPConsoleSrvr@@6B@

; 15   : }

  00023	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00026	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  0002e	e8 00 00 00 00	 call	 ??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
  00033	8b ce		 mov	 ecx, esi
  00035	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+28], -1
  0003d	e8 00 00 00 00	 call	 ??1CDPMng@@UAE@XZ	; CDPMng::~CDPMng
  00042	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00046	5e		 pop	 esi
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163514:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDPMng@@UAE@XZ	; CDPMng::~CDPMng
__ehhandler$??1CDPConsoleSrvr@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163517
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CDPConsoleSrvr@@UAE@XZ ENDP				; CDPConsoleSrvr::~CDPConsoleSrvr
PUBLIC	?OnAddConnection@CDPConsoleSrvr@@AAEXK@Z	; CDPConsoleSrvr::OnAddConnection
; Function compile flags: /Ogty
;	COMDAT ?OnAddConnection@CDPConsoleSrvr@@AAEXK@Z
_TEXT	SEGMENT
_dpid$ = 8						; size = 4
?OnAddConnection@CDPConsoleSrvr@@AAEXK@Z PROC NEAR	; CDPConsoleSrvr::OnAddConnection, COMDAT
; _this$ = ecx

; 53   : 	SendOverview( dpid );

  00000	e9 00 00 00 00	 jmp	 ?SendOverview@CDPConsoleSrvr@@QAEXK@Z ; CDPConsoleSrvr::SendOverview
?OnAddConnection@CDPConsoleSrvr@@AAEXK@Z ENDP		; CDPConsoleSrvr::OnAddConnection
_TEXT	ENDS
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Incsize
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T163660 DD	0ffffffffH
	DD	FLAT:$L163530
$T163657 DD	019930520H
	DD	01H
	DD	FLAT:$T163660
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
_DATA	ENDS
;	COMDAT ?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T163529 = -80						; size = 28
$T163528 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Incsize, COMDAT
; _this$ = ecx

; 956  : 		{	// alter element count, with checking

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list

; 957  : 		if (max_size() - _Mysize < _Count)

  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Count$[esp-4]
  0000a	6a ff		 push	 -1
  0000c	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z
  00011	50		 push	 eax
  00012	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00019	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001c	83 ec 44	 sub	 esp, 68			; 00000044H
  0001f	56		 push	 esi
  00020	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
  00025	2b f0		 sub	 esi, eax
  00027	3b f2		 cmp	 esi, edx
  00029	5e		 pop	 esi
  0002a	73 51		 jae	 SHORT $L159298

; 958  : 			_THROW(length_error, "list<T> too long");

  0002c	6a 10		 push	 16			; 00000010H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00033	8d 4c 24 08	 lea	 ecx, DWORD PTR $T163529[esp+88]
  00037	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T163529[esp+112], 15 ; 0000000fH
  0003f	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T163529[esp+108], 0
  00047	c6 44 24 0c 00	 mov	 BYTE PTR $T163529[esp+92], 0
  0004c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00051	8d 04 24	 lea	 eax, DWORD PTR $T163529[esp+80]
  00054	50		 push	 eax
  00055	8d 4c 24 20	 lea	 ecx, DWORD PTR $T163528[esp+84]
  00059	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  00061	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00066	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  0006b	8d 4c 24 20	 lea	 ecx, DWORD PTR $T163528[esp+84]
  0006f	51		 push	 ecx
  00070	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T163528[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00078	e8 00 00 00 00	 call	 __CxxThrowException@8
$L163661:
$L159298:

; 959  : 		_Mysize += _Count;

  0007d	03 c2		 add	 eax, edx
  0007f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 960  : 		}

  00082	8b 4c 24 44	 mov	 ecx, DWORD PTR __$EHRec$[esp+80]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0008d	83 c4 50	 add	 esp, 80			; 00000050H
  00090	c2 04 00	 ret	 4
$L163659:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163530:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T163529[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163657
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Incsize
;	COMDAT xdata$x
xdata$x	SEGMENT
$T163766 DD	0ffffffffH
	DD	FLAT:$L163667
$T163764 DD	019930520H
	DD	01H
	DD	FLAT:$T163766
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163667:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163764
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Xlen@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IBEXXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Xlen
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T163892 DD	0ffffffffH
	DD	FLAT:$L163778
$T163889 DD	019930520H
	DD	01H
	DD	FLAT:$T163892
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
CONST	ENDS
;	COMDAT ?_Xlen@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T163777 = -80						; size = 28
$T163776 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IBEXXZ PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Xlen, COMDAT
; _this$ = ecx

; 897  : 		{	// report length error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 898  : 		_THROW(length_error, "deque<T> too long");

  00018	6a 11		 push	 17			; 00000011H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T163777[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T163777[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T163777[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T163777[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T163777[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T163776[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T163776[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T163776[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L163893:
$L163891:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163778:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T163777[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163889
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IBEXXZ ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Xlen
; Function compile flags: /Ogty
;	COMDAT ??_GCDPConsoleSrvr@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDPConsoleSrvr@@UAEPAXI@Z PROC NEAR			; CDPConsoleSrvr::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CDPConsoleSrvr@@UAE@XZ ; CDPConsoleSrvr::~CDPConsoleSrvr
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L163899
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L163899:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCDPConsoleSrvr@@UAEPAXI@Z ENDP			; CDPConsoleSrvr::`scalar deleting destructor'
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.cpp
_TEXT	ENDS
;	COMDAT ?SysMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_dwMsgSize$ = 12					; size = 4
_dpid$ = 16						; size = 4
?SysMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z PROC NEAR ; CDPConsoleSrvr::SysMessageHandler, COMDAT
; _this$ = ecx

; 19   : 	switch( lpMsg->dwType )

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _lpMsg$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	83 e8 03	 sub	 eax, 3
  00009	75 09		 jne	 SHORT $L163905

; 20   : 	{
; 21   : 		case DPSYS_CREATEPLAYERORGROUP:
; 22   : 			{
; 23   : 				LPDPMSG_CREATEPLAYERORGROUP lpCreatePlayer	= (LPDPMSG_CREATEPLAYERORGROUP)lpMsg;
; 24   : 				OnAddConnection( lpCreatePlayer->dpId );

  0000b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?SendOverview@CDPConsoleSrvr@@QAEXK@Z ; CDPConsoleSrvr::SendOverview
$L163905:

; 25   : 				break;
; 26   : 			}
; 27   : 		case DPSYS_DESTROYPLAYERORGROUP:
; 28   : 			{
; 29   : 				LPDPMSG_DESTROYPLAYERORGROUP lpDestroyPlayer	= (LPDPMSG_DESTROYPLAYERORGROUP)lpMsg;
; 30   : 				OnRemoveConnection( lpDestroyPlayer->dpId );
; 31   : 				break;
; 32   : 			}
; 33   : 	}
; 34   : }

  00014	c2 0c 00	 ret	 12			; 0000000cH
?SysMessageHandler@CDPConsoleSrvr@@UAEXPAUDPMSG_GENERIC@@KK@Z ENDP ; CDPConsoleSrvr::SysMessageHandler
_TEXT	ENDS
PUBLIC	?_Insert@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXViterator@12@ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Insert
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Insert@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXViterator@12@ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXViterator@12@ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Insert, COMDAT
; _this$ = ecx

; 522  : 		_Nodeptr _Pnode = _Where._Mynode();
; 523  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	8b 5c 24 08	 mov	 ebx, DWORD PTR __Where$[esp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	8b cf		 mov	 ecx, edi
  00015	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode

; 524  : 		_Incsize(1);

  0001a	6a 01		 push	 1
  0001c	8b cf		 mov	 ecx, edi
  0001e	8b f0		 mov	 esi, eax
  00020	e8 00 00 00 00	 call	 ?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Incsize

; 525  : 		_Prevnode(_Pnode) = _Newnode;

  00025	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 526  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  00028	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002b	5f		 pop	 edi
  0002c	89 32		 mov	 DWORD PTR [edx], esi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 527  : 		}

  00030	c2 08 00	 ret	 8
?_Insert@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXViterator@12@ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Insert
_TEXT	ENDS
PUBLIC	?_Growmap@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Growmap
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?_Growmap@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newmap$ = -12						; size = 4
$T163996 = -8						; size = 4
tv356 = -4						; size = 4
tv349 = -4						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Growmap, COMDAT
; _this$ = ecx

; 907  : 		{	// grow map by _Count pointers

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 908  : 		if (max_size() / _DEQUESIZ - _Mapsize < _Count)

  00006	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00009	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+16]
  00013	2b c8		 sub	 ecx, eax
  00015	3b cf		 cmp	 ecx, edi
  00017	73 07		 jae	 SHORT $L159228

; 909  : 			_Xlen();	// result too long

  00019	8b cb		 mov	 ecx, ebx
  0001b	e8 00 00 00 00	 call	 ?_Xlen@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IBEXXZ ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Xlen
$L164180:
$L159228:

; 910  : 
; 911  : 		size_type _Inc = _Mapsize / 2;	// try to grow by 50%

  00020	8b c8		 mov	 ecx, eax
  00022	d1 e9		 shr	 ecx, 1

; 912  : 		if (_Inc < _DEQUEMAPSIZ)

  00024	83 f9 08	 cmp	 ecx, 8
  00027	73 05		 jae	 SHORT $L159230

; 913  : 			_Inc = _DEQUEMAPSIZ;

  00029	b9 08 00 00 00	 mov	 ecx, 8
$L159230:

; 914  : 		if (_Count < _Inc && _Mapsize <= max_size() / _DEQUESIZ - _Inc)

  0002e	3b f9		 cmp	 edi, ecx
  00030	73 11		 jae	 SHORT $L159231
  00032	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  00037	2b d1		 sub	 edx, ecx
  00039	3b c2		 cmp	 eax, edx
  0003b	77 06		 ja	 SHORT $L159231

; 915  : 			_Count = _Inc;

  0003d	89 4c 24 18	 mov	 DWORD PTR __Count$[esp+16], ecx
  00041	8b f9		 mov	 edi, ecx
$L159231:
  00043	55		 push	 ebp

; 916  : 		size_type _Myboff = _Myoff / _DEQUESIZ;

  00044	8b 6b 0c	 mov	 ebp, DWORD PTR [ebx+12]

; 917  : 		_Mapptr _Newmap = this->_Almap.allocate(_Mapsize + _Count);

  00047	03 c7		 add	 eax, edi
  00049	c1 e0 02	 shl	 eax, 2
  0004c	56		 push	 esi
  0004d	50		 push	 eax
  0004e	c1 ed 02	 shr	 ebp, 2
  00051	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 918  : 		_Mapptr _Myptr = _Newmap + _Myboff;
; 919  : 
; 920  : 		_Myptr = _Uninitialized_copy(_Map + _Myboff,
; 921  : 			_Map + _Mapsize, _Myptr, this->_Almap);	// copy initial to end

  00056	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00059	8b d0		 mov	 edx, eax
  0005b	8d 34 ad 00 00
	00 00		 lea	 esi, DWORD PTR [ebp*4]
  00062	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00065	89 44 24 18	 mov	 DWORD PTR $T163996[esp+32], eax
  00069	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0006c	c1 e0 02	 shl	 eax, 2
  0006f	2b 44 24 18	 sub	 eax, DWORD PTR $T163996[esp+32]
  00073	89 54 24 14	 mov	 DWORD PTR __Newmap$[esp+32], edx
  00077	03 c1		 add	 eax, ecx
  00079	8b 4c 24 18	 mov	 ecx, DWORD PTR $T163996[esp+32]
  0007d	c1 f8 02	 sar	 eax, 2
  00080	c1 e0 02	 shl	 eax, 2
  00083	50		 push	 eax
  00084	51		 push	 ecx
  00085	03 d6		 add	 edx, esi
  00087	52		 push	 edx
  00088	89 44 24 28	 mov	 DWORD PTR tv349[esp+44], eax
  0008c	e8 00 00 00 00	 call	 _memmove
  00091	8b 54 24 28	 mov	 edx, DWORD PTR tv349[esp+44]

; 922  : 		if (_Myboff <= _Count)
; 923  : 			{	// increment greater than offset of initial block
; 924  : 			_Myptr = _Uninitialized_copy(_Map,
; 925  : 				_Map + _Myboff, _Myptr, this->_Almap);	// copy rest of old

  00095	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00098	83 c4 10	 add	 esp, 16			; 00000010H
  0009b	03 c2		 add	 eax, edx
  0009d	3b ef		 cmp	 ebp, edi
  0009f	77 3f		 ja	 SHORT $L159244
  000a1	c1 fe 02	 sar	 esi, 2
  000a4	8b d6		 mov	 edx, esi
  000a6	c1 e2 02	 shl	 edx, 2
  000a9	52		 push	 edx
  000aa	51		 push	 ecx

; 926  : 			_Uninitialized_fill_n(_Myptr, _Count - _Myboff,
; 927  : 				(_Tptr)0, this->_Almap);	// clear suffix of new

  000ab	8b f7		 mov	 esi, edi
  000ad	50		 push	 eax
  000ae	2b f5		 sub	 esi, ebp
  000b0	89 54 24 24	 mov	 DWORD PTR tv356[esp+40], edx
  000b4	e8 00 00 00 00	 call	 _memmove
  000b9	8b 4c 24 24	 mov	 ecx, DWORD PTR tv356[esp+40]
  000bd	8b d0		 mov	 edx, eax
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c2	03 d1		 add	 edx, ecx
  000c4	85 f6		 test	 esi, esi
  000c6	76 0c		 jbe	 SHORT $L164048
  000c8	8b ce		 mov	 ecx, esi
  000ca	33 c0		 xor	 eax, eax
  000cc	8b fa		 mov	 edi, edx
  000ce	f3 ab		 rep stosd
  000d0	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+24]
$L164048:

; 928  : 			_Uninitialized_fill_n(_Newmap, _Myboff,
; 929  : 				(_Tptr)0, this->_Almap);	// clear prefix of new

  000d4	85 ed		 test	 ebp, ebp
  000d6	76 52		 jbe	 SHORT $L164177
  000d8	8b 7c 24 10	 mov	 edi, DWORD PTR __Newmap$[esp+28]
  000dc	8b cd		 mov	 ecx, ebp

; 930  : 			}
; 931  : 		else

  000de	eb 42		 jmp	 SHORT $L164179
$L159244:

; 932  : 			{	// increment not greater than offset of initial block
; 933  : 			_Uninitialized_copy(_Map,
; 934  : 				_Map + _Count, _Myptr, this->_Almap);	// copy more old

  000e0	8d 2c bd 00 00
	00 00		 lea	 ebp, DWORD PTR [edi*4]
  000e7	8b d5		 mov	 edx, ebp
  000e9	c1 fa 02	 sar	 edx, 2
  000ec	c1 e2 02	 shl	 edx, 2
  000ef	52		 push	 edx
  000f0	51		 push	 ecx
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _memmove

; 935  : 			_Myptr = _Uninitialized_copy(_Map + _Count,
; 936  : 				_Map + _Myboff, _Newmap, this->_Almap);	// copy rest of old

  000f7	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000fa	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  000fd	2b f1		 sub	 esi, ecx
  000ff	03 f0		 add	 esi, eax
  00101	8b 44 24 1c	 mov	 eax, DWORD PTR __Newmap$[esp+40]
  00105	c1 fe 02	 sar	 esi, 2
  00108	c1 e6 02	 shl	 esi, 2
  0010b	56		 push	 esi
  0010c	51		 push	 ecx
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memmove
  00113	8b d0		 mov	 edx, eax
  00115	83 c4 18	 add	 esp, 24			; 00000018H
  00118	03 d6		 add	 edx, esi

; 937  : 			_Uninitialized_fill_n(_Myptr, _Count,
; 938  : 				(_Tptr)0, this->_Almap);	// clear rest to initial block

  0011a	85 ff		 test	 edi, edi
  0011c	76 0c		 jbe	 SHORT $L164177
  0011e	8b cf		 mov	 ecx, edi
  00120	8b fa		 mov	 edi, edx
$L164179:
  00122	33 c0		 xor	 eax, eax
  00124	f3 ab		 rep stosd
  00126	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+24]
$L164177:

; 939  : 			}
; 940  : 
; 941  : 		_Destroy_range(_Map + _Myboff, _Map + _Mapsize, this->_Almap);
; 942  : 		if (_Map)

  0012a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0012d	85 c0		 test	 eax, eax
  0012f	5e		 pop	 esi
  00130	5d		 pop	 ebp
  00131	74 09		 je	 SHORT $L164167

; 943  : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for old

  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00139	83 c4 04	 add	 esp, 4
$L164167:

; 944  : 
; 945  : 		_Map = _Newmap;	// point at new
; 946  : 		_Mapsize += _Count;

  0013c	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0013f	8b 4c 24 08	 mov	 ecx, DWORD PTR __Newmap$[esp+20]
  00143	03 c7		 add	 eax, edi
  00145	5f		 pop	 edi
  00146	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  00149	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0014c	5b		 pop	 ebx

; 947  : 		}

  0014d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00150	c2 04 00	 ret	 4
$L164178:
?_Growmap@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Growmap
_TEXT	ENDS
PUBLIC	?push_back@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::push_back
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?push_back@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::push_back, COMDAT
; _this$ = ecx

; 481  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 482  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::push_back
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?push_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::push_back, COMDAT
; _this$ = ecx

; 583  : 		{	// insert element at end

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 584  : 		if ((_Myoff + _Mysize) % _DEQUESIZ == 0
; 585  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00009	03 c8		 add	 ecx, eax
  0000b	f6 c1 03	 test	 cl, 3
  0000e	75 16		 jne	 SHORT $L159217
  00010	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00013	83 c0 04	 add	 eax, 4
  00016	c1 e8 02	 shr	 eax, 2
  00019	3b c8		 cmp	 ecx, eax
  0001b	77 09		 ja	 SHORT $L159217

; 586  : 			_Growmap(1);

  0001d	6a 01		 push	 1
  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Growmap
$L159217:

; 587  : 		size_type _Newoff = _Myoff + _Mysize;
; 588  : 		size_type _Block = _Newoff / _DEQUESIZ;
; 589  : 		if (_Mapsize <= _Block)

  00026	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00029	53		 push	 ebx
  0002a	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0002d	57		 push	 edi
  0002e	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00031	03 fb		 add	 edi, ebx
  00033	8b df		 mov	 ebx, edi
  00035	c1 eb 02	 shr	 ebx, 2
  00038	3b c3		 cmp	 eax, ebx
  0003a	77 02		 ja	 SHORT $L159220

; 590  : 			_Block -= _Mapsize;

  0003c	2b d8		 sub	 ebx, eax
$L159220:

; 591  : 		if (_Map[_Block] == 0)

  0003e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00041	83 3c 9a 00	 cmp	 DWORD PTR [edx+ebx*4], 0
  00045	75 10		 jne	 SHORT $L159221

; 592  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

  00047	6a 10		 push	 16			; 00000010H
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	83 c4 04	 add	 esp, 4
  00054	89 04 99	 mov	 DWORD PTR [ecx+ebx*4], eax
$L159221:

; 593  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

  00057	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0005a	8b 04 9a	 mov	 eax, DWORD PTR [edx+ebx*4]
  0005d	83 e7 03	 and	 edi, 3
  00060	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  00063	85 c0		 test	 eax, eax
  00065	5f		 pop	 edi
  00066	5b		 pop	 ebx
  00067	74 08		 je	 SHORT $L164269
  00069	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp]
  0006d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006f	89 10		 mov	 DWORD PTR [eax], edx
$L164269:

; 594  : 		++_Mysize;

  00071	ff 46 10	 inc	 DWORD PTR [esi+16]
  00074	5e		 pop	 esi

; 595  : 		}

  00075	c2 04 00	 ret	 4
?push_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::push_back
_TEXT	ENDS
PUBLIC	?push@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::push
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stack
;	COMDAT ?push@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z PROC NEAR ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::push, COMDAT
; _this$ = ecx

; 53   : 		c.push_back(_Val);

  00000	e9 00 00 00 00	 jmp	 ?push_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::push_back
?push@?$stack@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ENDP ; std::stack<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> > >::push
_TEXT	ENDS
PUBLIC	?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Grow
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:NEAR			; `eh vector constructor iterator'
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
;	COMDAT xdata$x
xdata$x	SEGMENT
$T164365 DD	0ffffffffH
	DD	FLAT:$L164282
$T164361 DD	019930520H
	DD	01H
	DD	FLAT:$T164365
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mymap.h
xdata$x	ENDS
;	COMDAT ?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z
_TEXT	SEGMENT
_pBlock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T164281 = 8						; size = 4
$T164278 = 8						; size = 4
$T164277 = 8						; size = 4
_nGrowSize$ = 8						; size = 4
?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z PROC NEAR ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Grow, COMDAT
; _this$ = ecx

; 234  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	53		 push	 ebx
  00019	56		 push	 esi

; 235  : 	ASSERT( nGrowSize > 0 );
; 236  : 	T* pBlock	= new T[nGrowSize];

  0001a	8b 74 24 20	 mov	 esi, DWORD PTR _nGrowSize$[esp+24]
  0001e	57		 push	 edi
  0001f	8b f9		 mov	 edi, ecx
  00021	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00024	8d 0c c5 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*8+4]
  0002b	51		 push	 ecx
  0002c	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00035	83 c4 04	 add	 esp, 4
  00038	89 44 24 24	 mov	 DWORD PTR $T164278[esp+28], eax
  0003c	33 c9		 xor	 ecx, ecx
  0003e	3b c1		 cmp	 eax, ecx
  00040	89 4c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ecx
  00044	74 1e		 je	 SHORT $L164279
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??1?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??0?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
  00050	56		 push	 esi
  00051	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00054	6a 18		 push	 24			; 00000018H
  00056	53		 push	 ebx
  00057	89 30		 mov	 DWORD PTR [eax], esi
  00059	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0005e	89 5c 24 24	 mov	 DWORD PTR $T164277[esp+28], ebx
  00062	eb 04		 jmp	 SHORT $L164280
$L164279:
  00064	89 4c 24 24	 mov	 DWORD PTR $T164277[esp+28], ecx
$L164280:

; 237  : 	m_listBlock.push_back( pBlock );

  00068	8b 5f 1c	 mov	 ebx, DWORD PTR [edi+28]
  0006b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0006e	8b 54 24 24	 mov	 edx, DWORD PTR $T164277[esp+28]
  00072	55		 push	 ebp
  00073	83 c7 18	 add	 edi, 24			; 00000018H
  00076	8d 44 24 10	 lea	 eax, DWORD PTR _pBlock$[esp+36]
  0007a	50		 push	 eax
  0007b	51		 push	 ecx
  0007c	53		 push	 ebx
  0007d	8b cf		 mov	 ecx, edi
  0007f	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+56], -1
  00087	89 54 24 1c	 mov	 DWORD PTR _pBlock$[esp+48], edx
  0008b	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@2@PAU342@0ABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Buynode
  00090	6a 01		 push	 1
  00092	8b cf		 mov	 ecx, edi
  00094	8b e8		 mov	 ebp, eax
  00096	e8 00 00 00 00	 call	 ?_Incsize@?$list@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@IAEXI@Z ; std::list<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::_Incsize

; 238  : 
; 239  : 	INIT_LOOP(5000);
; 240  : 	for( size_t i = 0; i < nGrowSize; i++ )

  0009b	85 f6		 test	 esi, esi
  0009d	89 6b 04	 mov	 DWORD PTR [ebx+4], ebp
  000a0	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  000a3	89 2a		 mov	 DWORD PTR [edx], ebp
  000a5	5d		 pop	 ebp
  000a6	76 21		 jbe	 SHORT $L159194
  000a8	8b 5c 24 10	 mov	 ebx, DWORD PTR _this$[esp+32]
  000ac	8b 7c 24 24	 mov	 edi, DWORD PTR $T164277[esp+28]
  000b0	83 c3 04	 add	 ebx, 4
$L159192:

; 241  : 	{
; 242  : 		VERIFY_LOOP( __FILE__, __LINE__ );
; 243  : 		m_stackData.push( &pBlock[i] );

  000b3	8d 44 24 24	 lea	 eax, DWORD PTR $T164281[esp+28]
  000b7	50		 push	 eax
  000b8	8b cb		 mov	 ecx, ebx
  000ba	89 7c 24 28	 mov	 DWORD PTR $T164281[esp+32], edi
  000be	e8 00 00 00 00	 call	 ?push_back@?$deque@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@V?$allocator@PAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@std@@@std@@QAEXABQAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@Z ; std::deque<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *,std::allocator<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> *> >::push_back
  000c3	83 c7 18	 add	 edi, 24			; 00000018H
  000c6	4e		 dec	 esi
  000c7	75 ea		 jne	 SHORT $L159192
$L159194:

; 244  : 	}
; 245  : }

  000c9	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d7	83 c4 14	 add	 esp, 20			; 00000014H
  000da	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L164282:
  00000	8b 45 04	 mov	 eax, DWORD PTR $T164278[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T164361
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z ENDP ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Grow
PUBLIC	?SetSize@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXII@Z ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::SetSize
; Function compile flags: /Ogty
;	COMDAT ?SetSize@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXII@Z
_TEXT	SEGMENT
_nInitialSize$ = 8					; size = 4
_nGrowSize$ = 12					; size = 4
?SetSize@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXII@Z PROC NEAR ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::SetSize, COMDAT
; _this$ = ecx

; 194  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 195  : 	ASSERT( nInitialSize );
; 196  : 	ASSERT( nGrowSize );
; 197  : 
; 198  : 	Clear();

  00003	e8 00 00 00 00	 call	 ?Clear@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXXZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Clear

; 199  : 
; 200  : 	Grow( m_nInitialSize = nInitialSize );

  00008	8b 44 24 08	 mov	 eax, DWORD PTR _nInitialSize$[esp]
  0000c	50		 push	 eax
  0000d	8b ce		 mov	 ecx, esi
  0000f	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00012	e8 00 00 00 00	 call	 ?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Grow

; 201  : 	m_nGrowSize		= nGrowSize;

  00017	8b 44 24 0c	 mov	 eax, DWORD PTR _nGrowSize$[esp]
  0001b	89 46 24	 mov	 DWORD PTR [esi+36], eax
  0001e	5e		 pop	 esi

; 202  : }

  0001f	c2 08 00	 ret	 8
?SetSize@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXII@Z ENDP ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::SetSize
_TEXT	ENDS
PUBLIC	?Pop@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Pop
; Function compile flags: /Ogty
;	COMDAT ?Pop@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ
_TEXT	SEGMENT
?Pop@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ PROC NEAR ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Pop, COMDAT
; _this$ = ecx

; 205  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 206  : 	ASSERT( m_nGrowSize > 0 );
; 207  : 
; 208  : 	if( m_stackData.empty() )

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	85 c0		 test	 eax, eax
  00008	57		 push	 edi
  00009	75 09		 jne	 SHORT $L158771

; 209  : 		Grow( m_nGrowSize );

  0000b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Grow
$L158771:

; 210  : 
; 211  : 	T* lpMem	= m_stackData.top();

  00014	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00017	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0001a	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  0001d	48		 dec	 eax
  0001e	8b d0		 mov	 edx, eax
  00020	c1 e8 02	 shr	 eax, 2
  00023	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0002a	8b f1		 mov	 esi, ecx
  0002c	2b d7		 sub	 edx, edi
  0002e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00031	3b f8		 cmp	 edi, eax
  00033	77 02		 ja	 SHORT $L164480
  00035	2b c7		 sub	 eax, edi
$L164480:
  00037	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0003a	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  0003d	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 212  : 	m_stackData.pop();

  00040	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00043	85 d2		 test	 edx, edx
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	74 0d		 je	 SHORT $L164504
  00049	4a		 dec	 edx
  0004a	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004d	75 07		 jne	 SHORT $L164504
  0004f	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L164504:

; 213  : 
; 214  : 	return lpMem;
; 215  : }

  00056	c3		 ret	 0
?Pop@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEPAV?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@XZ ENDP ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Pop
_TEXT	ENDS
PUBLIC	?SetSize@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXIII@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::SetSize
;	COMDAT xdata$x
xdata$x	SEGMENT
$T164551 DD	0ffffffffH
	DD	FLAT:$L164526
$T164541 DD	019930520H
	DD	01H
	DD	FLAT:$T164551
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SetSize@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXIII@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T164523 = 8						; size = 4
_nHashSize$ = 8						; size = 4
_nInitialSize$ = 12					; size = 4
_nGrowSize$ = 16					; size = 4
?SetSize@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXIII@Z PROC NEAR ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::SetSize, COMDAT
; _this$ = ecx

; 306  : {

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?SetSize@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXIII@Z
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	53		 push	 ebx
  00016	55		 push	 ebp
  00017	8b d9		 mov	 ebx, ecx

; 307  : 	SAFE_DELETE_ARRAY( m_pBuckets );

  00019	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001c	33 ed		 xor	 ebp, ebp
  0001e	3b cd		 cmp	 ecx, ebp
  00020	56		 push	 esi
  00021	57		 push	 edi
  00022	74 1e		 je	 SHORT $L157908
  00024	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00027	3b d5		 cmp	 edx, ebp
  00029	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0002c	74 08		 je	 SHORT $L164517
  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00030	6a 03		 push	 3
  00032	ff 10		 call	 DWORD PTR [eax]
  00034	eb 09		 jmp	 SHORT $L164518
$L164517:
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003c	83 c4 04	 add	 esp, 4
$L164518:
  0003f	89 6b 04	 mov	 DWORD PTR [ebx+4], ebp
$L157908:

; 308  : 	m_pFirstActive	= NULL;
; 309  : 
; 310  : 	INIT_LOOP(10000);
; 311  : 	for( int i = (int)nHashSize; ; i++ )

  00042	8b 74 24 20	 mov	 esi, DWORD PTR _nHashSize$[esp+24]
  00046	89 6b 34	 mov	 DWORD PTR [ebx+52], ebp
  00049	8d a4 24 00 00
	00 00		 npad	 7
$L157916:

; 312  : 	{
; 313  : 		VERIFY_LOOP( __FILE__, __LINE__ );
; 314  : 		if( IsPrime( i ) )

  00050	b9 02 00 00 00	 mov	 ecx, 2
  00055	3b f1		 cmp	 esi, ecx
  00057	76 16		 jbe	 SHORT $L164549
  00059	8d a4 24 00 00
	00 00		 npad	 7
$L164531:
  00060	33 d2		 xor	 edx, edx
  00062	8b c6		 mov	 eax, esi
  00064	f7 f1		 div	 ecx
  00066	3b d5		 cmp	 edx, ebp
  00068	74 41		 je	 SHORT $L164545
  0006a	41		 inc	 ecx
  0006b	3b c8		 cmp	 ecx, eax
  0006d	72 f1		 jb	 SHORT $L164531
$L164549:

; 315  : 			break;
; 316  : 	}
; 317  : 
; 318  : 	m_pBuckets	= new CMyBucket<T>[m_nHashSize=i];

  0006f	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00072	8d 14 cd 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*8+4]
  00079	52		 push	 edx
  0007a	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  0007d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00082	83 c4 04	 add	 esp, 4
  00085	89 44 24 20	 mov	 DWORD PTR $T164523[esp+24], eax
  00089	3b c5		 cmp	 eax, ebp
  0008b	89 6c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebp
  0008f	74 1d		 je	 SHORT $L164524
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??1?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??0?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAE@XZ ; CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
  0009b	56		 push	 esi
  0009c	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  0009f	6a 18		 push	 24			; 00000018H
  000a1	57		 push	 edi
  000a2	89 30		 mov	 DWORD PTR [eax], esi
  000a4	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  000a9	eb 05		 jmp	 SHORT $L164525
$L164545:

; 308  : 	m_pFirstActive	= NULL;
; 309  : 
; 310  : 	INIT_LOOP(10000);
; 311  : 	for( int i = (int)nHashSize; ; i++ )

  000ab	46		 inc	 esi
  000ac	eb a2		 jmp	 SHORT $L157916
$L164524:

; 315  : 			break;
; 316  : 	}
; 317  : 
; 318  : 	m_pBuckets	= new CMyBucket<T>[m_nHashSize=i];

  000ae	33 ff		 xor	 edi, edi
$L164525:

; 319  : 	m_nTotal	= 0;
; 320  : 	m_pool.SetSize( nInitialSize, nGrowSize );

  000b0	8d 73 08	 lea	 esi, DWORD PTR [ebx+8]
  000b3	8b ce		 mov	 ecx, esi
  000b5	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  000bd	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  000c0	89 6b 3c	 mov	 DWORD PTR [ebx+60], ebp
  000c3	e8 00 00 00 00	 call	 ?Clear@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAEXXZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Clear
  000c8	8b 44 24 24	 mov	 eax, DWORD PTR _nInitialSize$[esp+24]
  000cc	50		 push	 eax
  000cd	8b ce		 mov	 ecx, esi
  000cf	89 46 28	 mov	 DWORD PTR [esi+40], eax
  000d2	e8 00 00 00 00	 call	 ?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Grow
  000d7	8b 44 24 28	 mov	 eax, DWORD PTR _nGrowSize$[esp+24]

; 321  : }

  000db	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  000df	5f		 pop	 edi
  000e0	89 46 24	 mov	 DWORD PTR [esi+36], eax
  000e3	5e		 pop	 esi
  000e4	5d		 pop	 ebp
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ec	5b		 pop	 ebx
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L164526:
  00000	8b 45 04	 mov	 eax, DWORD PTR $T164523[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SetSize@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXIII@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T164541
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetSize@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXIII@Z ENDP ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::SetSize
PUBLIC	?SetAt@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXKABQ8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::SetAt
; Function compile flags: /Ogty
;	COMDAT ?SetAt@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXKABQ8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z
_TEXT	SEGMENT
_pBucketPrev$ = 8					; size = 4
_dwKey$ = 8						; size = 4
_value$ = 12						; size = 4
?SetAt@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXKABQ8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z PROC NEAR ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::SetAt, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 354  : 	ASSERT( m_nHashSize > 0 );
; 355  : 
; 356  : 	CMyBucket<T> *pBucket, *pBucketPrev;
; 357  : 	m_nTotal++;

  00004	ff 46 3c	 inc	 DWORD PTR [esi+60]

; 358  : 
; 359  : 	INIT_LOOP(1000);
; 360  : 	for( pBucket = &m_pBuckets[(int)IDHash( dwKey, m_nHashSize )]; pBucket != NULL; pBucket = pBucket->m_pNext )

  00007	8b 6c 24 0c	 mov	 ebp, DWORD PTR _dwKey$[esp+4]
  0000b	8b d5		 mov	 edx, ebp
  0000d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00010	03 d5		 add	 edx, ebp
  00012	8b cd		 mov	 ecx, ebp
  00014	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00017	03 d1		 add	 edx, ecx
  00019	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0001c	8b c5		 mov	 eax, ebp
  0001e	c1 e8 08	 shr	 eax, 8
  00021	03 c2		 add	 eax, edx
  00023	49		 dec	 ecx
  00024	23 c1		 and	 eax, ecx
  00026	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  0002f	85 c0		 test	 eax, eax
  00031	74 17		 je	 SHORT $L164756
  00033	83 c9 ff	 or	 ecx, -1
$L157955:

; 361  : 	{
; 362  : 		VERIFY_LOOP( __FILE__, __LINE__ );
; 363  : 		if( pBucket->IsEmpty() )

  00036	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00039	0f 84 92 00 00
	00		 je	 $L164754

; 368  : 			return;
; 369  : 		}
; 370  : 		pBucketPrev		= pBucket;

  0003f	89 44 24 0c	 mov	 DWORD PTR _pBucketPrev$[esp+4], eax
  00043	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00046	85 c0		 test	 eax, eax
  00048	75 ec		 jne	 SHORT $L157955
$L164756:

; 371  : 	}
; 372  : 
; 373  : //	Collision
; 374  : 	pBucket		= pBucketPrev-> m_pNext		= m_pool.Pop();

  0004a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004d	85 c0		 test	 eax, eax
  0004f	57		 push	 edi
  00050	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00053	75 0b		 jne	 SHORT $L164704
  00055	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  00058	52		 push	 edx
  00059	8b cf		 mov	 ecx, edi
  0005b	e8 00 00 00 00	 call	 ?Grow@?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@AAEXI@Z ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::Grow
$L164704:
  00060	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00063	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00066	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00069	48		 dec	 eax
  0006a	8b d0		 mov	 edx, eax
  0006c	c1 e8 02	 shr	 eax, 2
  0006f	53		 push	 ebx
  00070	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]
  00077	8b f9		 mov	 edi, ecx
  00079	2b d3		 sub	 edx, ebx
  0007b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0007e	3b d8		 cmp	 ebx, eax
  00080	77 02		 ja	 SHORT $L164735
  00082	2b c3		 sub	 eax, ebx
$L164735:
  00084	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00087	8b 04 87	 mov	 eax, DWORD PTR [edi+eax*4]
  0008a	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0008d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00090	33 ff		 xor	 edi, edi
  00092	3b d7		 cmp	 edx, edi
  00094	5b		 pop	 ebx
  00095	74 0b		 je	 SHORT $L164744
  00097	4a		 dec	 edx
  00098	3b d7		 cmp	 edx, edi
  0009a	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0009d	75 03		 jne	 SHORT $L164744
  0009f	89 79 0c	 mov	 DWORD PTR [ecx+12], edi
$L164744:
  000a2	8b 4c 24 10	 mov	 ecx, DWORD PTR _pBucketPrev$[esp+8]

; 375  : 	pBucket->m_dwKey	= dwKey;
; 376  : 	pBucket->m_value	= value;

  000a6	8b 54 24 14	 mov	 edx, DWORD PTR _value$[esp+8]
  000aa	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  000ad	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  000b0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000b2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 377  : 	AddItToActiveList( pBucket );

  000b5	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  000b8	3b cf		 cmp	 ecx, edi
  000ba	74 03		 je	 SHORT $L164751
  000bc	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$L164751:
  000bf	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000c2	89 78 10	 mov	 DWORD PTR [eax+16], edi
  000c5	5f		 pop	 edi
  000c6	89 50 14	 mov	 DWORD PTR [eax+20], edx
  000c9	89 46 34	 mov	 DWORD PTR [esi+52], eax
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp

; 378  : }

  000ce	c2 08 00	 ret	 8
$L164754:

; 364  : 		{
; 365  : 			pBucket->m_dwKey	= dwKey;
; 366  : 			pBucket->m_value	= value;

  000d1	8b 4c 24 10	 mov	 ecx, DWORD PTR _value$[esp+4]
  000d5	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  000d8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000da	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 367  : 			AddItToActiveList( pBucket );

  000dd	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  000e0	85 c9		 test	 ecx, ecx
  000e2	74 03		 je	 SHORT $L164565
  000e4	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$L164565:
  000e7	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  000ea	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  000ed	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 377  : 	AddItToActiveList( pBucket );

  000f4	89 46 34	 mov	 DWORD PTR [esi+52], eax
  000f7	5e		 pop	 esi
  000f8	5d		 pop	 ebp

; 378  : }

  000f9	c2 08 00	 ret	 8
?SetAt@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXKABQ8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z ENDP ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::SetAt
_TEXT	ENDS
PUBLIC	??0CDPConsoleSrvr@@QAE@PAVCMonitorDlg@@@Z	; CDPConsoleSrvr::CDPConsoleSrvr
EXTRN	??0CDPMng@@QAE@XZ:NEAR				; CDPMng::CDPMng
;	COMDAT xdata$x
; File c:\offi src_real\offi src!\_network\mcl\include\cmclcritsec.h
xdata$x	SEGMENT
$T164778 DD	0ffffffffH
	DD	FLAT:$L164761
	DD	00H
	DD	FLAT:$L164762
$T164776 DD	019930520H
	DD	02H
	DD	FLAT:$T164778
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\dpconsolesrvr.cpp
xdata$x	ENDS
;	COMDAT ??0CDPConsoleSrvr@@QAE@PAVCMonitorDlg@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pfn$ = 8						; size = 4
_pMonitorDlg$ = 8					; size = 4
??0CDPConsoleSrvr@@QAE@PAVCMonitorDlg@@@Z PROC NEAR	; CDPConsoleSrvr::CDPConsoleSrvr, COMDAT
; _this$ = ecx

; 7    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CDPConsoleSrvr@@QAE@PAVCMonitorDlg@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  0001f	e8 00 00 00 00	 call	 ??0CDPMng@@QAE@XZ	; CDPMng::CDPMng
  00024	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  00027	33 db		 xor	 ebx, ebx
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET FLAT:??_7CDPConsoleSrvr@@6B@
  0002f	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00032	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@6B@
  0003c	e8 00 00 00 00	 call	 ??0?$CMyPool@V?$CMyBucket@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@@@QAE@XZ ; CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >::CMyPool<CMyBucket<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)> >
  00041	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  00044	50		 push	 eax
  00045	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], OFFSET FLAT:??_7CMclCritSec@@6B@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
  00052	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00055	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  00058	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  0005b	89 5e 34	 mov	 DWORD PTR [esi+52], ebx

; 8    : 	m_pMonitorDlg	= pMonitorDlg;

  0005e	8b 4c 24 20	 mov	 ecx, DWORD PTR _pMonitorDlg$[esp+24]

; 9    : 	BEGIN_MSG;

  00062	6a 40		 push	 64			; 00000040H
  00064	68 80 00 00 00	 push	 128			; 00000080H
  00069	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0006c	6a 40		 push	 64			; 00000040H
  0006e	8b ce		 mov	 ecx, esi
  00070	c6 44 24 24 01	 mov	 BYTE PTR __$EHRec$[esp+48], 1
  00075	e8 00 00 00 00	 call	 ?SetSize@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXIII@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::SetSize

; 10   : 	ON_MSG( PACKETTYPE_CONSOLE_COMMAND, OnCommand );

  0007a	8d 54 24 20	 lea	 edx, DWORD PTR _pfn$[esp+24]
  0007e	52		 push	 edx
  0007f	68 01 80 00 f0	 push	 -268402687		; f0008001H
  00084	8b ce		 mov	 ecx, esi
  00086	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _pfn$[esp+32], OFFSET FLAT:?OnCommand@CDPConsoleSrvr@@AAEXAAVCAr@@K@Z ; CDPConsoleSrvr::OnCommand
  0008e	e8 00 00 00 00	 call	 ?SetAt@?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@QAEXKABQ8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@Z ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::SetAt

; 11   : }

  00093	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00097	8b c7		 mov	 eax, edi
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a3	83 c4 10	 add	 esp, 16			; 00000010H
  000a6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L164761:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDPMng@@UAE@XZ	; CDPMng::~CDPMng
$L164762:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 14	 add	 ecx, 20			; 00000014H
  0000e	e9 00 00 00 00	 jmp	 ??1?$CMyMap@P8CDPConsoleSrvr@@AEXAAVCAr@@K@Z@@UAE@XZ ; CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>::~CMyMap<void (__thiscall CDPConsoleSrvr::*)(CAr &,unsigned long)>
__ehhandler$??0CDPConsoleSrvr@@QAE@PAVCMonitorDlg@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T164776
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CDPConsoleSrvr@@QAE@PAVCMonitorDlg@@@Z ENDP		; CDPConsoleSrvr::CDPConsoleSrvr
END
