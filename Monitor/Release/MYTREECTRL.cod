; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\MYTREECTRL.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0tagSrvrData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0tagENUMITEM@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMyTreeCtrl@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMyTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMyTreeCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CMyTreeCtrl@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@KPADPAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteItemData@CMyTreeCtrl@@QAEXPAU_TREEITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PostEnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_NPAUtagENUMITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PeekEnumItem@CMyTreeCtrl@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GethItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMessageMap@CMyTreeCtrl@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAPAUtagENUMITEM@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXABQAUtagENUMITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXViterator@12@ABQAUtagENUMITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_val@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagENUMITEM@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEAAPAUtagENUMITEM@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@0ABQAUtagENUMITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_ptr@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagENUMITEM@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEABQAUtagENUMITEM@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAUtagENUMITEM@@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU012@0ABQAUtagENUMITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAUtagENUMITEM@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAUtagENUMITEM@@@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAUtagENUMITEM@@@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_messageEntries@CMyTreeCtrl@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?messageMap@CMyTreeCtrl@@1UAFX_MSGMAP@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetNextSiblingItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetChildItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CTreeCtrl@@QAEHPAU_TREEITEM@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertItem@CTreeCtrl@@QAEPAU_TREEITEM@@PAUtagTVINSERTSTRUCTA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteAllItems@CTreeCtrl@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMyTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CTreeCtrl@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_messageEntries@CMyTreeCtrl@@0QBUAFX_MSGMAP_ENTRY@@B ; CMyTreeCtrl::_messageEntries
PUBLIC	?messageMap@CMyTreeCtrl@@1UAFX_MSGMAP@@B	; CMyTreeCtrl::messageMap
EXTRN	?messageMap@CTreeCtrl@@1UAFX_MSGMAP@@B:QWORD	; CTreeCtrl::messageMap
;	COMDAT ?_messageEntries@CMyTreeCtrl@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@CMyTreeCtrl@@0QBUAFX_MSGMAP_ENTRY@@B DD 00H ; CMyTreeCtrl::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?messageMap@CMyTreeCtrl@@1UAFX_MSGMAP@@B
CONST	SEGMENT
?messageMap@CMyTreeCtrl@@1UAFX_MSGMAP@@B DD FLAT:?messageMap@CTreeCtrl@@1UAFX_MSGMAP@@B ; CMyTreeCtrl::messageMap
	DD	FLAT:?_messageEntries@CMyTreeCtrl@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
PUBLIC	??0tagENUMITEM@@QAE@XZ				; tagENUMITEM::tagENUMITEM
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\mytreectrl.h
;	COMDAT ??0tagENUMITEM@@QAE@XZ
_TEXT	SEGMENT
??0tagENUMITEM@@QAE@XZ PROC NEAR			; tagENUMITEM::tagENUMITEM, COMDAT
; _this$ = ecx

; 37   : 	tagENUMITEM()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 80 00 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1024], 0
  0000c	c3		 ret	 0
??0tagENUMITEM@@QAE@XZ ENDP				; tagENUMITEM::tagENUMITEM
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?GethItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@H@Z	; CMyTreeCtrl::GethItem
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\mytreectrl.cpp
;	COMDAT ?GethItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GethItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@H@Z PROC NEAR	; CMyTreeCtrl::GethItem, COMDAT
; _this$ = ecx

; 176  : 	if( nIndex >= 0 && nIndex < (int)( m_nSizeOfahItem ) )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nIndex$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 0f		 jl	 SHORT $L148612
  00008	3b 81 50 04 00
	00		 cmp	 eax, DWORD PTR [ecx+1104]
  0000e	7d 07		 jge	 SHORT $L148612

; 177  : 		return m_ahItem[nIndex];

  00010	8b 44 81 50	 mov	 eax, DWORD PTR [ecx+eax*4+80]

; 179  : }

  00014	c2 04 00	 ret	 4
$L148612:

; 178  : 	return (HTREEITEM)NULL;

  00017	33 c0		 xor	 eax, eax

; 179  : }

  00019	c2 04 00	 ret	 4
?GethItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@H@Z ENDP	; CMyTreeCtrl::GethItem
_TEXT	ENDS
PUBLIC	?GetMessageMap@CMyTreeCtrl@@MBEPBUAFX_MSGMAP@@XZ ; CMyTreeCtrl::GetMessageMap
; Function compile flags: /Ogty
;	COMDAT ?GetMessageMap@CMyTreeCtrl@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetMessageMap@CMyTreeCtrl@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CMyTreeCtrl::GetMessageMap, COMDAT
; _this$ = ecx

; 181  : BEGIN_MESSAGE_MAP(CMyTreeCtrl, CTreeCtrl)

  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CMyTreeCtrl@@1UAFX_MSGMAP@@B ; CMyTreeCtrl::messageMap
  00005	c3		 ret	 0
?GetMessageMap@CMyTreeCtrl@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CMyTreeCtrl::GetMessageMap
_TEXT	ENDS
PUBLIC	?empty@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBE_NXZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::empty
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?empty@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBE_NXZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::empty, COMDAT
; _this$ = ecx

; 441  : 		return (_Mysize == 0);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al

; 442  : 		}

  0000a	c3		 ret	 0
?empty@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBE_NXZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::empty
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagENUMITEM@@@std@@QAE@XZ	; std::allocator<tagENUMITEM *>::allocator<tagENUMITEM *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAUtagENUMITEM@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUtagENUMITEM@@@std@@QAE@XZ PROC NEAR	; std::allocator<tagENUMITEM *>::allocator<tagENUMITEM *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAUtagENUMITEM@@@std@@QAE@XZ ENDP	; std::allocator<tagENUMITEM *>::allocator<tagENUMITEM *>
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Nextnode
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Nextnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Nextnode, COMDAT

; 108  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 109  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Prevnode
; Function compile flags: /Ogty
;	COMDAT ?_Prevnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Prevnode, COMDAT

; 113  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 114  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Prevnode
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagENUMITEM@@@std@@QAE@ABV01@@Z ; std::allocator<tagENUMITEM *>::allocator<tagENUMITEM *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAUtagENUMITEM@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUtagENUMITEM@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<tagENUMITEM *>::allocator<tagENUMITEM *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAUtagENUMITEM@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<tagENUMITEM *>::allocator<tagENUMITEM *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@3@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::_Mynode
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Mynode@const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@3@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 207  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 208  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@3@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	?_Myval@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAUtagENUMITEM@@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAUtagENUMITEM@@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAUtagENUMITEM@@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Myval, COMDAT

; 118  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 119  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@KAAAPAUtagENUMITEM@@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Myval
_TEXT	ENDS
PUBLIC	??0const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 156  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 157  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU012@0ABQAUtagENUMITEM@@@Z ; std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node::_Node
; Function compile flags: /Ogty
;	COMDAT ??0_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU012@0ABQAUtagENUMITEM@@@Z
_TEXT	SEGMENT
__Nextarg$ = 8						; size = 4
__Prevarg$ = 12						; size = 4
__Myvalarg$ = 16					; size = 4
??0_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU012@0ABQAUtagENUMITEM@@@Z PROC NEAR ; std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node::_Node, COMDAT
; _this$ = ecx

; 34   : 			{	// construct a node with value

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Prevarg$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR __Nextarg$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Myvalarg$[esp-4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 35   : 			}

  00018	c2 0c 00	 ret	 12			; 0000000cH
??0_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU012@0ABQAUtagENUMITEM@@@Z ENDP ; std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node::_Node
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUtagENUMITEM@@@std@@QBEIXZ ; std::allocator<tagENUMITEM *>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@PAUtagENUMITEM@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUtagENUMITEM@@@std@@QBEIXZ PROC NEAR ; std::allocator<tagENUMITEM *>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUtagENUMITEM@@@std@@QBEIXZ ENDP	; std::allocator<tagENUMITEM *>::max_size
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::operator++
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??Econst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 170  : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 171  : 			_Ptr = _Nextnode(_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	89 10		 mov	 DWORD PTR [eax], edx

; 172  : 			return (*this);
; 173  : 			}

  00008	c3		 ret	 0
??Econst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??$?0PAUtagENUMITEM@@@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *><tagENUMITEM *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$?0PAUtagENUMITEM@@@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0PAUtagENUMITEM@@@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z PROC NEAR ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *><tagENUMITEM *>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0PAUtagENUMITEM@@@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z ENDP ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *><tagENUMITEM *>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *,std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@ABQAU120@@Z PROC NEAR ; std::_Construct<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *,std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L149107
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L149107:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *,std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0PAUtagENUMITEM@@@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node><tagENUMITEM *>
; Function compile flags: /Ogty
;	COMDAT ??$?0PAUtagENUMITEM@@@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0PAUtagENUMITEM@@@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z PROC NEAR ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node><tagENUMITEM *>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0PAUtagENUMITEM@@@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUtagENUMITEM@@@1@@Z ENDP ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node><tagENUMITEM *>
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@XZ				; ATL::CTime::CTime
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atltime.inl
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTime@ATL@@QAE@XZ PROC NEAR				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 144  : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 145  : }

  0000f	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	??_7CTreeCtrl@@6B@				; CTreeCtrl::`vftable'
PUBLIC	??_GCTreeCtrl@@UAEPAXI@Z			; CTreeCtrl::`scalar deleting destructor'
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	??0CTreeCtrl@@QAE@XZ				; CTreeCtrl::CTreeCtrl
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:NEAR ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CWnd::SetOccDialogInfo
EXTRN	?GetMessageMap@CTreeCtrl@@MBEPBUAFX_MSGMAP@@XZ:NEAR ; CTreeCtrl::GetMessageMap
EXTRN	??_ECTreeCtrl@@UAEPAXI@Z:NEAR			; CTreeCtrl::`vector deleting destructor'
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:NEAR		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:NEAR			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:NEAR ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:NEAR		; CWnd::get_accChildCount
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:NEAR ; CWnd::get_accChild
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPAG@Z:NEAR ; CWnd::get_accName
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPAG@Z:NEAR ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPAG@Z:NEAR ; CWnd::get_accDescription
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accRole
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accState
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPAG@Z:NEAR ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPAGUtagVARIANT@@PAJ@Z:NEAR ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPAG@Z:NEAR ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPAG@Z:NEAR ; CWnd::get_accDefaultAction
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:NEAR	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:NEAR ; CWnd::accLocation
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::accNavigate
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:NEAR	; CWnd::accHitTest
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:NEAR ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PAG@Z:NEAR	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PAG@Z:NEAR	; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:NEAR ; CWnd::SetProxy
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:NEAR	; CWnd::CreateAccessibleProxy
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	??0CWnd@@QAE@XZ:NEAR				; CWnd::CWnd
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?GetRuntimeClass@CTreeCtrl@@UBEPAUCRuntimeClass@@XZ:NEAR ; CTreeCtrl::GetRuntimeClass
EXTRN	?Create@CTreeCtrl@@UAEHKABUtagRECT@@PAVCWnd@@I@Z:NEAR ; CTreeCtrl::Create
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CreateEx@CTreeCtrl@@UAEHKKABUtagRECT@@PAVCWnd@@I@Z:NEAR ; CTreeCtrl::CreateEx
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:NEAR ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnChildNotify
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:NEAR		; CWnd::CheckAutoCenter
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:NEAR ; CWnd::CreateControlContainer
;	COMDAT ??_7CTreeCtrl@@6B@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcmn.inl
CONST	SEGMENT
??_7CTreeCtrl@@6B@ DD FLAT:?GetRuntimeClass@CTreeCtrl@@UBEPAUCRuntimeClass@@XZ ; CTreeCtrl::`vftable'
	DD	FLAT:??_ECTreeCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CTreeCtrl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPAGUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PAG@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PAG@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?Create@CTreeCtrl@@UAEHKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?CreateEx@CTreeCtrl@@UAEHKKABUtagRECT@@PAVCWnd@@I@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CTreeCtrl@@QAE@XZ
_TEXT	SEGMENT
??0CTreeCtrl@@QAE@XZ PROC NEAR				; CTreeCtrl::CTreeCtrl, COMDAT
; _this$ = ecx

; 235  : 	{ }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTreeCtrl@@6B@
  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CTreeCtrl@@QAE@XZ ENDP				; CTreeCtrl::CTreeCtrl
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT
; _this$ = ecx

; 25   : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin2.inl
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC NEAR ; CWnd::DoDataExchange, COMDAT
; _this$ = ecx

; 545  : 	{ } // default does nothing

  00000	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
?BeginModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::BeginModalState, COMDAT
; _this$ = ecx

; 549  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	6a 00		 push	 0
  00005	50		 push	 eax
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  0000c	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
?EndModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::EndModalState, COMDAT
; _this$ = ecx

; 551  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	6a 01		 push	 1
  00005	50		 push	 eax
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  0000c	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
EXTRN	??1CTreeCtrl@@UAE@XZ:NEAR			; CTreeCtrl::~CTreeCtrl
; Function compile flags: /Ogty
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTreeCtrl@@UAEPAXI@Z PROC NEAR			; CTreeCtrl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CTreeCtrl@@UAE@XZ	; CTreeCtrl::~CTreeCtrl
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L149143
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L149143:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCTreeCtrl@@UAEPAXI@Z ENDP				; CTreeCtrl::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?InsertItem@CTreeCtrl@@QAEPAU_TREEITEM@@PAUtagTVINSERTSTRUCTA@@@Z ; CTreeCtrl::InsertItem
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcmn.inl
;	COMDAT ?InsertItem@CTreeCtrl@@QAEPAU_TREEITEM@@PAUtagTVINSERTSTRUCTA@@@Z
_TEXT	SEGMENT
_lpInsertStruct$ = 8					; size = 4
?InsertItem@CTreeCtrl@@QAEPAU_TREEITEM@@PAUtagTVINSERTSTRUCTA@@@Z PROC NEAR ; CTreeCtrl::InsertItem, COMDAT
; _this$ = ecx

; 237  : 	{ ASSERT(::IsWindow(m_hWnd));  return (HTREEITEM)::SendMessage(m_hWnd, TVM_INSERTITEM, 0, (LPARAM)lpInsertStruct); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _lpInsertStruct$[esp-4]
  00004	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	68 00 11 00 00	 push	 4352			; 00001100H
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00016	c2 04 00	 ret	 4
?InsertItem@CTreeCtrl@@QAEPAU_TREEITEM@@PAUtagTVINSERTSTRUCTA@@@Z ENDP ; CTreeCtrl::InsertItem
_TEXT	ENDS
PUBLIC	?DeleteAllItems@CTreeCtrl@@QAEHXZ		; CTreeCtrl::DeleteAllItems
; Function compile flags: /Ogty
;	COMDAT ?DeleteAllItems@CTreeCtrl@@QAEHXZ
_TEXT	SEGMENT
?DeleteAllItems@CTreeCtrl@@QAEHXZ PROC NEAR		; CTreeCtrl::DeleteAllItems, COMDAT
; _this$ = ecx

; 247  : 	{ ASSERT(::IsWindow(m_hWnd)); return (BOOL)::SendMessage(m_hWnd, TVM_DELETEITEM, 0, (LPARAM)TVI_ROOT); }

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	68 00 00 ff ff	 push	 -65536			; ffff0000H
  00008	6a 00		 push	 0
  0000a	68 01 11 00 00	 push	 4353			; 00001101H
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00016	c3		 ret	 0
?DeleteAllItems@CTreeCtrl@@QAEHXZ ENDP			; CTreeCtrl::DeleteAllItems
_TEXT	ENDS
PUBLIC	?GetChildItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z ; CTreeCtrl::GetChildItem
; Function compile flags: /Ogty
;	COMDAT ?GetChildItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z
_TEXT	SEGMENT
_hItem$ = 8						; size = 4
?GetChildItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z PROC NEAR ; CTreeCtrl::GetChildItem, COMDAT
; _this$ = ecx

; 266  : 	{ ASSERT(::IsWindow(m_hWnd)); return (HTREEITEM)::SendMessage(m_hWnd, TVM_GETNEXTITEM, TVGN_CHILD, (LPARAM)hItem); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hItem$[esp-4]
  00004	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00007	50		 push	 eax
  00008	6a 04		 push	 4
  0000a	68 0a 11 00 00	 push	 4362			; 0000110aH
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00016	c2 04 00	 ret	 4
?GetChildItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z ENDP	; CTreeCtrl::GetChildItem
_TEXT	ENDS
PUBLIC	?GetNextSiblingItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z ; CTreeCtrl::GetNextSiblingItem
; Function compile flags: /Ogty
;	COMDAT ?GetNextSiblingItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z
_TEXT	SEGMENT
_hItem$ = 8						; size = 4
?GetNextSiblingItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z PROC NEAR ; CTreeCtrl::GetNextSiblingItem, COMDAT
; _this$ = ecx

; 268  : 	{ ASSERT(::IsWindow(m_hWnd)); return (HTREEITEM)::SendMessage(m_hWnd, TVM_GETNEXTITEM, TVGN_NEXT, (LPARAM)hItem); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hItem$[esp-4]
  00004	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00007	50		 push	 eax
  00008	6a 01		 push	 1
  0000a	68 0a 11 00 00	 push	 4362			; 0000110aH
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00016	c2 04 00	 ret	 4
?GetNextSiblingItem@CTreeCtrl@@QBEPAU_TREEITEM@@PAU2@@Z ENDP ; CTreeCtrl::GetNextSiblingItem
_TEXT	ENDS
PUBLIC	?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ	; CTreeCtrl::GetRootItem
; Function compile flags: /Ogty
;	COMDAT ?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ
_TEXT	SEGMENT
?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ PROC NEAR	; CTreeCtrl::GetRootItem, COMDAT
; _this$ = ecx

; 286  : 	{ ASSERT(::IsWindow(m_hWnd)); return (HTREEITEM)::SendMessage(m_hWnd, TVM_GETNEXTITEM, TVGN_ROOT, 0); }

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	68 0a 11 00 00	 push	 4362			; 0000110aH
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00013	c3		 ret	 0
?GetRootItem@CTreeCtrl@@QBEPAU_TREEITEM@@XZ ENDP	; CTreeCtrl::GetRootItem
_TEXT	ENDS
PUBLIC	?SetItemData@CTreeCtrl@@QAEHPAU_TREEITEM@@K@Z	; CTreeCtrl::SetItemData
EXTRN	?SetItem@CTreeCtrl@@QAEHPAU_TREEITEM@@IPBDHHIIJ@Z:NEAR ; CTreeCtrl::SetItem
; Function compile flags: /Ogty
;	COMDAT ?SetItemData@CTreeCtrl@@QAEHPAU_TREEITEM@@K@Z
_TEXT	SEGMENT
_hItem$ = 8						; size = 4
_dwData$ = 12						; size = 4
?SetItemData@CTreeCtrl@@QAEHPAU_TREEITEM@@K@Z PROC NEAR	; CTreeCtrl::SetItemData, COMDAT
; _this$ = ecx

; 306  : 	{ ASSERT(::IsWindow(m_hWnd)); return SetItem(hItem, TVIF_PARAM, NULL, 0, 0, 0, 0, (LPARAM)dwData); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _dwData$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _hItem$[esp-4]
  00008	50		 push	 eax
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 04		 push	 4
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ?SetItem@CTreeCtrl@@QAEHPAU_TREEITEM@@IPBDHHIIJ@Z ; CTreeCtrl::SetItem
  0001b	c2 08 00	 ret	 8
?SetItemData@CTreeCtrl@@QAEHPAU_TREEITEM@@K@Z ENDP	; CTreeCtrl::SetItemData
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L149168:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L149168
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L149182
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L149182:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L149190
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L149190:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L149203
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L149204
$L149203:
  00011	8b d0		 mov	 edx, eax
$L149204:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L147799
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L149211
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L149211:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L147799
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L147799:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??0tagSrvrData@@QAE@XZ				; tagSrvrData::tagSrvrData
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\mytreectrl.h
;	COMDAT ??0tagSrvrData@@QAE@XZ
_TEXT	SEGMENT
??0tagSrvrData@@QAE@XZ PROC NEAR			; tagSrvrData::tagSrvrData, COMDAT
; _this$ = ecx

; 22   : 	tagSrvrData()

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00007	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	89 08		 mov	 DWORD PTR [eax], ecx
  00012	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00015	c3		 ret	 0
??0tagSrvrData@@QAE@XZ ENDP				; tagSrvrData::tagSrvrData
_TEXT	ENDS
PUBLIC	?AddItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@KPADPAU2@@Z ; CMyTreeCtrl::AddItem
EXTRN	?SetCheck@CTreeCtrl@@QAEHPAU_TREEITEM@@H@Z:NEAR	; CTreeCtrl::SetCheck
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\mytreectrl.cpp
;	COMDAT ?AddItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@KPADPAU2@@Z
_TEXT	SEGMENT
_t$ = -52						; size = 52
_dwId$ = 8						; size = 4
_sText$ = 12						; size = 4
_hParent$ = 16						; size = 4
?AddItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@KPADPAU2@@Z PROC NEAR ; CMyTreeCtrl::AddItem, COMDAT
; _this$ = ecx

; 29   : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx

; 30   : 	TVINSERTSTRUCT t;
; 31   : 	ZeroMemory( &t, sizeof(TVINSERTSTRUCT) );

  00009	33 c0		 xor	 eax, eax
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _t$[esp+68]
  00014	f3 ab		 rep stosd

; 32   : 	t.hParent	= hParent;

  00016	8b 44 24 50	 mov	 eax, DWORD PTR _hParent$[esp+64]

; 33   : 	t.hInsertAfter	= TVI_SORT;
; 34   : 	t.item.mask		= TVIF_STATE | TVIF_TEXT;
; 35   : 	t.item.pszText	= sText;

  0001a	8b 4c 24 4c	 mov	 ecx, DWORD PTR _sText$[esp+64]

; 36   : 	t.item.state	= TVIS_EXPANDED;
; 37   : 	t.item.stateMask	= TVIS_EXPANDED;
; 38   : 	HTREEITEM hItem	= InsertItem( &t );

  0001e	8d 54 24 10	 lea	 edx, DWORD PTR _t$[esp+68]
  00022	52		 push	 edx
  00023	89 44 24 14	 mov	 DWORD PTR _t$[esp+72], eax
  00027	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0002c	33 ed		 xor	 ebp, ebp
  0002e	55		 push	 ebp
  0002f	89 44 24 28	 mov	 DWORD PTR _t$[esp+92], eax
  00033	89 44 24 2c	 mov	 DWORD PTR _t$[esp+96], eax
  00037	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0003a	68 00 11 00 00	 push	 4352			; 00001100H
  0003f	50		 push	 eax
  00040	c7 44 24 24 03
	00 ff ff	 mov	 DWORD PTR _t$[esp+88], -65533 ; ffff0003H
  00048	c7 44 24 28 09
	00 00 00	 mov	 DWORD PTR _t$[esp+92], 9
  00050	89 4c 24 38	 mov	 DWORD PTR _t$[esp+108], ecx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 39   : 	PSrvrData pData	= new SrvrData;

  0005a	6a 18		 push	 24			; 00000018H
  0005c	8b f8		 mov	 edi, eax
  0005e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00063	83 c4 04	 add	 esp, 4
  00066	3b c5		 cmp	 eax, ebp
  00068	74 13		 je	 SHORT $L149232
  0006a	89 68 0c	 mov	 DWORD PTR [eax+12], ebp
  0006d	89 68 10	 mov	 DWORD PTR [eax+16], ebp
  00070	89 68 08	 mov	 DWORD PTR [eax+8], ebp
  00073	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  00076	89 28		 mov	 DWORD PTR [eax], ebp
  00078	89 68 14	 mov	 DWORD PTR [eax+20], ebp
  0007b	eb 02		 jmp	 SHORT $L149233
$L149232:
  0007d	33 c0		 xor	 eax, eax
$L149233:

; 40   : 	pData->dwId	= dwId;

  0007f	8b 5c 24 48	 mov	 ebx, DWORD PTR _dwId$[esp+64]

; 41   : 	SetItemData( hItem, (DWORD)pData );

  00083	50		 push	 eax
  00084	55		 push	 ebp
  00085	55		 push	 ebp
  00086	55		 push	 ebp
  00087	55		 push	 ebp
  00088	55		 push	 ebp
  00089	6a 04		 push	 4
  0008b	57		 push	 edi
  0008c	8b ce		 mov	 ecx, esi
  0008e	89 18		 mov	 DWORD PTR [eax], ebx
  00090	e8 00 00 00 00	 call	 ?SetItem@CTreeCtrl@@QAEHPAU_TREEITEM@@IPBDHHIIJ@Z ; CTreeCtrl::SetItem

; 42   : 
; 43   : 	if( dwId < MAX_ID ) {

  00095	81 fb 40 42 0f
	00		 cmp	 ebx, 1000000		; 000f4240H
  0009b	73 1a		 jae	 SHORT $L149250

; 44   : 		SetCheck( hItem, TRUE );

  0009d	6a 01		 push	 1
  0009f	57		 push	 edi
  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ?SetCheck@CTreeCtrl@@QAEHPAU_TREEITEM@@H@Z ; CTreeCtrl::SetCheck

; 45   : 		m_ahItem[m_nSizeOfahItem++]		= hItem;

  000a7	8b 8e 50 04 00
	00		 mov	 ecx, DWORD PTR [esi+1104]
  000ad	89 7c 8e 50	 mov	 DWORD PTR [esi+ecx*4+80], edi
  000b1	ff 86 50 04 00
	00		 inc	 DWORD PTR [esi+1104]
$L149250:

; 46   : 	}
; 47   : 
; 48   : 	return hItem;

  000b7	8b c7		 mov	 eax, edi
  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5d		 pop	 ebp
  000bc	5b		 pop	 ebx

; 49   : }

  000bd	83 c4 34	 add	 esp, 52			; 00000034H
  000c0	c2 0c 00	 ret	 12			; 0000000cH
?AddItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@KPADPAU2@@Z ENDP	; CMyTreeCtrl::AddItem
_TEXT	ENDS
PUBLIC	?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z ; CMyTreeCtrl::FindItem
EXTRN	?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z:NEAR ; CTreeCtrl::GetItemData
EXTRN	?ItemHasChildren@CTreeCtrl@@QBEHPAU_TREEITEM@@@Z:NEAR ; CTreeCtrl::ItemHasChildren
; Function compile flags: /Ogty
;	COMDAT ?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z
_TEXT	SEGMENT
_hItem$ = 8						; size = 4
_dwData$ = 12						; size = 4
_f$ = 16						; size = 1
?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z PROC NEAR ; CMyTreeCtrl::FindItem, COMDAT
; _this$ = ecx

; 52   : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 53   : 	if( hItem == (HTREEITEM)NULL )

  00003	8b 74 24 10	 mov	 esi, DWORD PTR _hItem$[esp+8]
  00007	85 f6		 test	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	74 77		 je	 SHORT $L149266
  0000e	8b 5c 24 1c	 mov	 ebx, DWORD PTR _f$[esp+12]
  00012	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageA@16
$L149263:

; 55   : 
; 56   : 	PSrvrData pSrvrData	= (PSrvrData)GetItemData( hItem );

  00018	56		 push	 esi
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z ; CTreeCtrl::GetItemData

; 57   : 	if( f == true ) {

  00020	80 fb 01	 cmp	 bl, 1
  00023	75 08		 jne	 SHORT $L148537

; 58   : 		if( pSrvrData->dwId == dwData )

  00025	8b 4c 24 18	 mov	 ecx, DWORD PTR _dwData$[esp+12]
  00029	39 08		 cmp	 DWORD PTR [eax], ecx

; 59   : 			return hItem;
; 60   : 	}
; 61   : 	else {

  0002b	eb 07		 jmp	 SHORT $L149272
$L148537:

; 62   : 		if( pSrvrData->dpid == dwData )

  0002d	8b 54 24 18	 mov	 edx, DWORD PTR _dwData$[esp+12]
  00031	39 50 04	 cmp	 DWORD PTR [eax+4], edx
$L149272:
  00034	74 58		 je	 SHORT $L149268

; 64   : 	}
; 65   : 
; 66   : 	if( TRUE == ItemHasChildren( hItem ) )

  00036	56		 push	 esi
  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?ItemHasChildren@CTreeCtrl@@QBEHPAU_TREEITEM@@@Z ; CTreeCtrl::ItemHasChildren
  0003e	83 f8 01	 cmp	 eax, 1
  00041	75 2e		 jne	 SHORT $L148541

; 67   : 	{
; 68   : 		HTREEITEM hFind		= FindItem( GetChildItem( hItem ), dwData, f );

  00043	8b 44 24 18	 mov	 eax, DWORD PTR _dwData$[esp+12]
  00047	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  0004a	53		 push	 ebx
  0004b	50		 push	 eax
  0004c	56		 push	 esi
  0004d	6a 04		 push	 4
  0004f	68 0a 11 00 00	 push	 4362			; 0000110aH
  00054	51		 push	 ecx
  00055	ff d5		 call	 ebp
  00057	50		 push	 eax
  00058	8b cf		 mov	 ecx, edi
  0005a	e8 00 00 00 00	 call	 ?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z ; CMyTreeCtrl::FindItem

; 69   : 		if( hFind != (HTREEITEM)NULL )

  0005f	85 c0		 test	 eax, eax
  00061	75 2d		 jne	 SHORT $L148545

; 70   : 			return hFind;
; 71   : 		return FindItem( GetNextSiblingItem( hItem ), dwData, f );

  00063	8b 57 1c	 mov	 edx, DWORD PTR [edi+28]
  00066	56		 push	 esi
  00067	6a 01		 push	 1
  00069	68 0a 11 00 00	 push	 4362			; 0000110aH
  0006e	52		 push	 edx
  0006f	eb 0c		 jmp	 SHORT $L149271
$L148541:

; 72   : 	}
; 73   : 	else
; 74   : 	{
; 75   : 		return FindItem( GetNextSiblingItem( hItem ), dwData, f );

  00071	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00074	56		 push	 esi
  00075	6a 01		 push	 1
  00077	68 0a 11 00 00	 push	 4362			; 0000110aH
  0007c	50		 push	 eax
$L149271:
  0007d	ff d5		 call	 ebp
  0007f	8b f0		 mov	 esi, eax
  00081	85 f6		 test	 esi, esi
  00083	75 93		 jne	 SHORT $L149263
$L149266:
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5d		 pop	 ebp

; 54   : 		return (HTREEITEM)NULL;

  00088	33 c0		 xor	 eax, eax
  0008a	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  0008b	c2 0c 00	 ret	 12			; 0000000cH
$L149268:

; 63   : 			return hItem;

  0008e	8b c6		 mov	 eax, esi
$L148545:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  00094	c2 0c 00	 ret	 12			; 0000000cH
?FindItem@CMyTreeCtrl@@QAEPAU_TREEITEM@@PAU2@K_N@Z ENDP	; CMyTreeCtrl::FindItem
_TEXT	ENDS
PUBLIC	?DeleteItemData@CMyTreeCtrl@@QAEXPAU_TREEITEM@@@Z ; CMyTreeCtrl::DeleteItemData
; Function compile flags: /Ogty
;	COMDAT ?DeleteItemData@CMyTreeCtrl@@QAEXPAU_TREEITEM@@@Z
_TEXT	SEGMENT
_hItem$ = 8						; size = 4
?DeleteItemData@CMyTreeCtrl@@QAEXPAU_TREEITEM@@@Z PROC NEAR ; CMyTreeCtrl::DeleteItemData, COMDAT
; _this$ = ecx

; 80   : {

  00000	56		 push	 esi

; 81   : 	if( hItem == (HTREEITEM)NULL )

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _hItem$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 77		 je	 SHORT $L149293
  0000c	53		 push	 ebx
  0000d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
$L149290:

; 82   : 		return;
; 83   : 
; 84   : 	PSrvrData pData		= (PSrvrData)GetItemData( hItem );

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z ; CTreeCtrl::GetItemData

; 85   : 	if( NULL != pData )

  0001b	85 c0		 test	 eax, eax
  0001d	74 1f		 je	 SHORT $L149278

; 86   : 	{
; 87   : 		safe_delete( pData );

  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4

; 88   : 		SetItemData( hItem, NULL );

  00028	6a 00		 push	 0
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	6a 04		 push	 4
  00036	56		 push	 esi
  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?SetItem@CTreeCtrl@@QAEHPAU_TREEITEM@@IPBDHHIIJ@Z ; CTreeCtrl::SetItem
$L149278:

; 89   : 	}
; 90   : 	
; 91   : 	if( TRUE == ItemHasChildren( hItem ) )

  0003e	56		 push	 esi
  0003f	8b cf		 mov	 ecx, edi
  00041	e8 00 00 00 00	 call	 ?ItemHasChildren@CTreeCtrl@@QBEHPAU_TREEITEM@@@Z ; CTreeCtrl::ItemHasChildren
  00046	83 f8 01	 cmp	 eax, 1

; 92   : 	{
; 93   : 		DeleteItemData( GetChildItem( hItem ) );

  00049	56		 push	 esi
  0004a	75 23		 jne	 SHORT $L148557
  0004c	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0004f	6a 04		 push	 4
  00051	68 0a 11 00 00	 push	 4362			; 0000110aH
  00056	50		 push	 eax
  00057	ff d3		 call	 ebx
  00059	50		 push	 eax
  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 ?DeleteItemData@CMyTreeCtrl@@QAEXPAU_TREEITEM@@@Z ; CMyTreeCtrl::DeleteItemData

; 94   : 		DeleteItemData( GetNextSiblingItem( hItem ) );

  00061	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00064	56		 push	 esi
  00065	6a 01		 push	 1
  00067	68 0a 11 00 00	 push	 4362			; 0000110aH
  0006c	51		 push	 ecx
  0006d	eb 0b		 jmp	 SHORT $L149295
$L148557:

; 95   : 	}
; 96   : 	else
; 97   : 	{
; 98   : 		DeleteItemData( GetNextSiblingItem( hItem ) );

  0006f	8b 57 1c	 mov	 edx, DWORD PTR [edi+28]
  00072	6a 01		 push	 1
  00074	68 0a 11 00 00	 push	 4362			; 0000110aH
  00079	52		 push	 edx
$L149295:
  0007a	ff d3		 call	 ebx
  0007c	8b f0		 mov	 esi, eax
  0007e	85 f6		 test	 esi, esi
  00080	75 91		 jne	 SHORT $L149290
  00082	5b		 pop	 ebx
$L149293:
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi

; 99   : 	}
; 100  : }

  00085	c2 04 00	 ret	 4
?DeleteItemData@CMyTreeCtrl@@QAEXPAU_TREEITEM@@@Z ENDP	; CMyTreeCtrl::DeleteItemData
_TEXT	ENDS
PUBLIC	?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z	; CMyTreeCtrl::EnumItem
; Function compile flags: /Ogty
;	COMDAT ?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z
_TEXT	SEGMENT
_hItem$ = 8						; size = 4
_f$ = 12						; size = 1
?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z PROC NEAR	; CMyTreeCtrl::EnumItem, COMDAT
; _this$ = ecx

; 103  : {

  00000	56		 push	 esi

; 104  : 	if( hItem == (HTREEITEM)NULL )

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _hItem$[esp]
  00005	33 c0		 xor	 eax, eax
  00007	3b f0		 cmp	 esi, eax
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	0f 84 9a 00 00
	00		 je	 $L149310
  00012	53		 push	 ebx
  00013	8a 5c 24 14	 mov	 bl, BYTE PTR _f$[esp+8]
  00017	55		 push	 ebp
  00018	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageA@16
  0001e	eb 02		 jmp	 SHORT $L149308
$L149312:
  00020	33 c0		 xor	 eax, eax
$L149308:

; 105  : 		return;
; 106  : 
; 107  : 	if( f == true ) {

  00022	80 fb 01	 cmp	 bl, 1
  00025	75 0c		 jne	 SHORT $L148566

; 108  : 		m_uSizeofEnumItem	= 0;

  00027	89 87 54 08 00
	00		 mov	 DWORD PTR [edi+2132], eax

; 109  : 		m_uIndexofEnumItem	= 0;

  0002d	89 87 58 08 00
	00		 mov	 DWORD PTR [edi+2136], eax
$L148566:

; 110  : 	}
; 111  : 
; 112  : 	PSrvrData pData		= (PSrvrData)GetItemData( hItem );

  00033	56		 push	 esi
  00034	8b cf		 mov	 ecx, edi
  00036	e8 00 00 00 00	 call	 ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z ; CTreeCtrl::GetItemData

; 113  : 	ASSERT( pData );
; 114  : 	if( pData->dwId < MAX_ID )

  0003b	81 38 40 42 0f
	00		 cmp	 DWORD PTR [eax], 1000000 ; 000f4240H
  00041	73 13		 jae	 SHORT $L148570

; 115  : 		m_ahEnumItem[m_uSizeofEnumItem++]	= hItem;

  00043	8b 87 54 08 00
	00		 mov	 eax, DWORD PTR [edi+2132]
  00049	89 b4 87 54 04
	00 00		 mov	 DWORD PTR [edi+eax*4+1108], esi
  00050	ff 87 54 08 00
	00		 inc	 DWORD PTR [edi+2132]
$L148570:

; 116  : 
; 117  : 	if( TRUE == ItemHasChildren( hItem ) )

  00056	56		 push	 esi
  00057	8b cf		 mov	 ecx, edi
  00059	e8 00 00 00 00	 call	 ?ItemHasChildren@CTreeCtrl@@QBEHPAU_TREEITEM@@@Z ; CTreeCtrl::ItemHasChildren
  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 29		 jne	 SHORT $L148571

; 118  : 	{
; 119  : 		if( f == false )

  00063	84 db		 test	 bl, bl
  00065	75 17		 jne	 SHORT $L148572

; 120  : 			EnumItem( GetNextSiblingItem( hItem ), false );

  00067	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  0006a	6a 00		 push	 0
  0006c	56		 push	 esi
  0006d	50		 push	 eax
  0006e	68 0a 11 00 00	 push	 4362			; 0000110aH
  00073	51		 push	 ecx
  00074	ff d5		 call	 ebp
  00076	50		 push	 eax
  00077	8b cf		 mov	 ecx, edi
  00079	e8 00 00 00 00	 call	 ?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z ; CMyTreeCtrl::EnumItem
$L148572:

; 121  : 		EnumItem( GetChildItem( hItem ), false );

  0007e	8b 57 1c	 mov	 edx, DWORD PTR [edi+28]
  00081	56		 push	 esi
  00082	6a 04		 push	 4
  00084	68 0a 11 00 00	 push	 4362			; 0000110aH
  00089	52		 push	 edx
  0008a	eb 10		 jmp	 SHORT $L149315
$L148571:

; 122  : 	}
; 123  : 	else
; 124  : 	{
; 125  : 		if( f == false )

  0008c	84 db		 test	 bl, bl
  0008e	75 1a		 jne	 SHORT $L149313

; 126  : 			EnumItem( GetNextSiblingItem( hItem ), false );

  00090	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00093	56		 push	 esi
  00094	6a 01		 push	 1
  00096	68 0a 11 00 00	 push	 4362			; 0000110aH
  0009b	50		 push	 eax
$L149315:
  0009c	32 db		 xor	 bl, bl
  0009e	ff d5		 call	 ebp
  000a0	8b f0		 mov	 esi, eax
  000a2	85 f6		 test	 esi, esi
  000a4	0f 85 76 ff ff
	ff		 jne	 $L149312
$L149313:
  000aa	5d		 pop	 ebp
  000ab	5b		 pop	 ebx
$L149310:
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi

; 127  : 	}
; 128  : }

  000ae	c2 08 00	 ret	 8
?EnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_N@Z ENDP	; CMyTreeCtrl::EnumItem
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z PROC NEAR ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::construct
; Function compile flags: /Ogty
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@ABQAU342@@Z PROC NEAR ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L149341
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L149341:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z PROC NEAR ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 235  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 236  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEABQAUtagENUMITEM@@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEABQAUtagENUMITEM@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEABQAUtagENUMITEM@@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 161  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 162  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEABQAUtagENUMITEM@@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?max_size@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEIXZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEIXZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::max_size, COMDAT
; _this$ = ecx

; 436  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 437  : 		}

  00005	c3		 ret	 0
?max_size@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEIXZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z ; std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z PROC NEAR ; std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >, COMDAT
; _this$ = ecx

; 44   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 45   : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z ENDP ; std::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_nod<tagENUMITEM *,std::allocator<tagENUMITEM *> >
_TEXT	ENDS
PUBLIC	??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator++, COMDAT
; _this$ = ecx

; 249  : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 250  : 			++(*(const_iterator *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	89 10		 mov	 DWORD PTR [eax], edx

; 251  : 			return (*this);
; 252  : 			}

  00008	c3		 ret	 0
??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L149407
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L149407:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?Clear@CMyTreeCtrl@@QAEXXZ			; CMyTreeCtrl::Clear
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\mytreectrl.cpp
;	COMDAT ?Clear@CMyTreeCtrl@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMyTreeCtrl@@QAEXXZ PROC NEAR			; CMyTreeCtrl::Clear, COMDAT
; _this$ = ecx

; 23   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 24   : 	DeleteItemData( GetRootItem() );

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	8b f1		 mov	 esi, ecx
  0000e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00011	68 0a 11 00 00	 push	 4362			; 0000110aH
  00016	50		 push	 eax
  00017	ff d7		 call	 edi
  00019	50		 push	 eax
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?DeleteItemData@CMyTreeCtrl@@QAEXPAU_TREEITEM@@@Z ; CMyTreeCtrl::DeleteItemData

; 25   : 	DeleteAllItems();

  00021	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00024	68 00 00 ff ff	 push	 -65536			; ffff0000H
  00029	6a 00		 push	 0
  0002b	68 01 11 00 00	 push	 4353			; 00001101H
  00030	51		 push	 ecx
  00031	ff d7		 call	 edi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi

; 26   : }

  00035	c3		 ret	 0
?Clear@CMyTreeCtrl@@QAEXXZ ENDP				; CMyTreeCtrl::Clear
_TEXT	ENDS
PUBLIC	?begin@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::begin
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?begin@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::begin, COMDAT
; _this$ = ecx

; 377  : 		return (iterator(_Nextnode(_Myhead)));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 378  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::end, COMDAT
; _this$ = ecx

; 387  : 		return (iterator(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 388  : 		}

  00009	c2 04 00	 ret	 4
?end@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::end
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode
EXTRN	__CxxThrowException@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode, COMDAT
; _this$ = ecx

; 899  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 0c		 push	 12			; 0000000cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 900  : 		int _Linkcnt = 0;
; 901  : 
; 902  : 		_TRY_BEGIN
; 903  : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000a	85 c0		 test	 eax, eax
  0000c	74 02		 je	 SHORT $L149505
  0000e	89 00		 mov	 DWORD PTR [eax], eax
$L149505:

; 904  : 		++_Linkcnt;
; 905  : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00010	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 02		 je	 SHORT $L149531
  00017	89 01		 mov	 DWORD PTR [ecx], eax
$L149531:

; 906  : 		_CATCH_ALL
; 907  : 		if (0 < _Linkcnt)
; 908  : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 909  : 		this->_Alnod.deallocate(_Pnode, 1);
; 910  : 		_RERAISE;
; 911  : 		_CATCH_END
; 912  : 		return (_Pnode);
; 913  : 		}

  00019	c3		 ret	 0
?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode
_TEXT	ENDS
PUBLIC	??Diterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEAAPAUtagENUMITEM@@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEAAPAUtagENUMITEM@@XZ
_TEXT	SEGMENT
??Diterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEAAPAUtagENUMITEM@@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 240  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 241  : 			}

  00005	c3		 ret	 0
??Diterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QBEAAPAUtagENUMITEM@@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?clear@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::clear, COMDAT
; _this$ = ecx

; 610  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 611  : 		_Nodeptr _Pnext;
; 612  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 613  : 		_Nextnode(_Myhead) = _Myhead;

  00008	89 09		 mov	 DWORD PTR [ecx], ecx

; 614  : 		_Prevnode(_Myhead) = _Myhead;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 615  : 		_Mysize = 0;
; 616  : 
; 617  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00010	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00013	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001a	74 19		 je	 SHORT $L148774
  0001c	57		 push	 edi
  0001d	8d 49 00	 npad	 3
$L148772:

; 618  : 			{	// delete an element
; 619  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 38		 mov	 edi, DWORD PTR [eax]

; 620  : 			this->_Alnod.destroy(_Pnode);
; 621  : 			this->_Alnod.deallocate(_Pnode, 1);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b f9		 cmp	 edi, ecx
  00030	8b c7		 mov	 eax, edi
  00032	75 ec		 jne	 SHORT $L148772
  00034	5f		 pop	 edi
$L148774:
  00035	5e		 pop	 esi

; 622  : 			}
; 623  : 		}

  00036	c3		 ret	 0
?clear@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@0ABQAUtagENUMITEM@@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@0ABQAUtagENUMITEM@@@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@0ABQAUtagENUMITEM@@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode, COMDAT
; _this$ = ecx

; 918  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 0c		 push	 12			; 0000000cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 919  : 		_TRY_BEGIN
; 920  : 		new ((void *)_Pnode) _Node(_Next, _Prev, _Val);

  0000a	85 c0		 test	 eax, eax
  0000c	74 16		 je	 SHORT $L149588
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Next$[esp-4]
  00012	8b 54 24 08	 mov	 edx, DWORD PTR __Prev$[esp-4]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
  00018	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0001c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
$L149588:

; 921  : 		_CATCH_ALL
; 922  : 		this->_Alnod.deallocate(_Pnode, 1);
; 923  : 		_RERAISE;
; 924  : 		_CATCH_END
; 925  : 		return (_Pnode);
; 926  : 		}

  00024	c2 0c 00	 ret	 12			; 0000000cH
?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@0ABQAUtagENUMITEM@@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z ; std::_List_ptr<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_ptr<tagENUMITEM *,std::allocator<tagENUMITEM *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_List_ptr@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z PROC NEAR ; std::_List_ptr<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_ptr<tagENUMITEM *,std::allocator<tagENUMITEM *> >, COMDAT
; _this$ = ecx

; 64   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 65   : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_ptr@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z ENDP ; std::_List_ptr<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_ptr<tagENUMITEM *,std::allocator<tagENUMITEM *> >
_TEXT	ENDS
PUBLIC	??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AV012@H@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator++, COMDAT
; _this$ = ecx

; 256  : 			iterator _Tmp = *this;

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]

; 257  : 			++*this;

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 258  : 			return (_Tmp);

  00006	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000a	89 10		 mov	 DWORD PTR [eax], edx

; 259  : 			}

  0000c	c2 08 00	 ret	 8
??Eiterator@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L149659

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L149659

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L149656
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L149656:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L149659:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L147725

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L147725:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L147726

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L147726:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L149724

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L149689
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L149690
$L149689:
  00036	8b d3		 mov	 edx, ebx
$L149690:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L149696
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L149697
$L149696:
  00041	8b cb		 mov	 ecx, ebx
$L149697:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L149719

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L149719:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L149724:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T149929 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T149931 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L149731
$T149932 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L149729
$T149930 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T149931
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T149932
$T149923 DD	019930520H
	DD	04H
	DD	FLAT:$T149929
	DD	02H
	DD	FLAT:$T149930
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L147789

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L147791
$L147789:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L147791
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L147791

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L147791:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L147793
$L149729:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L149924
  00092	c3		 ret	 0
$L149924:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L147793:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L149849

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L149845
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L149846
$L149845:
  000ae	83 c6 04	 add	 esi, 4
$L149846:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L149849:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L149890
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L149890:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L149919
  000f2	8b c2		 mov	 eax, edx
$L149919:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L149731:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L149829
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L149829:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L149934:
$L149928:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T149923
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAPAUtagENUMITEM@@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::front
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAPAUtagENUMITEM@@XZ
_TEXT	SEGMENT
?front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAPAUtagENUMITEM@@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::front, COMDAT
; _this$ = ecx

; 451  : 		return (*begin());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	83 c0 08	 add	 eax, 8

; 452  : 		}

  00008	c3		 ret	 0
?front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEAAPAUtagENUMITEM@@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::front
_TEXT	ENDS
PUBLIC	?erase@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::erase
; Function compile flags: /Ogty
;	COMDAT ?erase@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::erase, COMDAT
; _this$ = ecx

; 587  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 588  : 		if (_Pnode != _Myhead)

  00007	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0000a	57		 push	 edi
  0000b	8b 38		 mov	 edi, DWORD PTR [eax]
  0000d	74 1f		 je	 SHORT $L150031

; 589  : 			{	// not list head, safe to erase
; 590  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	89 11		 mov	 DWORD PTR [ecx], edx

; 591  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 592  : 			this->_Alnod.destroy(_Pnode);
; 593  : 			this->_Alnod.deallocate(_Pnode, 1);

  0001b	50		 push	 eax
  0001c	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 594  : 			--_Mysize;

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	83 c4 04	 add	 esp, 4
  0002a	48		 dec	 eax
  0002b	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L150031:

; 595  : 			}
; 596  : 		return (_Where);

  0002e	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00032	89 38		 mov	 DWORD PTR [eax], edi
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 597  : 		}

  00036	c2 08 00	 ret	 8
?erase@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXXZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXXZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Tidy, COMDAT
; _this$ = ecx

; 929  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 930  : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::clear

; 931  : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 932  : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 933  : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 934  : 		_Myhead = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	5e		 pop	 esi

; 935  : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXXZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_List_val@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z ; std::_List_val<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_val<tagENUMITEM *,std::allocator<tagENUMITEM *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_List_val@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z PROC NEAR ; std::_List_val<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_val<tagENUMITEM *,std::allocator<tagENUMITEM *> >, COMDAT
; _this$ = ecx

; 82   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 83   : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_val@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAE@V?$allocator@PAUtagENUMITEM@@@1@@Z ENDP ; std::_List_val<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_List_val<tagENUMITEM *,std::allocator<tagENUMITEM *> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L150127
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L150127:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L147734

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L147734:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L147735

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L147735:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L147737
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L147737
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L150142
  00047	8b de		 mov	 ebx, esi
$L150142:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L150202
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L150200
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L150200:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L150202:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L147737:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L150233

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L150231
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L150231:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L150233:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??0?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >, COMDAT
; _this$ = ecx

; 280  : 		{	// construct empty list

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 281  : 		}

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??0?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >
_TEXT	ENDS
PUBLIC	??1?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::~list<tagENUMITEM *,std::allocator<tagENUMITEM *> >
; Function compile flags: /Ogty
;	COMDAT ??1?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::~list<tagENUMITEM *,std::allocator<tagENUMITEM *> >, COMDAT
; _this$ = ecx

; 364  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 365  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::clear
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	5e		 pop	 esi

; 366  : 		}

  0001c	c3		 ret	 0
??1?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAE@XZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::~list<tagENUMITEM *,std::allocator<tagENUMITEM *> >
_TEXT	ENDS
PUBLIC	?pop_front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::pop_front
; Function compile flags: /Ogty
;	COMDAT ?pop_front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::pop_front, COMDAT
; _this$ = ecx

; 475  : 		{	// erase element at beginning

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 476  : 		erase(begin());

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 1f		 je	 SHORT $L150403
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	89 11		 mov	 DWORD PTR [ecx], edx
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	50		 push	 eax
  00019	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00021	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00024	83 c4 04	 add	 esp, 4
  00027	48		 dec	 eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L150403:
  0002b	5e		 pop	 esi

; 477  : 		}

  0002c	c3		 ret	 0
?pop_front@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::pop_front
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L150499
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L150499:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L150527
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L150527:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L150533
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L150533:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L147398

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L147398:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L147400

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L147400:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L147401

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L147401:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L150684
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L150684:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L150685
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L150730:
  0006b	76 6d		 jbe	 SHORT $L150729

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L150695
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L150696

; 599  : 		else if (_Grow(_Num))

$L150685:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L150730
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L150677
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L150677:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L150695:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L150696:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L150701
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L150702
$L150701:
  000b7	8b f8		 mov	 edi, eax
$L150702:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L150724
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L150724:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L150729:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L150751
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L150752
$L150751:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L150752:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L147721
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L150755
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L150756
$L150755:
  00029	8b c8		 mov	 ecx, eax
$L150756:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L147721

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L150768
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L150768:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L147721:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L150880
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L150880:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L150881
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L150948:
  00077	76 68		 jbe	 SHORT $L150946

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L150920
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L150921

; 611  : 
; 612  : 		if (_Grow(_Num))

$L150881:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L150948
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L150911
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L150911:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L150920:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L150921:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L150943
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L150943:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L150946:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0CMyTreeCtrl@@QAE@XZ				; CMyTreeCtrl::CMyTreeCtrl
PUBLIC	??_7CMyTreeCtrl@@6B@				; CMyTreeCtrl::`vftable'
PUBLIC	??_GCMyTreeCtrl@@UAEPAXI@Z			; CMyTreeCtrl::`scalar deleting destructor'
EXTRN	??_ECMyTreeCtrl@@UAEPAXI@Z:NEAR			; CMyTreeCtrl::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T151046 DD	0ffffffffH
	DD	FLAT:$L150952
$T151044 DD	019930520H
	DD	01H
	DD	FLAT:$T151046
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CMyTreeCtrl@@6B@
CONST	SEGMENT
??_7CMyTreeCtrl@@6B@ DD FLAT:?GetRuntimeClass@CTreeCtrl@@UBEPAUCRuntimeClass@@XZ ; CMyTreeCtrl::`vftable'
	DD	FLAT:??_ECMyTreeCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CMyTreeCtrl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPAGUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPAG@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PAG@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PAG@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?Create@CTreeCtrl@@UAEHKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?CreateEx@CTreeCtrl@@UAEHKKABUtagRECT@@PAVCWnd@@I@Z
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\mytreectrl.cpp
CONST	ENDS
;	COMDAT ??0CMyTreeCtrl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CMyTreeCtrl@@QAE@XZ PROC NEAR			; CMyTreeCtrl::CMyTreeCtrl, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CMyTreeCtrl@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	57		 push	 edi
  0001b	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0001f	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
  00024	33 db		 xor	 ebx, ebx
  00026	8d be 5c 08 00
	00		 lea	 edi, DWORD PTR [esi+2140]
  0002c	8b cf		 mov	 ecx, edi
  0002e	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CMyTreeCtrl@@6B@
  00038	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@XZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode

; 13   : 	m_nSizeOfahItem		= 0;
; 14   : 	m_uSizeofEnumItem	= 0;
; 15   : 	m_uIndexofEnumItem	= 0;
; 16   : }

  0003d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00041	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00044	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00047	89 9e 50 04 00
	00		 mov	 DWORD PTR [esi+1104], ebx
  0004d	89 9e 54 08 00
	00		 mov	 DWORD PTR [esi+2132], ebx
  00053	89 9e 58 08 00
	00		 mov	 DWORD PTR [esi+2136], ebx
  00059	5f		 pop	 edi
  0005a	8b c6		 mov	 eax, esi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150952:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CTreeCtrl@@UAE@XZ	; CTreeCtrl::~CTreeCtrl
__ehhandler$??0CMyTreeCtrl@@QAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151044
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CMyTreeCtrl@@QAE@XZ ENDP				; CMyTreeCtrl::CMyTreeCtrl
PUBLIC	??1CMyTreeCtrl@@UAE@XZ				; CMyTreeCtrl::~CMyTreeCtrl
; Function compile flags: /Ogty
;	COMDAT ??1CMyTreeCtrl@@UAE@XZ
_TEXT	SEGMENT
??1CMyTreeCtrl@@UAE@XZ PROC NEAR			; CMyTreeCtrl::~CMyTreeCtrl, COMDAT
; _this$ = ecx

; 19   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 20   : }

  00004	8d be 5c 08 00
	00		 lea	 edi, DWORD PTR [esi+2140]
  0000a	8b cf		 mov	 ecx, edi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CMyTreeCtrl@@6B@
  00012	e8 00 00 00 00	 call	 ?clear@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXXZ ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::clear
  00017	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0002a	5f		 pop	 edi
  0002b	8b ce		 mov	 ecx, esi
  0002d	5e		 pop	 esi
  0002e	e9 00 00 00 00	 jmp	 ??1CTreeCtrl@@UAE@XZ	; CTreeCtrl::~CTreeCtrl
??1CMyTreeCtrl@@UAE@XZ ENDP				; CMyTreeCtrl::~CMyTreeCtrl
_TEXT	ENDS
PUBLIC	?PeekEnumItem@CMyTreeCtrl@@QAEHXZ		; CMyTreeCtrl::PeekEnumItem
; Function compile flags: /Ogty
;	COMDAT ?PeekEnumItem@CMyTreeCtrl@@QAEHXZ
_TEXT	SEGMENT
?PeekEnumItem@CMyTreeCtrl@@QAEHXZ PROC NEAR		; CMyTreeCtrl::PeekEnumItem, COMDAT
; _this$ = ecx

; 162  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 163  : 	if( m_lspEnumItem.empty() )

  00003	8b 83 64 08 00
	00		 mov	 eax, DWORD PTR [ebx+2148]
  00009	85 c0		 test	 eax, eax
  0000b	75 04		 jne	 SHORT $L148601

; 164  : 		return FALSE;

  0000d	33 c0		 xor	 eax, eax
  0000f	5b		 pop	 ebx

; 172  : }

  00010	c3		 ret	 0
$L148601:

; 165  : 
; 166  : 	PENUMITEM pEnumItem		= m_lspEnumItem.front();

  00011	8b 83 60 08 00
	00		 mov	 eax, DWORD PTR [ebx+2144]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	55		 push	 ebp
  0001a	8b 69 08	 mov	 ebp, DWORD PTR [ecx+8]

; 167  : 	m_lspEnumItem.pop_front();

  0001d	8b c8		 mov	 ecx, eax
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	3b c1		 cmp	 eax, ecx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	74 25		 je	 SHORT $L151272
  00027	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 0a		 mov	 DWORD PTR [edx], ecx
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	50		 push	 eax
  00034	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	8b 83 64 08 00
	00		 mov	 eax, DWORD PTR [ebx+2148]
  00042	83 c4 04	 add	 esp, 4
  00045	48		 dec	 eax
  00046	89 83 64 08 00
	00		 mov	 DWORD PTR [ebx+2148], eax
$L151272:

; 168  : 	memcpy( m_ahEnumItem, pEnumItem->m_ahEnumItem, sizeof(HTREEITEM) * pEnumItem->m_uSizeofEnumItem );

  0004c	8b 8d 00 04 00
	00		 mov	 ecx, DWORD PTR [ebp+1024]
  00052	c1 e1 02	 shl	 ecx, 2
  00055	8b d1		 mov	 edx, ecx
  00057	c1 e9 02	 shr	 ecx, 2
  0005a	8b f5		 mov	 esi, ebp
  0005c	8d bb 54 04 00
	00		 lea	 edi, DWORD PTR [ebx+1108]
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb

; 169  : 	m_uSizeofEnumItem	= pEnumItem->m_uSizeofEnumItem;

  0006b	8b 85 00 04 00
	00		 mov	 eax, DWORD PTR [ebp+1024]

; 170  : 	SAFE_DELETE( pEnumItem );

  00071	55		 push	 ebp
  00072	89 83 54 08 00
	00		 mov	 DWORD PTR [ebx+2132], eax
  00078	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007d	83 c4 04	 add	 esp, 4
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5d		 pop	 ebp

; 171  : 	return TRUE;

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	5b		 pop	 ebx

; 172  : }

  00089	c3		 ret	 0
?PeekEnumItem@CMyTreeCtrl@@QAEHXZ ENDP			; CMyTreeCtrl::PeekEnumItem
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L151373:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L151373
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCMyTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMyTreeCtrl@@UAEPAXI@Z PROC NEAR			; CMyTreeCtrl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CMyTreeCtrl@@UAE@XZ	; CMyTreeCtrl::~CMyTreeCtrl
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L151380
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L151380:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCMyTreeCtrl@@UAEPAXI@Z ENDP				; CMyTreeCtrl::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L151455:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L151455
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T151558 DD	0ffffffffH
	DD	FLAT:$L151459
$T151556 DD	019930520H
	DD	01H
	DD	FLAT:$T151558
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L151459:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151556
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L151568
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L151568:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L151656
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L151656:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Incsize
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
xdata$x	SEGMENT
$T151810 DD	0ffffffffH
	DD	FLAT:$L151680
$T151807 DD	019930520H
	DD	01H
	DD	FLAT:$T151810
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
_DATA	ENDS
;	COMDAT ?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T151679 = -80						; size = 28
$T151678 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Incsize, COMDAT
; _this$ = ecx

; 956  : 		{	// alter element count, with checking

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list

; 957  : 		if (max_size() - _Mysize < _Count)

  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Count$[esp-4]
  0000a	6a ff		 push	 -1
  0000c	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z
  00011	50		 push	 eax
  00012	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00019	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001c	83 ec 44	 sub	 esp, 68			; 00000044H
  0001f	56		 push	 esi
  00020	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
  00025	2b f0		 sub	 esi, eax
  00027	3b f2		 cmp	 esi, edx
  00029	5e		 pop	 esi
  0002a	73 51		 jae	 SHORT $L148787

; 958  : 			_THROW(length_error, "list<T> too long");

  0002c	6a 10		 push	 16			; 00000010H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00033	8d 4c 24 08	 lea	 ecx, DWORD PTR $T151679[esp+88]
  00037	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T151679[esp+112], 15 ; 0000000fH
  0003f	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T151679[esp+108], 0
  00047	c6 44 24 0c 00	 mov	 BYTE PTR $T151679[esp+92], 0
  0004c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00051	8d 04 24	 lea	 eax, DWORD PTR $T151679[esp+80]
  00054	50		 push	 eax
  00055	8d 4c 24 20	 lea	 ecx, DWORD PTR $T151678[esp+84]
  00059	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  00061	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00066	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  0006b	8d 4c 24 20	 lea	 ecx, DWORD PTR $T151678[esp+84]
  0006f	51		 push	 ecx
  00070	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T151678[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00078	e8 00 00 00 00	 call	 __CxxThrowException@8
$L151811:
$L148787:

; 959  : 		_Mysize += _Count;

  0007d	03 c2		 add	 eax, edx
  0007f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 960  : 		}

  00082	8b 4c 24 44	 mov	 ecx, DWORD PTR __$EHRec$[esp+80]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0008d	83 c4 50	 add	 esp, 80			; 00000050H
  00090	c2 04 00	 ret	 4
$L151809:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L151680:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T151679[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151807
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Incsize
;	COMDAT xdata$x
xdata$x	SEGMENT
$T151916 DD	0ffffffffH
	DD	FLAT:$L151817
$T151914 DD	019930520H
	DD	01H
	DD	FLAT:$T151916
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L151817:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151914
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Insert@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXViterator@12@ABQAUtagENUMITEM@@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Insert
; Function compile flags: /Ogty
;	COMDAT ?_Insert@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXViterator@12@ABQAUtagENUMITEM@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXViterator@12@ABQAUtagENUMITEM@@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Insert, COMDAT
; _this$ = ecx

; 522  : 		_Nodeptr _Pnode = _Where._Mynode();
; 523  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	8b 5c 24 08	 mov	 ebx, DWORD PTR __Where$[esp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	8b cf		 mov	 ecx, edi
  00015	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@0ABQAUtagENUMITEM@@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode

; 524  : 		_Incsize(1);

  0001a	6a 01		 push	 1
  0001c	8b cf		 mov	 ecx, edi
  0001e	8b f0		 mov	 esi, eax
  00020	e8 00 00 00 00	 call	 ?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Incsize

; 525  : 		_Prevnode(_Pnode) = _Newnode;

  00025	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 526  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  00028	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002b	5f		 pop	 edi
  0002c	89 32		 mov	 DWORD PTR [edx], esi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 527  : 		}

  00030	c2 08 00	 ret	 8
?_Insert@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXViterator@12@ABQAUtagENUMITEM@@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Insert
_TEXT	ENDS
PUBLIC	?push_back@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXABQAUtagENUMITEM@@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::push_back
; Function compile flags: /Ogty
;	COMDAT ?push_back@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXABQAUtagENUMITEM@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXABQAUtagENUMITEM@@@Z PROC NEAR ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::push_back, COMDAT
; _this$ = ecx

; 481  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@0ABQAUtagENUMITEM@@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 482  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@QAEXABQAUtagENUMITEM@@@Z ENDP ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::push_back
_TEXT	ENDS
PUBLIC	?PostEnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_NPAUtagENUMITEM@@@Z ; CMyTreeCtrl::PostEnumItem
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\monitor\mytreectrl.cpp
;	COMDAT ?PostEnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_NPAUtagENUMITEM@@@Z
_TEXT	SEGMENT
_hItem$ = 8						; size = 4
_f$ = 12						; size = 1
_pEnumItem$ = 16					; size = 4
?PostEnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_NPAUtagENUMITEM@@@Z PROC NEAR ; CMyTreeCtrl::PostEnumItem, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp

; 132  : 	if( hItem == (HTREEITEM)NULL )

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR _hItem$[esp]
  00005	85 ed		 test	 ebp, ebp
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	0f 84 de 00 00
	00		 je	 $L152076
  00010	53		 push	 ebx

; 133  : 		return;
; 134  : 
; 135  : 	if( f == true )

  00011	8a 5c 24 14	 mov	 bl, BYTE PTR _f$[esp+8]
  00015	80 fb 01	 cmp	 bl, 1
  00018	57		 push	 edi
  00019	75 2d		 jne	 SHORT $L152091

; 136  : 		pEnumItem	= new ENUMITEM;

  0001b	68 04 04 00 00	 push	 1028			; 00000404H
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	83 c4 04	 add	 esp, 4
  00028	85 c0		 test	 eax, eax
  0002a	74 12		 je	 SHORT $L151999
  0002c	8b f8		 mov	 edi, eax
  0002e	c7 80 00 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1024], 0
  00038	89 7c 24 1c	 mov	 DWORD PTR _pEnumItem$[esp+12], edi
  0003c	eb 0e		 jmp	 SHORT $L148583
$L151999:
  0003e	33 c0		 xor	 eax, eax
  00040	8b f8		 mov	 edi, eax
  00042	89 7c 24 1c	 mov	 DWORD PTR _pEnumItem$[esp+12], edi
  00046	eb 04		 jmp	 SHORT $L148583
$L152091:
  00048	8b 7c 24 1c	 mov	 edi, DWORD PTR _pEnumItem$[esp+12]
$L148583:

; 137  : 
; 138  : 	PSrvrData pData		= (PSrvrData)GetItemData( hItem );

  0004c	55		 push	 ebp
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z ; CTreeCtrl::GetItemData

; 139  : 	ASSERT( pData );
; 140  : 	if( pData->dwId < MAX_ID )

  00054	81 38 40 42 0f
	00		 cmp	 DWORD PTR [eax], 1000000 ; 000f4240H
  0005a	73 0f		 jae	 SHORT $L148591

; 141  : 		pEnumItem->m_ahEnumItem[pEnumItem->m_uSizeofEnumItem++]		= hItem;

  0005c	8b 87 00 04 00
	00		 mov	 eax, DWORD PTR [edi+1024]
  00062	89 2c 87	 mov	 DWORD PTR [edi+eax*4], ebp
  00065	ff 87 00 04 00
	00		 inc	 DWORD PTR [edi+1024]
$L148591:

; 142  : 
; 143  : 	if( TRUE == ItemHasChildren( hItem ) )

  0006b	55		 push	 ebp
  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?ItemHasChildren@CTreeCtrl@@QBEHPAU_TREEITEM@@@Z ; CTreeCtrl::ItemHasChildren
  00073	83 f8 01	 cmp	 eax, 1
  00076	75 7b		 jne	 SHORT $L148592

; 144  : 	{
; 145  : 		if( f == false )

  00078	84 db		 test	 bl, bl
  0007a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00080	75 18		 jne	 SHORT $L148593

; 146  : 			PostEnumItem( GetNextSiblingItem( hItem ), false, pEnumItem );

  00082	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00085	55		 push	 ebp
  00086	50		 push	 eax
  00087	68 0a 11 00 00	 push	 4362			; 0000110aH
  0008c	51		 push	 ecx
  0008d	ff d3		 call	 ebx
  0008f	57		 push	 edi
  00090	6a 00		 push	 0
  00092	50		 push	 eax
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?PostEnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_NPAUtagENUMITEM@@@Z ; CMyTreeCtrl::PostEnumItem
$L148593:

; 147  : 		PostEnumItem( GetChildItem( hItem ), false, pEnumItem );

  0009a	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0009d	55		 push	 ebp
  0009e	6a 04		 push	 4
  000a0	68 0a 11 00 00	 push	 4362			; 0000110aH
  000a5	52		 push	 edx
  000a6	ff d3		 call	 ebx
  000a8	57		 push	 edi
  000a9	6a 00		 push	 0
  000ab	50		 push	 eax
  000ac	8b ce		 mov	 ecx, esi
  000ae	e8 00 00 00 00	 call	 ?PostEnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_NPAUtagENUMITEM@@@Z ; CMyTreeCtrl::PostEnumItem

; 148  : 	}
; 149  : 	else

  000b3	8a 5c 24 18	 mov	 bl, BYTE PTR _f$[esp+12]
$L148595:

; 153  : 	}
; 154  : 
; 155  : 	if( f == true )

  000b7	80 fb 01	 cmp	 bl, 1
  000ba	75 30		 jne	 SHORT $L152092

; 156  : 	{
; 157  : 		m_lspEnumItem.push_back( pEnumItem );

  000bc	8b be 60 08 00
	00		 mov	 edi, DWORD PTR [esi+2144]
  000c2	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000c5	81 c6 5c 08 00
	00		 add	 esi, 2140		; 0000085cH
  000cb	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pEnumItem$[esp+12]
  000cf	51		 push	 ecx
  000d0	52		 push	 edx
  000d1	57		 push	 edi
  000d2	8b ce		 mov	 ecx, esi
  000d4	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@2@PAU342@0ABQAUtagENUMITEM@@@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Buynode
  000d9	6a 01		 push	 1
  000db	8b ce		 mov	 ecx, esi
  000dd	8b d8		 mov	 ebx, eax
  000df	e8 00 00 00 00	 call	 ?_Incsize@?$list@PAUtagENUMITEM@@V?$allocator@PAUtagENUMITEM@@@std@@@std@@IAEXI@Z ; std::list<tagENUMITEM *,std::allocator<tagENUMITEM *> >::_Incsize
  000e4	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  000e7	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000ea	89 18		 mov	 DWORD PTR [eax], ebx
$L152092:
  000ec	5f		 pop	 edi
  000ed	5b		 pop	 ebx
$L152076:
  000ee	5e		 pop	 esi
  000ef	5d		 pop	 ebp

; 158  : 	}
; 159  : }

  000f0	c2 0c 00	 ret	 12			; 0000000cH
$L148592:

; 150  : 	{
; 151  : 		if( f == false )

  000f3	84 db		 test	 bl, bl
  000f5	75 c0		 jne	 SHORT $L148595

; 152  : 			PostEnumItem( GetNextSiblingItem( hItem ), false, pEnumItem );

  000f7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000fa	55		 push	 ebp
  000fb	6a 01		 push	 1
  000fd	68 0a 11 00 00	 push	 4362			; 0000110aH
  00102	50		 push	 eax
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00109	57		 push	 edi
  0010a	6a 00		 push	 0
  0010c	50		 push	 eax
  0010d	8b ce		 mov	 ecx, esi
  0010f	e8 00 00 00 00	 call	 ?PostEnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_NPAUtagENUMITEM@@@Z ; CMyTreeCtrl::PostEnumItem
  00114	5f		 pop	 edi
  00115	5b		 pop	 ebx
  00116	5e		 pop	 esi
  00117	5d		 pop	 ebp

; 158  : 	}
; 159  : }

  00118	c2 0c 00	 ret	 12			; 0000000cH
?PostEnumItem@CMyTreeCtrl@@QAEXPAU_TREEITEM@@_NPAUtagENUMITEM@@@Z ENDP ; CMyTreeCtrl::PostEnumItem
_TEXT	ENDS
END
