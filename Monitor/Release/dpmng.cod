; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	\Offi SRC_real\Offi src!\_Network\Net\Src\dpmng.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_09PKKCPLIP@bad?5alloc?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?GetHeaderLength@CBuffer@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPacketSize@CBuffer2@@UAEKPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHeader@CBuffer2@@UAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CBuffer2@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBuffer2@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBuffer2@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@CBufferQueue@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRecvHandle@CDPSock@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHostAddr@CDPSock@@QAEJPAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPlayerAddr@CDPSock@@QAEJKPAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPlayerAddr@CDPSock@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRecvHandle@CDPMng@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCloseHandle@CDPMng@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CDPMng@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDPMng@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CDPMng@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateDPObject@CDPMng@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteDPObject@CDPMng@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitConnection@CDPMng@@QAEHPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?JoinSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHostAddr@CDPMng@@QAEXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPlayerAddr@CDPMng@@QAEXKPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPlayerAddr@CDPMng@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReceiveMessage@CDPMng@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DestroyPlayer@CDPMng@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReceiveThread@@YGIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitializeNetLib@@YAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UninitializeNetLib@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$MemPooler@VCClientSock@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$MemPooler@VCClientSockE@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$MemPooler@VCBuffer@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$MemPooler@VCBuffer2@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TestNetLib@@YAXPBDG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$MemPooler@VCBuffer@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCBuffer@@@@QAEPAVCBuffer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCBuffer@@@@QAEHPAVCBuffer@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$MemPooler@VCBuffer2@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCBuffer2@@@@QAEPAVCBuffer2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCBuffer2@@@@QAEHPAVCBuffer2@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$MemPooler@VCClientSock@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCClientSock@@@@QAEPAVCClientSock@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCClientSock@@@@QAEHPAVCClientSock@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$MemPooler@VCClientSockE@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCClientSockE@@@@QAEPAVCClientSockE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCClientSockE@@@@QAEHPAVCClientSockE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAXV?$allocator@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCBuffer@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destroy@?$MemPooler@VCBuffer@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCBuffer2@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destroy@?$MemPooler@VCBuffer2@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCClientSock@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destroy@?$MemPooler@VCClientSock@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCClientSockE@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destroy@?$MemPooler@VCClientSockE@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAXV?$allocator@PAX@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEAAPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXViterator@12@ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEABQAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAXV?$allocator@PAX@std@@@std@@IAEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@0ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Incsize@?$list@PAXV?$allocator@PAX@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$list@PAXV?$allocator@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@QAE@PAU012@0ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAX@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyPool@V?$CMyBucket@PAVCClientSock@@@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyMap@PAVCClientSock@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CMyMap@PAVCClientSock@@@@QAEHKAAPAVCClientSock@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyPool@V?$CMyBucket@PAVCClientSockE@@@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyMap@PAVCClientSockE@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CMyMap@PAVCClientSockE@@@@QAEHKAAPAVCClientSockE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyPool@V?$CMyBucket@PAVCClientSock@@@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$stack@PAV?$CMyBucket@PAVCClientSock@@@@V?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyMap@PAVCClientSock@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyPool@V?$CMyBucket@PAVCClientSockE@@@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$stack@PAV?$CMyBucket@PAVCClientSockE@@@@V?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyMap@PAVCClientSockE@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@QAEXPAPAV?$CMyBucket@PAVCClientSock@@@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAV?$CMyBucket@PAVCClientSock@@@@@std@@QAEXPAPAPAV?$CMyBucket@PAVCClientSock@@@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAV?$CMyBucket@PAVCClientSock@@@@@std@@QAEXPAPAPAV?$CMyBucket@PAVCClientSock@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@QAEXPAPAV?$CMyBucket@PAVCClientSockE@@@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAV?$CMyBucket@PAVCClientSockE@@@@@std@@QAEXPAPAPAV?$CMyBucket@PAVCClientSockE@@@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAV?$CMyBucket@PAVCClientSockE@@@@@std@@QAEXPAPAPAV?$CMyBucket@PAVCClientSockE@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@QAEXPAPAV?$CMyBucket@PAVCClientSock@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@QAEXPAPAV?$CMyBucket@PAVCClientSockE@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@?$CMyPool@V?$CMyBucket@PAVCClientSock@@@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyBucket@PAVCClientSock@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqual@?$CMyBucket@PAVCClientSock@@@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@?$CMyPool@V?$CMyBucket@PAVCClientSockE@@@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CMyBucket@PAVCClientSockE@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqual@?$CMyBucket@PAVCClientSockE@@@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAV?$CMyBucket@PAVCClientSock@@@@@std@@YAXPAPAPAV?$CMyBucket@PAVCClientSock@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAV?$CMyBucket@PAVCClientSockE@@@@@std@@YAXPAPAPAV?$CMyBucket@PAVCClientSockE@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAV?$CMyBucket@PAVCClientSock@@@@@std@@YAXPAPAV?$CMyBucket@PAVCClientSock@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@YAXPAPAV?$CMyBucket@PAVCClientSockE@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyBucket@PAVCClientSock@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CMyBucket@PAVCClientSockE@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$stack@PAV?$CMyBucket@PAVCClientSock@@@@V?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@?$stack@PAV?$CMyBucket@PAVCClientSock@@@@V?$deque@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$stack@PAV?$CMyBucket@PAVCClientSockE@@@@V?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@?$stack@PAV?$CMyBucket@PAVCClientSockE@@@@V?$deque@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBEAAPAV?$CMyBucket@PAVCClientSock@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBEAAPAV?$CMyBucket@PAVCClientSockE@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBEABQAV?$CMyBucket@PAVCClientSock@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBEABQAV?$CMyBucket@PAVCClientSockE@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@KAAAPAV?$CMyBucket@PAVCClientSock@@@@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@KAAAPAV?$CMyBucket@PAVCClientSockE@@@@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSock@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSock@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAV?$CMyBucket@PAVCClientSockE@@@@V?$allocator@PAV?$CMyBucket@PAVCClientSockE@@@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CMyBucket@PAVCClientSockE@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyBucket@PAVCClientSock@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyMap@PAVCClientSockE@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyPool@V?$CMyBucket@PAVCClientSockE@@@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IDHash@@YAKKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMclCritSec@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMclCritSec@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCMclCritSec@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CMyMap@PAVCClientSock@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CMyPool@V?$CMyBucket@PAVCClientSock@@@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?chWindows9x@@YAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CDPMng@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CMclAutoLock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Leave@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMclAutoLock@@QAE@AAVCMclCritSec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Enter@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBuffer2@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GetHeaderLength@CBuffer@@QAEKXZ		; CBuffer::GetHeaderLength
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\net\include\buffer.h
;	COMDAT ?GetHeaderLength@CBuffer@@QAEKXZ
_TEXT	SEGMENT
?GetHeaderLength@CBuffer@@QAEKXZ PROC NEAR		; CBuffer::GetHeaderLength, COMDAT
; _this$ = ecx

; 66   : 		return m_dwHeaderSize;

  00000	8b 81 24 20 00
	00		 mov	 eax, DWORD PTR [ecx+8228]

; 67   : 	}

  00006	c3		 ret	 0
?GetHeaderLength@CBuffer@@QAEKXZ ENDP			; CBuffer::GetHeaderLength
_TEXT	ENDS
PUBLIC	?GetRecvHandle@CDPSock@@QAEPAXXZ		; CDPSock::GetRecvHandle
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\net\include\dpsock.h
;	COMDAT ?GetRecvHandle@CDPSock@@QAEPAXXZ
_TEXT	SEGMENT
?GetRecvHandle@CDPSock@@QAEPAXXZ PROC NEAR		; CDPSock::GetRecvHandle, COMDAT
; _this$ = ecx

; 100  : 	{	return m_hRecv;	}

  00000	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00003	c3		 ret	 0
?GetRecvHandle@CDPSock@@QAEPAXXZ ENDP			; CDPSock::GetRecvHandle
_TEXT	ENDS
PUBLIC	?GetHostAddr@CDPSock@@QAEJPAXPAK@Z		; CDPSock::GetHostAddr
; Function compile flags: /Ogty
;	COMDAT ?GetHostAddr@CDPSock@@QAEJPAXPAK@Z
_TEXT	SEGMENT
_lpAddr$ = 8						; size = 4
_lpdwSize$ = 12						; size = 4
?GetHostAddr@CDPSock@@QAEJPAXPAK@Z PROC NEAR		; CDPSock::GetHostAddr, COMDAT
; _this$ = ecx

; 109  : 	{	return( m_pSock ? m_pSock->GetHostAddr( lpAddr, lpdwSize ):	DPERR_NOSESSIONS );	}

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 07		 je	 SHORT $L155105
  00007	8b c8		 mov	 ecx, eax
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	ff 60 10	 jmp	 DWORD PTR [eax+16]
$L155105:
  0000e	b8 dc 00 77 88	 mov	 eax, -2005466916	; 887700dcH
  00013	c2 08 00	 ret	 8
?GetHostAddr@CDPSock@@QAEJPAXPAK@Z ENDP			; CDPSock::GetHostAddr
_TEXT	ENDS
PUBLIC	?GetPlayerAddr@CDPSock@@QAEJKPAXPAK@Z		; CDPSock::GetPlayerAddr
; Function compile flags: /Ogty
;	COMDAT ?GetPlayerAddr@CDPSock@@QAEJKPAXPAK@Z
_TEXT	SEGMENT
_dpid$ = 8						; size = 4
_lpAddr$ = 12						; size = 4
_lpdwSize$ = 16						; size = 4
?GetPlayerAddr@CDPSock@@QAEJKPAXPAK@Z PROC NEAR		; CDPSock::GetPlayerAddr, COMDAT
; _this$ = ecx

; 111  : 	{	return m_pSock->GetPeerAddr( dpid, lpAddr, lpdwSize );	}

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 60 18	 jmp	 DWORD PTR [eax+24]
?GetPlayerAddr@CDPSock@@QAEJKPAXPAK@Z ENDP		; CDPSock::GetPlayerAddr
_TEXT	ENDS
PUBLIC	?GetPlayerAddr@CDPSock@@QAEKK@Z			; CDPSock::GetPlayerAddr
; Function compile flags: /Ogty
;	COMDAT ?GetPlayerAddr@CDPSock@@QAEKK@Z
_TEXT	SEGMENT
_dpid$ = 8						; size = 4
?GetPlayerAddr@CDPSock@@QAEKK@Z PROC NEAR		; CDPSock::GetPlayerAddr, COMDAT
; _this$ = ecx

; 113  : 	{	return m_pSock->GetPeerAddr( dpid );	}

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 60 14	 jmp	 DWORD PTR [eax+20]
?GetPlayerAddr@CDPSock@@QAEKK@Z ENDP			; CDPSock::GetPlayerAddr
_TEXT	ENDS
PUBLIC	?GetRecvHandle@CDPMng@@QAEPAXXZ			; CDPMng::GetRecvHandle
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\net\include\dpmng.h
;	COMDAT ?GetRecvHandle@CDPMng@@QAEPAXXZ
_TEXT	SEGMENT
?GetRecvHandle@CDPMng@@QAEPAXXZ PROC NEAR		; CDPMng::GetRecvHandle, COMDAT
; _this$ = ecx

; 133  : 	return	m_pDPSock->GetRecvHandle();	

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 40 60	 mov	 eax, DWORD PTR [eax+96]

; 134  : }

  00006	c3		 ret	 0
?GetRecvHandle@CDPMng@@QAEPAXXZ ENDP			; CDPMng::GetRecvHandle
_TEXT	ENDS
PUBLIC	?GetCloseHandle@CDPMng@@QAEPAXXZ		; CDPMng::GetCloseHandle
; Function compile flags: /Ogty
;	COMDAT ?GetCloseHandle@CDPMng@@QAEPAXXZ
_TEXT	SEGMENT
?GetCloseHandle@CDPMng@@QAEPAXXZ PROC NEAR		; CDPMng::GetCloseHandle, COMDAT
; _this$ = ecx

; 138  : 	return m_hClose;	

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 139  : }

  00003	c3		 ret	 0
?GetCloseHandle@CDPMng@@QAEPAXXZ ENDP			; CDPMng::GetCloseHandle
_TEXT	ENDS
PUBLIC	??_7CDPMng@@6B@					; CDPMng::`vftable'
PUBLIC	??_GCDPMng@@UAEPAXI@Z				; CDPMng::`scalar deleting destructor'
PUBLIC	??0CDPMng@@QAE@XZ				; CDPMng::CDPMng
EXTRN	??_ECDPMng@@UAEPAXI@Z:NEAR			; CDPMng::`vector deleting destructor'
EXTRN	__purecall:NEAR
;	COMDAT ??_7CDPMng@@6B@
; File c:\offi src_real\offi src!\_network\net\src\dpmng.cpp
CONST	SEGMENT
??_7CDPMng@@6B@ DD FLAT:??_ECDPMng@@UAEPAXI@Z		; CDPMng::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CDPMng@@QAE@XZ
_TEXT	SEGMENT
??0CDPMng@@QAE@XZ PROC NEAR				; CDPMng::CDPMng, COMDAT
; _this$ = ecx

; 28   : {

  00000	8b c1		 mov	 eax, ecx

; 29   : 	m_pDPSock	= NULL;

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDPMng@@6B@
  0000a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 30   : 	m_hRecvThread	= m_hClose	= (HANDLE)NULL;

  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 31   : }

  00013	c3		 ret	 0
??0CDPMng@@QAE@XZ ENDP					; CDPMng::CDPMng
_TEXT	ENDS
PUBLIC	??1CDPMng@@UAE@XZ				; CDPMng::~CDPMng
; Function compile flags: /Ogty
;	COMDAT ??1CDPMng@@UAE@XZ
_TEXT	SEGMENT
??1CDPMng@@UAE@XZ PROC NEAR				; CDPMng::~CDPMng, COMDAT
; _this$ = ecx

; 34   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CDPMng@@6B@

; 35   : 
; 36   : }

  00006	c3		 ret	 0
??1CDPMng@@UAE@XZ ENDP					; CDPMng::~CDPMng
_TEXT	ENDS
PUBLIC	?DeleteDPObject@CDPMng@@QAEHXZ			; CDPMng::DeleteDPObject
EXTRN	__imp__WaitForSingleObject@8:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	?Close@CDPSock@@QAEHXZ:NEAR			; CDPSock::Close
EXTRN	__imp__SetEvent@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?DeleteDPObject@CDPMng@@QAEHXZ
_TEXT	SEGMENT
?DeleteDPObject@CDPMng@@QAEHXZ PROC NEAR		; CDPMng::DeleteDPObject, COMDAT
; _this$ = ecx

; 64   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 65   : 	// Wake up receive thread and wait for it to quit
; 66   : 	CLOSE_THREAD( m_hRecvThread, m_hClose );

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	85 c0		 test	 eax, eax
  00008	74 38		 je	 SHORT $L153686
  0000a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000d	57		 push	 edi
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
  00015	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00018	6a ff		 push	 -1
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
  00021	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00024	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__CloseHandle@4
  0002a	52		 push	 edx
  0002b	ff d7		 call	 edi
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	50		 push	 eax
  00031	ff d7		 call	 edi
  00033	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	5f		 pop	 edi
$L153686:

; 67   : 	if( m_pDPSock ) {

  00042	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00045	85 c9		 test	 ecx, ecx
  00047	74 19		 je	 SHORT $L155139

; 68   : 		m_pDPSock->Close();

  00049	e8 00 00 00 00	 call	 ?Close@CDPSock@@QAEHXZ	; CDPSock::Close

; 69   : 		SAFE_DELETE( m_pDPSock );

  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	85 c9		 test	 ecx, ecx
  00053	74 0d		 je	 SHORT $L155139
  00055	8b 11		 mov	 edx, DWORD PTR [ecx]
  00057	6a 01		 push	 1
  00059	ff 12		 call	 DWORD PTR [edx]
  0005b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$L155139:

; 70   : 	}
; 71   : 	return TRUE;

  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	5e		 pop	 esi

; 72   : }

  00068	c3		 ret	 0
?DeleteDPObject@CDPMng@@QAEHXZ ENDP			; CDPMng::DeleteDPObject
_TEXT	ENDS
PUBLIC	?InitConnection@CDPMng@@QAEHPAXG@Z		; CDPMng::InitConnection
EXTRN	?InitializeConnection@CDPSock@@QAEHPAXK@Z:NEAR	; CDPSock::InitializeConnection
; Function compile flags: /Ogty
;	COMDAT ?InitConnection@CDPMng@@QAEHPAXG@Z
_TEXT	SEGMENT
_lpConnection$ = 8					; size = 4
_uPort$ = 12						; size = 2
?InitConnection@CDPMng@@QAEHPAXG@Z PROC NEAR		; CDPMng::InitConnection, COMDAT
; _this$ = ecx

; 76   : 	return	m_pDPSock->InitializeConnection( lpConnection, (DWORD)uPort );

  00000	0f b7 44 24 08	 movzx	 eax, WORD PTR _uPort$[esp-4]
  00005	89 44 24 08	 mov	 WORD PTR _uPort$[esp-4], eax
  00009	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000c	e9 00 00 00 00	 jmp	 ?InitializeConnection@CDPSock@@QAEHPAXK@Z ; CDPSock::InitializeConnection
?InitConnection@CDPMng@@QAEHPAXG@Z ENDP			; CDPMng::InitConnection
_TEXT	ENDS
PUBLIC	?GetHostAddr@CDPMng@@QAEXPAD@Z			; CDPMng::GetHostAddr
; Function compile flags: /Ogty
;	COMDAT ?GetHostAddr@CDPMng@@QAEXPAD@Z
_TEXT	SEGMENT
_uBufSize$153716 = -4					; size = 4
_lpAddr$ = 8						; size = 4
?GetHostAddr@CDPMng@@QAEXPAD@Z PROC NEAR		; CDPMng::GetHostAddr, COMDAT
; _this$ = ecx

; 114  : {

  00000	51		 push	 ecx

; 115  : 	if( m_pDPSock )

  00001	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00004	85 c0		 test	 eax, eax
  00006	74 20		 je	 SHORT $L155151

; 116  : 	{
; 117  : 		u_long uBufSize		= sizeof(lpAddr);

  00008	c7 04 24 04 00
	00 00		 mov	 DWORD PTR _uBufSize$153716[esp+4], 4

; 118  : 		m_pDPSock->GetHostAddr( (LPVOID)lpAddr, (LPDWORD)&uBufSize );

  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	85 c9		 test	 ecx, ecx
  00014	74 12		 je	 SHORT $L155151
  00016	8b c1		 mov	 eax, ecx
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8d 0c 24	 lea	 ecx, DWORD PTR _uBufSize$153716[esp+4]
  0001d	51		 push	 ecx
  0001e	8b 4c 24 0c	 mov	 ecx, DWORD PTR _lpAddr$[esp+4]
  00022	51		 push	 ecx
  00023	8b c8		 mov	 ecx, eax
  00025	ff 52 10	 call	 DWORD PTR [edx+16]
$L155151:

; 119  : 	}
; 120  : }

  00028	59		 pop	 ecx
  00029	c2 04 00	 ret	 4
?GetHostAddr@CDPMng@@QAEXPAD@Z ENDP			; CDPMng::GetHostAddr
_TEXT	ENDS
PUBLIC	?GetPlayerAddr@CDPMng@@QAEXKPAD@Z		; CDPMng::GetPlayerAddr
; Function compile flags: /Ogty
;	COMDAT ?GetPlayerAddr@CDPMng@@QAEXKPAD@Z
_TEXT	SEGMENT
_uBufSize$153725 = -4					; size = 4
_dpid$ = 8						; size = 4
_lpAddr$ = 12						; size = 4
?GetPlayerAddr@CDPMng@@QAEXKPAD@Z PROC NEAR		; CDPMng::GetPlayerAddr, COMDAT
; _this$ = ecx

; 123  : {

  00000	51		 push	 ecx

; 124  : 	if( m_pDPSock )

  00001	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00004	85 c0		 test	 eax, eax
  00006	74 1e		 je	 SHORT $L155160

; 125  : 	{
; 126  : 		u_long uBufSize		= sizeof(lpAddr);
; 127  : 		m_pDPSock->GetPlayerAddr( dpid, (LPVOID)lpAddr, (LPDWORD)&uBufSize );

  00008	8d 14 24	 lea	 edx, DWORD PTR _uBufSize$153725[esp+4]
  0000b	52		 push	 edx
  0000c	8b 54 24 10	 mov	 edx, DWORD PTR _lpAddr$[esp+4]
  00010	c7 44 24 04 04
	00 00 00	 mov	 DWORD PTR _uBufSize$153725[esp+8], 4
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	52		 push	 edx
  0001e	8b 54 24 10	 mov	 edx, DWORD PTR _dpid$[esp+8]
  00022	52		 push	 edx
  00023	ff 50 18	 call	 DWORD PTR [eax+24]
$L155160:

; 128  : 	}
; 129  : }

  00026	59		 pop	 ecx
  00027	c2 08 00	 ret	 8
?GetPlayerAddr@CDPMng@@QAEXKPAD@Z ENDP			; CDPMng::GetPlayerAddr
_TEXT	ENDS
PUBLIC	?GetPlayerAddr@CDPMng@@QAEKK@Z			; CDPMng::GetPlayerAddr
; Function compile flags: /Ogty
;	COMDAT ?GetPlayerAddr@CDPMng@@QAEKK@Z
_TEXT	SEGMENT
_dpid$ = 8						; size = 4
?GetPlayerAddr@CDPMng@@QAEKK@Z PROC NEAR		; CDPMng::GetPlayerAddr, COMDAT
; _this$ = ecx

; 133  : 	if( m_pDPSock )

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 08		 je	 SHORT $L153732

; 134  : 	{
; 135  : 		return m_pDPSock->GetPlayerAddr( dpid );

  00007	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	ff 60 14	 jmp	 DWORD PTR [eax+20]
$L153732:

; 136  : 	}
; 137  : 	return 0;

  0000f	33 c0		 xor	 eax, eax

; 138  : }

  00011	c2 04 00	 ret	 4
?GetPlayerAddr@CDPMng@@QAEKK@Z ENDP			; CDPMng::GetPlayerAddr
_TEXT	ENDS
PUBLIC	?ReceiveMessage@CDPMng@@QAEHXZ			; CDPMng::ReceiveMessage
EXTRN	?Receive@CDPSock@@QAEPAVCBuffer@@XZ:NEAR	; CDPSock::Receive
; Function compile flags: /Ogty
;	COMDAT ?ReceiveMessage@CDPMng@@QAEHXZ
_TEXT	SEGMENT
?ReceiveMessage@CDPMng@@QAEHXZ PROC NEAR		; CDPMng::ReceiveMessage, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b e9		 mov	 ebp, ecx

; 142  : 	if( !m_pDPSock )

  00003	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $L155189

; 143  : 		return FALSE;

  0000a	33 c0		 xor	 eax, eax
  0000c	5d		 pop	 ebp

; 198  : }

  0000d	c3		 ret	 0
$L155189:
  0000e	56		 push	 esi

; 144  : 
; 145  : 	CBuffer* pBuffer;
; 146  : 	LPBYTE ptr;
; 147  : 	u_long uDataSize;
; 148  : 
; 149  : 	INIT_LOOP;
; 150  : 	while( 1 )	
; 151  : 	{
; 152  : 		VERIFY_LOOP( __FILE__, __LINE__ );
; 153  : 
; 154  : #ifdef __CRASH_0404
; 155  : 		CCrashStatus::GetInstance()->SetLastPacket( this, 0xAAAAAAAA );
; 156  : #endif	// __CRASH_0404
; 157  : 
; 158  : 		pBuffer = m_pDPSock->Receive();     

  0000f	e8 00 00 00 00	 call	 ?Receive@CDPSock@@QAEPAVCBuffer@@XZ ; CDPSock::Receive
  00014	8b f0		 mov	 esi, eax

; 159  : 		if( pBuffer == NULL )	

  00016	85 f6		 test	 esi, esi
  00018	74 7d		 je	 SHORT $L155191
  0001a	53		 push	 ebx
  0001b	57		 push	 edi
  0001c	8d 64 24 00	 npad	 4
$L153743:

; 160  : 			break;
; 161  : 
; 162  : #ifdef __CRASH_0404
; 163  : 		CCrashStatus::GetInstance()->SetLastPacket( this, 0xBBBBBBBB );
; 164  : #endif	// __CRASH_0404
; 165  : 
; 166  : 		ptr	= pBuffer->m_lpBufStart;
; 167  : 		int	__loop2 = 0;		// __VERIFY_LOOP041010
; 168  : 		while( pBuffer->cb-- > 0 )

  00020	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00023	85 c0		 test	 eax, eax
  00025	8b be 0c 20 00
	00		 mov	 edi, DWORD PTR [esi+8204]
  0002b	76 4f		 jbe	 SHORT $L155192
  0002d	8d 49 00	 npad	 3
$L153749:
  00030	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]

; 169  : 		{
; 170  : #ifdef __VERIFY_LOOP041010
; 171  : 			if( __loop2++ == 1000 )	{ Error( "CDPMng::ReceiveMessage %d", __loop2 ); }
; 172  : #endif // __VERIFY_LOOP041010
; 173  : 
; 174  : #ifdef __CRC
; 175  : 			uDataSize	= *(UNALIGNED LPDWORD)( ptr + m_pDPSock->m_dwDataSizeOffset );
; 176  : 			if( pBuffer->dpid ==DPID_SYSMSG )
; 177  : 				SysMessageHandler( (LPDPMSG_GENERIC)&ptr[m_pDPSock->m_dwReadHeaderSize], uDataSize, pBuffer->dpid );
; 178  : 			else
; 179  : 				UserMessageHandler( (LPDPMSG_GENERIC)&ptr[m_pDPSock->m_dwReadHeaderSize], uDataSize, pBuffer->dpid );
; 180  : 			ptr	+=	m_pDPSock->m_dwReadHeaderSize + uDataSize;
; 181  : #else	// __CRC			
; 182  : 			uDataSize = pBuffer->GetPacketSize( ptr );

  00033	8b 06		 mov	 eax, DWORD PTR [esi]
  00035	4b		 dec	 ebx
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0003c	ff 50 04	 call	 DWORD PTR [eax+4]

; 183  : 			if( pBuffer->dpid == DPID_SYSMSG )
; 184  : 				SysMessageHandler( (LPDPMSG_GENERIC)( ptr + pBuffer->GetHeaderLength() ), uDataSize, pBuffer->dpid );

  0003f	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00042	8b d8		 mov	 ebx, eax
  00044	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00047	85 c0		 test	 eax, eax
  00049	8b cd		 mov	 ecx, ebp
  0004b	75 10		 jne	 SHORT $L153751
  0004d	50		 push	 eax
  0004e	8b 86 24 20 00
	00		 mov	 eax, DWORD PTR [esi+8228]
  00054	53		 push	 ebx
  00055	03 c7		 add	 eax, edi
  00057	50		 push	 eax
  00058	ff 52 04	 call	 DWORD PTR [edx+4]

; 185  : 			else

  0005b	eb 0e		 jmp	 SHORT $L153753
$L153751:

; 186  : 				UserMessageHandler( (LPDPMSG_GENERIC)( ptr + pBuffer->GetHeaderLength() ), uDataSize, pBuffer->dpid );

  0005d	50		 push	 eax
  0005e	8b 86 24 20 00
	00		 mov	 eax, DWORD PTR [esi+8228]
  00064	53		 push	 ebx
  00065	03 c7		 add	 eax, edi
  00067	50		 push	 eax
  00068	ff 52 08	 call	 DWORD PTR [edx+8]
$L153753:

; 187  : 			ptr += ( uDataSize + pBuffer->GetHeaderLength() );

  0006b	8b 8e 24 20 00
	00		 mov	 ecx, DWORD PTR [esi+8228]
  00071	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00074	03 cb		 add	 ecx, ebx
  00076	03 f9		 add	 edi, ecx
  00078	85 c0		 test	 eax, eax
  0007a	77 b4		 ja	 SHORT $L153749
$L155192:

; 160  : 			break;
; 161  : 
; 162  : #ifdef __CRASH_0404
; 163  : 		CCrashStatus::GetInstance()->SetLastPacket( this, 0xBBBBBBBB );
; 164  : #endif	// __CRASH_0404
; 165  : 
; 166  : 		ptr	= pBuffer->m_lpBufStart;
; 167  : 		int	__loop2 = 0;		// __VERIFY_LOOP041010
; 168  : 		while( pBuffer->cb-- > 0 )

  0007c	ff 4e 08	 dec	 DWORD PTR [esi+8]

; 188  : #endif
; 189  : 		}
; 190  : 		SAFE_DELETE( pBuffer );

  0007f	8b 16		 mov	 edx, DWORD PTR [esi]
  00081	6a 01		 push	 1
  00083	8b ce		 mov	 ecx, esi
  00085	ff 12		 call	 DWORD PTR [edx]
  00087	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  0008a	e8 00 00 00 00	 call	 ?Receive@CDPSock@@QAEPAVCBuffer@@XZ ; CDPSock::Receive
  0008f	8b f0		 mov	 esi, eax
  00091	85 f6		 test	 esi, esi
  00093	75 8b		 jne	 SHORT $L153743
  00095	5f		 pop	 edi
  00096	5b		 pop	 ebx
$L155191:
  00097	5e		 pop	 esi

; 191  : 	}
; 192  : 
; 193  : #ifdef __CRASH_0404
; 194  : 	CCrashStatus::GetInstance()->SetLastPacket( this, 0xFFFFFFFF );
; 195  : #endif	// __CRASH_0404
; 196  : 
; 197  : 	return TRUE;

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	5d		 pop	 ebp

; 198  : }

  0009e	c3		 ret	 0
?ReceiveMessage@CDPMng@@QAEHXZ ENDP			; CDPMng::ReceiveMessage
_TEXT	ENDS
PUBLIC	?DestroyPlayer@CDPMng@@QAEHK@Z			; CDPMng::DestroyPlayer
EXTRN	?Shutdown@CDPSock@@QAEHK@Z:NEAR			; CDPSock::Shutdown
; Function compile flags: /Ogty
;	COMDAT ?DestroyPlayer@CDPMng@@QAEHK@Z
_TEXT	SEGMENT
_dpid$ = 8						; size = 4
?DestroyPlayer@CDPMng@@QAEHK@Z PROC NEAR		; CDPMng::DestroyPlayer, COMDAT
; _this$ = ecx

; 202  : 	if( m_pDPSock )

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 05		 je	 SHORT $L153763

; 203  : 	{
; 204  : 		return m_pDPSock->Shutdown( dpid );

  00007	e9 00 00 00 00	 jmp	 ?Shutdown@CDPSock@@QAEHK@Z ; CDPSock::Shutdown
$L153763:

; 205  : 	}
; 206  : 	return FALSE;

  0000c	33 c0		 xor	 eax, eax

; 207  : }

  0000e	c2 04 00	 ret	 4
?DestroyPlayer@CDPMng@@QAEHK@Z ENDP			; CDPMng::DestroyPlayer
_TEXT	ENDS
PUBLIC	?ReceiveThread@@YGIPAX@Z			; ReceiveThread
EXTRN	__imp__WaitForMultipleObjects@16:NEAR
; Function compile flags: /Ogty
;	COMDAT ?ReceiveThread@@YGIPAX@Z
_TEXT	SEGMENT
_lpHandle$ = -8						; size = 8
_lpvThreadParameter$ = 8				; size = 4
?ReceiveThread@@YGIPAX@Z PROC NEAR			; ReceiveThread, COMDAT

; 219  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi

; 220  : 	CDPMng* pThis	= (CDPMng*)lpvThreadParameter;
; 221  : 	HANDLE lpHandle[2];
; 222  : 	lpHandle[0]		= pThis->GetCloseHandle();

  00004	8b 74 24 10	 mov	 esi, DWORD PTR _lpvThreadParameter$[esp+8]
  00008	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 223  : 	lpHandle[1]		= pThis->GetRecvHandle();

  0000b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000e	57		 push	 edi

; 224  : 	// loop waiting for player events. If the kill event is signaled, the thread will exit
; 225  : 
; 226  : 	while( WaitForMultipleObjects( 2, lpHandle, FALSE, INFINITE ) != WAIT_OBJECT_0 )

  0000f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__WaitForMultipleObjects@16
  00015	6a ff		 push	 -1
  00017	89 44 24 0c	 mov	 DWORD PTR _lpHandle$[esp+20], eax
  0001b	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0001e	6a 00		 push	 0
  00020	8d 44 24 10	 lea	 eax, DWORD PTR _lpHandle$[esp+24]
  00024	50		 push	 eax
  00025	6a 02		 push	 2
  00027	89 54 24 1c	 mov	 DWORD PTR _lpHandle$[esp+36], edx
  0002b	ff d7		 call	 edi
  0002d	85 c0		 test	 eax, eax
  0002f	74 18		 je	 SHORT $L155215
$L153771:

; 227  : 	{
; 228  : 		// receive any messages in the queue
; 229  : 		pThis->ReceiveMessage();

  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?ReceiveMessage@CDPMng@@QAEHXZ ; CDPMng::ReceiveMessage
  00038	6a ff		 push	 -1
  0003a	6a 00		 push	 0
  0003c	8d 4c 24 10	 lea	 ecx, DWORD PTR _lpHandle$[esp+24]
  00040	51		 push	 ecx
  00041	6a 02		 push	 2
  00043	ff d7		 call	 edi
  00045	85 c0		 test	 eax, eax
  00047	75 e8		 jne	 SHORT $L153771
$L155215:
  00049	5f		 pop	 edi

; 230  : 	}
; 231  : 	return( 0 );

  0004a	33 c0		 xor	 eax, eax
  0004c	5e		 pop	 esi

; 232  : }

  0004d	83 c4 08	 add	 esp, 8
  00050	c2 04 00	 ret	 4
?ReceiveThread@@YGIPAX@Z ENDP				; ReceiveThread
_TEXT	ENDS
PUBLIC	?InitializeNetLib@@YAHXZ			; InitializeNetLib
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__WSAStartup@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?InitializeNetLib@@YAHXZ
_TEXT	SEGMENT
_wsaData$ = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?InitializeNetLib@@YAHXZ PROC NEAR			; InitializeNetLib, COMDAT

; 235  : {

  00000	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 84 24 90 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+404], eax

; 236  : 	LOAD_WS2_32_DLL;

  00012	8d 04 24	 lea	 eax, DWORD PTR _wsaData$[esp+404]
  00015	50		 push	 eax
  00016	68 02 02 00 00	 push	 514			; 00000202H
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8
  00021	33 c9		 xor	 ecx, ecx
  00023	83 f8 ff	 cmp	 eax, -1
  00026	0f 95 c1	 setne	 cl
  00029	8b c1		 mov	 eax, ecx

; 237  : 	return TRUE;
; 238  : }

  0002b	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+404]
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	81 c4 94 01 00
	00		 add	 esp, 404		; 00000194H
  0003d	c3		 ret	 0
?InitializeNetLib@@YAHXZ ENDP				; InitializeNetLib
_TEXT	ENDS
PUBLIC	?TestNetLib@@YAXPBDG@Z				; TestNetLib
EXTRN	__imp__closesocket@4:NEAR
EXTRN	__imp__connect@12:NEAR
EXTRN	__imp__htons@4:NEAR
EXTRN	__imp__inet_addr@4:NEAR
EXTRN	__imp__socket@12:NEAR
EXTRN	__imp__gethostbyname@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?TestNetLib@@YAXPBDG@Z
_TEXT	SEGMENT
_server$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_lpAddr$ = 8						; size = 4
_uPort$ = 12						; size = 2
?TestNetLib@@YAXPBDG@Z PROC NEAR			; TestNetLib, COMDAT

; 257  : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	53		 push	 ebx

; 258  : 	struct sockaddr_in server;
; 259  : 	struct hostent* host	= NULL;
; 260  : 	SOCKET s	= socket( AF_INET, SOCK_STREAM, IPPROTO_TCP );

  00009	6a 06		 push	 6
  0000b	6a 01		 push	 1
  0000d	6a 02		 push	 2
  0000f	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+36], eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  00019	8b d8		 mov	 ebx, eax

; 261  : 	if( s == INVALID_SOCKET )

  0001b	83 fb ff	 cmp	 ebx, -1
  0001e	74 6a		 je	 SHORT $L153824

; 262  : 		return;
; 263  : 	server.sin_family	= AF_INET;
; 264  : 	server.sin_port		= htons( uPort );

  00020	8b 44 24 20	 mov	 eax, DWORD PTR _uPort$[esp+20]
  00024	56		 push	 esi
  00025	50		 push	 eax
  00026	66 c7 44 24 0c
	02 00		 mov	 WORD PTR _server$[esp+32], 2
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4

; 265  : 	server.sin_addr.s_addr	= inet_addr( lpAddr );

  00033	8b 74 24 20	 mov	 esi, DWORD PTR _lpAddr$[esp+24]
  00037	56		 push	 esi
  00038	66 89 44 24 0e	 mov	 WORD PTR _server$[esp+34], ax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4

; 266  : 	if( server.sin_addr.s_addr == INADDR_NONE )

  00043	83 f8 ff	 cmp	 eax, -1
  00046	89 44 24 0c	 mov	 DWORD PTR _server$[esp+32], eax
  0004a	75 28		 jne	 SHORT $L153830

; 267  : 	{
; 268  : 		host	= gethostbyname( lpAddr );

  0004c	56		 push	 esi
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gethostbyname@4

; 269  : 		if( host == NULL )

  00053	85 c0		 test	 eax, eax
  00055	74 32		 je	 SHORT $L155228

; 270  : 			return;
; 271  : 		CopyMemory( &server.sin_addr, host->h_addr_list[0],
; 272  : 			host->h_length );

  00057	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  0005b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0005e	8b 32		 mov	 esi, DWORD PTR [edx]
  00060	8b c1		 mov	 eax, ecx
  00062	57		 push	 edi
  00063	c1 e9 02	 shr	 ecx, 2
  00066	8d 7c 24 10	 lea	 edi, DWORD PTR _server$[esp+36]
  0006a	f3 a5		 rep movsd
  0006c	8b c8		 mov	 ecx, eax
  0006e	83 e1 03	 and	 ecx, 3
  00071	f3 a4		 rep movsb
  00073	5f		 pop	 edi
$L153830:

; 273  : 	}
; 274  : 	connect( s, (struct sockaddr *)&server, sizeof(server) );

  00074	6a 10		 push	 16			; 00000010H
  00076	8d 4c 24 0c	 lea	 ecx, DWORD PTR _server$[esp+32]
  0007a	51		 push	 ecx
  0007b	53		 push	 ebx
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__connect@12

; 275  : 	closesocket( s );

  00082	53		 push	 ebx
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$L155228:
  00089	5e		 pop	 esi
$L153824:

; 276  : }

  0008a	8b 4c 24 14	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+24]
  0008e	5b		 pop	 ebx
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	83 c4 14	 add	 esp, 20			; 00000014H
  00097	c3		 ret	 0
?TestNetLib@@YAXPBDG@Z ENDP				; TestNetLib
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z ; std::list<void *,std::allocator<void *> >::_Nextnode
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ?_Nextnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z PROC NEAR ; std::list<void *,std::allocator<void *> >::_Nextnode, COMDAT

; 108  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 109  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z ENDP ; std::list<void *,std::allocator<void *> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z ; std::list<void *,std::allocator<void *> >::_Prevnode
; Function compile flags: /Ogty
;	COMDAT ?_Prevnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z PROC NEAR ; std::list<void *,std::allocator<void *> >::_Prevnode, COMDAT

; 113  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 114  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z ENDP ; std::list<void *,std::allocator<void *> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z PROC NEAR ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ ; std::list<void *,std::allocator<void *> >::const_iterator::operator++
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??Econst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<void *,std::allocator<void *> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 170  : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 171  : 			_Ptr = _Nextnode(_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	89 10		 mov	 DWORD PTR [eax], edx

; 172  : 			return (*this);
; 173  : 			}

  00008	c3		 ret	 0
??Econst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ ENDP ; std::list<void *,std::allocator<void *> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??8const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z ; std::list<void *,std::allocator<void *> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<void *,std::allocator<void *> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 197  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 198  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<void *,std::allocator<void *> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Myval@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ; std::list<void *,std::allocator<void *> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z PROC NEAR ; std::list<void *,std::allocator<void *> >::_Myval, COMDAT

; 118  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 119  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ENDP ; std::list<void *,std::allocator<void *> >::_Myval
_TEXT	ENDS
PUBLIC	??0const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ; std::list<void *,std::allocator<void *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z PROC NEAR ; std::list<void *,std::allocator<void *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 156  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 157  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ENDP ; std::list<void *,std::allocator<void *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z ; std::_Destroy<std::_List_nod<void *,std::allocator<void *> >::_Node>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_List_nod<void *,std::allocator<void *> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<void *,std::allocator<void *> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z ; std::_Destroy<std::_List_nod<void *,std::allocator<void *> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_List_nod<void *,std::allocator<void *> >::_Node *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<void *,std::allocator<void *> >::_Node *>
_TEXT	ENDS
PUBLIC	?chWindows9x@@YAHXZ				; chWindows9x
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\cmnhdr.h
;	COMDAT ?chWindows9x@@YAHXZ
_TEXT	SEGMENT
_vi$ = -160						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?chWindows9x@@YAHXZ PROC NEAR				; chWindows9x, COMDAT

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	89 84 24 a0 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+164], eax
  00018	57		 push	 edi

; 229  : 	OSVERSIONINFO vi	= { sizeof(vi) };

  00019	33 c0		 xor	 eax, eax
  0001b	c7 44 24 08 94
	00 00 00	 mov	 DWORD PTR _vi$[esp+168], 148 ; 00000094H
  00023	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00028	8d 7c 24 0c	 lea	 edi, DWORD PTR _vi$[esp+172]
  0002c	f3 ab		 rep stosd

; 230  : 	GetVersionEx( &vi );

  0002e	8d 44 24 08	 lea	 eax, DWORD PTR _vi$[esp+168]
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 231  : 	return( vi.dwPlatformId != VER_PLATFORM_WIN32_NT );

  00039	8b 4c 24 18	 mov	 ecx, DWORD PTR _vi$[esp+184]
  0003d	33 c0		 xor	 eax, eax
  0003f	83 f9 02	 cmp	 ecx, 2

; 232  : }

  00042	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+168]
  00049	0f 95 c0	 setne	 al
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	5f		 pop	 edi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?chWindows9x@@YAHXZ ENDP				; chWindows9x
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCDPMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDPMng@@UAEPAXI@Z PROC NEAR				; CDPMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CDPMng@@6B@
  0000e	74 09		 je	 SHORT $L155270
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$L155270:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GCDPMng@@UAEPAXI@Z ENDP				; CDPMng::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CreateDPObject@CDPMng@@QAEHH@Z			; CDPMng::CreateDPObject
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	__beginthreadex:NEAR
EXTRN	??0CDPSock@@QAE@XZ:NEAR				; CDPSock::CDPSock
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp__CreateEventA@16:NEAR
EXTRN	__imp__SetThreadPriority@8:NEAR
;	COMDAT xdata$x
; File c:\offi src_real\offi src!\_network\net\src\dpmng.cpp
xdata$x	SEGMENT
$T155287 DD	0ffffffffH
	DD	FLAT:$L155278
$T155282 DD	019930520H
	DD	01H
	DD	FLAT:$T155287
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?CreateDPObject@CDPMng@@QAEHH@Z
_TEXT	SEGMENT
$T155275 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwThreadId$153673 = 8					; size = 4
_bSingleThreaded$ = 8					; size = 4
?CreateDPObject@CDPMng@@QAEHH@Z PROC NEAR		; CDPMng::CreateDPObject, COMDAT
; _this$ = ecx

; 39   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CreateDPObject@CDPMng@@QAEHH@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx

; 40   : 	DeleteDPObject();

  00019	e8 00 00 00 00	 call	 ?DeleteDPObject@CDPMng@@QAEHXZ ; CDPMng::DeleteDPObject

; 41   : 	if( !m_pDPSock )

  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	85 c0		 test	 eax, eax
  00023	75 2b		 jne	 SHORT $L153664

; 42   : 		m_pDPSock	= new CDPSock;

  00025	68 9c 00 00 00	 push	 156			; 0000009cH
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	89 44 24 04	 mov	 DWORD PTR $T155275[esp+20], eax
  00036	85 c0		 test	 eax, eax
  00038	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00040	74 09		 je	 SHORT $L155276
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ??0CDPSock@@QAE@XZ	; CDPSock::CDPSock
  00049	eb 02		 jmp	 SHORT $L155277
$L155276:
  0004b	33 c0		 xor	 eax, eax
$L155277:
  0004d	89 46 04	 mov	 DWORD PTR [esi+4], eax
$L153664:

; 43   : 	if( !bSingleThreaded )

  00050	8b 44 24 18	 mov	 eax, DWORD PTR _bSingleThreaded$[esp+16]
  00054	85 c0		 test	 eax, eax
  00056	75 44		 jne	 SHORT $L155284

; 44   : 	{
; 45   : 		// Create event used to signal that the receive thread should exit
; 46   : 		if( !m_hClose )

  00058	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005b	85 c0		 test	 eax, eax
  0005d	75 11		 jne	 SHORT $L153670

; 47   : 		{
; 48   : 			m_hClose	= CreateEvent( NULL, FALSE, FALSE, NULL );

  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	6a 00		 push	 0
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  0006d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$L153670:

; 49   : 			ASSERT( m_hClose );			
; 50   : 		}
; 51   : 		// Create thread to receive player messages
; 52   : 		if( !m_hRecvThread )

  00070	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00073	85 c0		 test	 eax, eax
  00075	75 25		 jne	 SHORT $L155284

; 53   : 		{
; 54   : 			DWORD dwThreadId;
; 55   : 			m_hRecvThread	= chBEGINTHREADEX( NULL, 0, ReceiveThread, this, 0, &dwThreadId );

  00077	8d 44 24 18	 lea	 eax, DWORD PTR _dwThreadId$153673[esp+16]
  0007b	50		 push	 eax
  0007c	6a 00		 push	 0
  0007e	56		 push	 esi
  0007f	68 00 00 00 00	 push	 OFFSET FLAT:?ReceiveThread@@YGIPAX@Z ; ReceiveThread
  00084	6a 00		 push	 0
  00086	6a 00		 push	 0
  00088	e8 00 00 00 00	 call	 __beginthreadex
  0008d	83 c4 18	 add	 esp, 24			; 00000018H

; 56   : 			ASSERT( m_hRecvThread );
; 57   : 			SetThreadPriority( m_hRecvThread, THREAD_PRIORITY_ABOVE_NORMAL );

  00090	6a 01		 push	 1
  00092	50		 push	 eax
  00093	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadPriority@8
$L155284:

; 58   : 		}
; 59   : 	}
; 60   : 	return TRUE;
; 61   : }

  0009c	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  000a0	b8 01 00 00 00	 mov	 eax, 1
  000a5	5e		 pop	 esi
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L155278:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T155275[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?CreateDPObject@CDPMng@@QAEHH@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T155282
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CreateDPObject@CDPMng@@QAEHH@Z ENDP			; CDPMng::CreateDPObject
PUBLIC	?CreateSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z	; CDPMng::CreateSession
EXTRN	?CreateServer@CDPSock@@QAEHW4BUFFER_TYPE@@@Z:NEAR ; CDPSock::CreateServer
EXTRN	?CreateServerE@CDPSock@@QAEHW4BUFFER_TYPE@@@Z:NEAR ; CDPSock::CreateServerE
; Function compile flags: /Ogty
;	COMDAT ?CreateSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z
_TEXT	SEGMENT
_lpSession$ = 8						; size = 4
_nBufferType$ = 12					; size = 4
?CreateSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z PROC NEAR ; CDPMng::CreateSession, COMDAT
; _this$ = ecx

; 85   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 86   : 	if( ( chWindows9x()? m_pDPSock->CreateServerE( nBufferType ): m_pDPSock->CreateServer( nBufferType ) ) )

  00003	e8 00 00 00 00	 call	 ?chWindows9x@@YAHXZ	; chWindows9x
  00008	85 c0		 test	 eax, eax
  0000a	74 1a		 je	 SHORT $L155294
  0000c	8b 44 24 0c	 mov	 eax, DWORD PTR _nBufferType$[esp]
  00010	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?CreateServerE@CDPSock@@QAEHW4BUFFER_TYPE@@@Z ; CDPSock::CreateServerE
  00019	33 d2		 xor	 edx, edx
  0001b	85 c0		 test	 eax, eax
  0001d	0f 95 c2	 setne	 dl
  00020	5e		 pop	 esi
  00021	8b c2		 mov	 eax, edx

; 87   : #endif	// __CRC
; 88   : 	{
; 89   : 		TRACE( "%s server launched.\n", lpSession );
; 90   : 		return TRUE;
; 91   : 	}
; 92   : 	TRACE( "%s server launching failed.\n", lpSession );
; 93   : 	return FALSE;
; 94   : }

  00023	c2 08 00	 ret	 8
$L155294:

; 86   : 	if( ( chWindows9x()? m_pDPSock->CreateServerE( nBufferType ): m_pDPSock->CreateServer( nBufferType ) ) )

  00026	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nBufferType$[esp]
  0002a	51		 push	 ecx
  0002b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002e	e8 00 00 00 00	 call	 ?CreateServer@CDPSock@@QAEHW4BUFFER_TYPE@@@Z ; CDPSock::CreateServer
  00033	33 d2		 xor	 edx, edx
  00035	85 c0		 test	 eax, eax
  00037	0f 95 c2	 setne	 dl
  0003a	5e		 pop	 esi
  0003b	8b c2		 mov	 eax, edx

; 87   : #endif	// __CRC
; 88   : 	{
; 89   : 		TRACE( "%s server launched.\n", lpSession );
; 90   : 		return TRUE;
; 91   : 	}
; 92   : 	TRACE( "%s server launching failed.\n", lpSession );
; 93   : 	return FALSE;
; 94   : }

  0003d	c2 08 00	 ret	 8
?CreateSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z ENDP	; CDPMng::CreateSession
_TEXT	ENDS
PUBLIC	?JoinSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z	; CDPMng::JoinSession
EXTRN	?JoinToServer@CDPSock@@QAEHW4BUFFER_TYPE@@@Z:NEAR ; CDPSock::JoinToServer
EXTRN	?JoinToServerE@CDPSock@@QAEHW4BUFFER_TYPE@@@Z:NEAR ; CDPSock::JoinToServerE
; Function compile flags: /Ogty
;	COMDAT ?JoinSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z
_TEXT	SEGMENT
_lpSession$ = 8						; size = 4
_nBufferType$ = 12					; size = 4
?JoinSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z PROC NEAR	; CDPMng::JoinSession, COMDAT
; _this$ = ecx

; 102  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 103  : 	if( ( chWindows9x()? m_pDPSock->JoinToServerE( nBufferType ): m_pDPSock->JoinToServer( nBufferType ) ) )

  00003	e8 00 00 00 00	 call	 ?chWindows9x@@YAHXZ	; chWindows9x
  00008	85 c0		 test	 eax, eax
  0000a	74 1a		 je	 SHORT $L155299
  0000c	8b 44 24 0c	 mov	 eax, DWORD PTR _nBufferType$[esp]
  00010	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?JoinToServerE@CDPSock@@QAEHW4BUFFER_TYPE@@@Z ; CDPSock::JoinToServerE
  00019	33 d2		 xor	 edx, edx
  0001b	85 c0		 test	 eax, eax
  0001d	0f 95 c2	 setne	 dl
  00020	5e		 pop	 esi
  00021	8b c2		 mov	 eax, edx

; 104  : #endif	// __CRC
; 105  : 	{
; 106  : 		TRACE( "%s server connected.\n", lpSession );
; 107  : 		return TRUE;
; 108  : 	}
; 109  : 	TRACE( "%s server connection failed.\n", lpSession );
; 110  : 	return FALSE;
; 111  : }

  00023	c2 08 00	 ret	 8
$L155299:

; 103  : 	if( ( chWindows9x()? m_pDPSock->JoinToServerE( nBufferType ): m_pDPSock->JoinToServer( nBufferType ) ) )

  00026	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nBufferType$[esp]
  0002a	51		 push	 ecx
  0002b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002e	e8 00 00 00 00	 call	 ?JoinToServer@CDPSock@@QAEHW4BUFFER_TYPE@@@Z ; CDPSock::JoinToServer
  00033	33 d2		 xor	 edx, edx
  00035	85 c0		 test	 eax, eax
  00037	0f 95 c2	 setne	 dl
  0003a	5e		 pop	 esi
  0003b	8b c2		 mov	 eax, edx

; 104  : #endif	// __CRC
; 105  : 	{
; 106  : 		TRACE( "%s server connected.\n", lpSession );
; 107  : 		return TRUE;
; 108  : 	}
; 109  : 	TRACE( "%s server connection failed.\n", lpSession );
; 110  : 	return FALSE;
; 111  : }

  0003d	c2 08 00	 ret	 8
?JoinSession@CDPMng@@QAEHPBDW4BUFFER_TYPE@@@Z ENDP	; CDPMng::JoinSession
_TEXT	ENDS
PUBLIC	??Eiterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ ; std::list<void *,std::allocator<void *> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??Eiterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<void *,std::allocator<void *> >::iterator::operator++, COMDAT
; _this$ = ecx

; 249  : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 250  : 			++(*(const_iterator *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	89 10		 mov	 DWORD PTR [eax], edx

; 251  : 			return (*this);
; 252  : 			}

  00008	c3		 ret	 0
??Eiterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAEAAV012@XZ ENDP ; std::list<void *,std::allocator<void *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??9const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z ; std::list<void *,std::allocator<void *> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<void *,std::allocator<void *> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 202  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 203  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<void *,std::allocator<void *> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node>::destroy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z PROC NEAR ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z PROC NEAR ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<void *,std::allocator<void *> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ; std::list<void *,std::allocator<void *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z PROC NEAR ; std::list<void *,std::allocator<void *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 235  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 236  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z ENDP ; std::list<void *,std::allocator<void *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEABQAXXZ ; std::list<void *,std::allocator<void *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEABQAXXZ
_TEXT	SEGMENT
??Dconst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEABQAXXZ PROC NEAR ; std::list<void *,std::allocator<void *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 161  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 162  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEABQAXXZ ENDP ; std::list<void *,std::allocator<void *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?begin@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ ; std::list<void *,std::allocator<void *> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<void *,std::allocator<void *> >::begin, COMDAT
; _this$ = ecx

; 377  : 		return (iterator(_Nextnode(_Myhead)));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 378  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<void *,std::allocator<void *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ ; std::list<void *,std::allocator<void *> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<void *,std::allocator<void *> >::end, COMDAT
; _this$ = ecx

; 387  : 		return (iterator(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 388  : 		}

  00009	c2 04 00	 ret	 4
?end@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<void *,std::allocator<void *> >::end
_TEXT	ENDS
PUBLIC	?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ ; std::list<void *,std::allocator<void *> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ PROC NEAR ; std::list<void *,std::allocator<void *> >::clear, COMDAT
; _this$ = ecx

; 610  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 611  : 		_Nodeptr _Pnext;
; 612  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 613  : 		_Nextnode(_Myhead) = _Myhead;

  00008	89 09		 mov	 DWORD PTR [ecx], ecx

; 614  : 		_Prevnode(_Myhead) = _Myhead;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 615  : 		_Mysize = 0;
; 616  : 
; 617  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00010	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00013	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001a	74 19		 je	 SHORT $L154114
  0001c	57		 push	 edi
  0001d	8d 49 00	 npad	 3
$L154112:

; 618  : 			{	// delete an element
; 619  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 38		 mov	 edi, DWORD PTR [eax]

; 620  : 			this->_Alnod.destroy(_Pnode);
; 621  : 			this->_Alnod.deallocate(_Pnode, 1);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b f9		 cmp	 edi, ecx
  00030	8b c7		 mov	 eax, edi
  00032	75 ec		 jne	 SHORT $L154112
  00034	5f		 pop	 edi
$L154114:
  00035	5e		 pop	 esi

; 622  : 			}
; 623  : 		}

  00036	c3		 ret	 0
?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ ENDP ; std::list<void *,std::allocator<void *> >::clear
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@PAXV?$allocator@PAX@std@@@std@@IAEXXZ ; std::list<void *,std::allocator<void *> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$list@PAXV?$allocator@PAX@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@PAXV?$allocator@PAX@std@@@std@@IAEXXZ PROC NEAR ; std::list<void *,std::allocator<void *> >::_Tidy, COMDAT
; _this$ = ecx

; 929  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 930  : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ ; std::list<void *,std::allocator<void *> >::clear

; 931  : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 932  : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 933  : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 934  : 		_Myhead = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	5e		 pop	 esi

; 935  : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@PAXV?$allocator@PAX@std@@@std@@IAEXXZ ENDP ; std::list<void *,std::allocator<void *> >::_Tidy
_TEXT	ENDS
PUBLIC	??Diterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEAAPAXXZ ; std::list<void *,std::allocator<void *> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEAAPAXXZ
_TEXT	SEGMENT
??Diterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEAAPAXXZ PROC NEAR ; std::list<void *,std::allocator<void *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 240  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 241  : 			}

  00005	c3		 ret	 0
??Diterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEAAPAXXZ ENDP ; std::list<void *,std::allocator<void *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??1?$list@PAXV?$allocator@PAX@std@@@std@@QAE@XZ	; std::list<void *,std::allocator<void *> >::~list<void *,std::allocator<void *> >
; Function compile flags: /Ogty
;	COMDAT ??1?$list@PAXV?$allocator@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAXV?$allocator@PAX@std@@@std@@QAE@XZ PROC NEAR ; std::list<void *,std::allocator<void *> >::~list<void *,std::allocator<void *> >, COMDAT
; _this$ = ecx

; 364  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 365  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ ; std::list<void *,std::allocator<void *> >::clear
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	5e		 pop	 esi

; 366  : 		}

  0001c	c3		 ret	 0
??1?$list@PAXV?$allocator@PAX@std@@@std@@QAE@XZ ENDP	; std::list<void *,std::allocator<void *> >::~list<void *,std::allocator<void *> >
_TEXT	ENDS
PUBLIC	?Destroy@?$MemPooler@VCBuffer@@@@IAEXXZ		; MemPooler<CBuffer>::Destroy
EXTRN	__imp__VirtualFree@12:NEAR
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\misc\include\mempooler.h
;	COMDAT ?Destroy@?$MemPooler@VCBuffer@@@@IAEXXZ
_TEXT	SEGMENT
?Destroy@?$MemPooler@VCBuffer@@@@IAEXXZ PROC NEAR	; MemPooler<CBuffer>::Destroy, COMDAT
; _this$ = ecx

; 144  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 145  : #ifdef __VERIFY_MEMPOOL
; 146  : 		return;
; 147  : #endif
; 148  : 		for( list<void*>::iterator i = m_ListOfMemBlockPtr.begin(); i != m_ListOfMemBlockPtr.end(); ++i )

  00004	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]
  00009	3b f0		 cmp	 esi, eax
  0000b	74 1c		 je	 SHORT $L154021
  0000d	53		 push	 ebx
  0000e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__VirtualFree@12
$L155476:

; 149  : 			VirtualFree( *i, 0, MEM_RELEASE );

  00014	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00017	68 00 80 00 00	 push	 32768			; 00008000H
  0001c	6a 00		 push	 0
  0001e	50		 push	 eax
  0001f	ff d3		 call	 ebx
  00021	8b 36		 mov	 esi, DWORD PTR [esi]
  00023	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00026	75 ec		 jne	 SHORT $L155476
  00028	5b		 pop	 ebx
$L154021:

; 150  : 		m_ListOfMemBlockPtr.clear();

  00029	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 09		 mov	 DWORD PTR [ecx], ecx
  00030	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00033	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  00036	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00039	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00040	74 14		 je	 SHORT $L155544
$L155542:
  00042	8b 30		 mov	 esi, DWORD PTR [eax]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	83 c4 04	 add	 esp, 4
  00050	3b f1		 cmp	 esi, ecx
  00052	8b c6		 mov	 eax, esi
  00054	75 ec		 jne	 SHORT $L155542
$L155544:

; 151  : 
; 152  : 		DeleteCriticalSection( &m_cs );		

  00056	83 c7 1c	 add	 edi, 28			; 0000001cH
  00059	57		 push	 edi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 153  : 	}

  00062	c3		 ret	 0
?Destroy@?$MemPooler@VCBuffer@@@@IAEXXZ ENDP		; MemPooler<CBuffer>::Destroy
_TEXT	ENDS
PUBLIC	?Destroy@?$MemPooler@VCBuffer2@@@@IAEXXZ	; MemPooler<CBuffer2>::Destroy
; Function compile flags: /Ogty
;	COMDAT ?Destroy@?$MemPooler@VCBuffer2@@@@IAEXXZ
_TEXT	SEGMENT
?Destroy@?$MemPooler@VCBuffer2@@@@IAEXXZ PROC NEAR	; MemPooler<CBuffer2>::Destroy, COMDAT
; _this$ = ecx

; 144  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 145  : #ifdef __VERIFY_MEMPOOL
; 146  : 		return;
; 147  : #endif
; 148  : 		for( list<void*>::iterator i = m_ListOfMemBlockPtr.begin(); i != m_ListOfMemBlockPtr.end(); ++i )

  00004	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]
  00009	3b f0		 cmp	 esi, eax
  0000b	74 1c		 je	 SHORT $L154046
  0000d	53		 push	 ebx
  0000e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__VirtualFree@12
$L155595:

; 149  : 			VirtualFree( *i, 0, MEM_RELEASE );

  00014	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00017	68 00 80 00 00	 push	 32768			; 00008000H
  0001c	6a 00		 push	 0
  0001e	50		 push	 eax
  0001f	ff d3		 call	 ebx
  00021	8b 36		 mov	 esi, DWORD PTR [esi]
  00023	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00026	75 ec		 jne	 SHORT $L155595
  00028	5b		 pop	 ebx
$L154046:

; 150  : 		m_ListOfMemBlockPtr.clear();

  00029	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 09		 mov	 DWORD PTR [ecx], ecx
  00030	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00033	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  00036	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00039	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00040	74 14		 je	 SHORT $L155669
$L155667:
  00042	8b 30		 mov	 esi, DWORD PTR [eax]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	83 c4 04	 add	 esp, 4
  00050	3b f1		 cmp	 esi, ecx
  00052	8b c6		 mov	 eax, esi
  00054	75 ec		 jne	 SHORT $L155667
$L155669:

; 151  : 
; 152  : 		DeleteCriticalSection( &m_cs );		

  00056	83 c7 1c	 add	 edi, 28			; 0000001cH
  00059	57		 push	 edi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 153  : 	}

  00062	c3		 ret	 0
?Destroy@?$MemPooler@VCBuffer2@@@@IAEXXZ ENDP		; MemPooler<CBuffer2>::Destroy
_TEXT	ENDS
PUBLIC	?Destroy@?$MemPooler@VCClientSock@@@@IAEXXZ	; MemPooler<CClientSock>::Destroy
; Function compile flags: /Ogty
;	COMDAT ?Destroy@?$MemPooler@VCClientSock@@@@IAEXXZ
_TEXT	SEGMENT
?Destroy@?$MemPooler@VCClientSock@@@@IAEXXZ PROC NEAR	; MemPooler<CClientSock>::Destroy, COMDAT
; _this$ = ecx

; 144  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 145  : #ifdef __VERIFY_MEMPOOL
; 146  : 		return;
; 147  : #endif
; 148  : 		for( list<void*>::iterator i = m_ListOfMemBlockPtr.begin(); i != m_ListOfMemBlockPtr.end(); ++i )

  00004	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]
  00009	3b f0		 cmp	 esi, eax
  0000b	74 1c		 je	 SHORT $L154071
  0000d	53		 push	 ebx
  0000e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__VirtualFree@12
$L155719:

; 149  : 			VirtualFree( *i, 0, MEM_RELEASE );

  00014	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00017	68 00 80 00 00	 push	 32768			; 00008000H
  0001c	6a 00		 push	 0
  0001e	50		 push	 eax
  0001f	ff d3		 call	 ebx
  00021	8b 36		 mov	 esi, DWORD PTR [esi]
  00023	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00026	75 ec		 jne	 SHORT $L155719
  00028	5b		 pop	 ebx
$L154071:

; 150  : 		m_ListOfMemBlockPtr.clear();

  00029	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 09		 mov	 DWORD PTR [ecx], ecx
  00030	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00033	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  00036	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00039	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00040	74 14		 je	 SHORT $L155793
$L155791:
  00042	8b 30		 mov	 esi, DWORD PTR [eax]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	83 c4 04	 add	 esp, 4
  00050	3b f1		 cmp	 esi, ecx
  00052	8b c6		 mov	 eax, esi
  00054	75 ec		 jne	 SHORT $L155791
$L155793:

; 151  : 
; 152  : 		DeleteCriticalSection( &m_cs );		

  00056	83 c7 1c	 add	 edi, 28			; 0000001cH
  00059	57		 push	 edi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 153  : 	}

  00062	c3		 ret	 0
?Destroy@?$MemPooler@VCClientSock@@@@IAEXXZ ENDP	; MemPooler<CClientSock>::Destroy
_TEXT	ENDS
PUBLIC	?Destroy@?$MemPooler@VCClientSockE@@@@IAEXXZ	; MemPooler<CClientSockE>::Destroy
; Function compile flags: /Ogty
;	COMDAT ?Destroy@?$MemPooler@VCClientSockE@@@@IAEXXZ
_TEXT	SEGMENT
?Destroy@?$MemPooler@VCClientSockE@@@@IAEXXZ PROC NEAR	; MemPooler<CClientSockE>::Destroy, COMDAT
; _this$ = ecx

; 144  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 145  : #ifdef __VERIFY_MEMPOOL
; 146  : 		return;
; 147  : #endif
; 148  : 		for( list<void*>::iterator i = m_ListOfMemBlockPtr.begin(); i != m_ListOfMemBlockPtr.end(); ++i )

  00004	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]
  00009	3b f0		 cmp	 esi, eax
  0000b	74 1c		 je	 SHORT $L154096
  0000d	53		 push	 ebx
  0000e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__VirtualFree@12
$L155838:

; 149  : 			VirtualFree( *i, 0, MEM_RELEASE );

  00014	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00017	68 00 80 00 00	 push	 32768			; 00008000H
  0001c	6a 00		 push	 0
  0001e	50		 push	 eax
  0001f	ff d3		 call	 ebx
  00021	8b 36		 mov	 esi, DWORD PTR [esi]
  00023	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00026	75 ec		 jne	 SHORT $L155838
  00028	5b		 pop	 ebx
$L154096:

; 150  : 		m_ListOfMemBlockPtr.clear();

  00029	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 09		 mov	 DWORD PTR [ecx], ecx
  00030	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00033	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  00036	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00039	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00040	74 14		 je	 SHORT $L155912
$L155910:
  00042	8b 30		 mov	 esi, DWORD PTR [eax]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	83 c4 04	 add	 esp, 4
  00050	3b f1		 cmp	 esi, ecx
  00052	8b c6		 mov	 eax, esi
  00054	75 ec		 jne	 SHORT $L155910
$L155912:

; 151  : 
; 152  : 		DeleteCriticalSection( &m_cs );		

  00056	83 c7 1c	 add	 edi, 28			; 0000001cH
  00059	57		 push	 edi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 153  : 	}

  00062	c3		 ret	 0
?Destroy@?$MemPooler@VCClientSockE@@@@IAEXXZ ENDP	; MemPooler<CClientSockE>::Destroy
_TEXT	ENDS
PUBLIC	??1?$MemPooler@VCBuffer@@@@QAE@XZ		; MemPooler<CBuffer>::~MemPooler<CBuffer>
; Function compile flags: /Ogty
;	COMDAT ??1?$MemPooler@VCBuffer@@@@QAE@XZ
_TEXT	SEGMENT
??1?$MemPooler@VCBuffer@@@@QAE@XZ PROC NEAR		; MemPooler<CBuffer>::~MemPooler<CBuffer>, COMDAT
; _this$ = ecx

; 53   : 		{	Destroy();	}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?Destroy@?$MemPooler@VCBuffer@@@@IAEXXZ ; MemPooler<CBuffer>::Destroy
  00008	83 c6 04	 add	 esi, 4
  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ ; std::list<void *,std::allocator<void *> >::clear
  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
??1?$MemPooler@VCBuffer@@@@QAE@XZ ENDP			; MemPooler<CBuffer>::~MemPooler<CBuffer>
_TEXT	ENDS
PUBLIC	??1?$MemPooler@VCBuffer2@@@@QAE@XZ		; MemPooler<CBuffer2>::~MemPooler<CBuffer2>
; Function compile flags: /Ogty
;	COMDAT ??1?$MemPooler@VCBuffer2@@@@QAE@XZ
_TEXT	SEGMENT
??1?$MemPooler@VCBuffer2@@@@QAE@XZ PROC NEAR		; MemPooler<CBuffer2>::~MemPooler<CBuffer2>, COMDAT
; _this$ = ecx

; 53   : 		{	Destroy();	}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?Destroy@?$MemPooler@VCBuffer2@@@@IAEXXZ ; MemPooler<CBuffer2>::Destroy
  00008	83 c6 04	 add	 esi, 4
  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ ; std::list<void *,std::allocator<void *> >::clear
  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
??1?$MemPooler@VCBuffer2@@@@QAE@XZ ENDP			; MemPooler<CBuffer2>::~MemPooler<CBuffer2>
_TEXT	ENDS
PUBLIC	??1?$MemPooler@VCClientSock@@@@QAE@XZ		; MemPooler<CClientSock>::~MemPooler<CClientSock>
; Function compile flags: /Ogty
;	COMDAT ??1?$MemPooler@VCClientSock@@@@QAE@XZ
_TEXT	SEGMENT
??1?$MemPooler@VCClientSock@@@@QAE@XZ PROC NEAR		; MemPooler<CClientSock>::~MemPooler<CClientSock>, COMDAT
; _this$ = ecx

; 53   : 		{	Destroy();	}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?Destroy@?$MemPooler@VCClientSock@@@@IAEXXZ ; MemPooler<CClientSock>::Destroy
  00008	83 c6 04	 add	 esi, 4
  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ ; std::list<void *,std::allocator<void *> >::clear
  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
??1?$MemPooler@VCClientSock@@@@QAE@XZ ENDP		; MemPooler<CClientSock>::~MemPooler<CClientSock>
_TEXT	ENDS
PUBLIC	??1?$MemPooler@VCClientSockE@@@@QAE@XZ		; MemPooler<CClientSockE>::~MemPooler<CClientSockE>
; Function compile flags: /Ogty
;	COMDAT ??1?$MemPooler@VCClientSockE@@@@QAE@XZ
_TEXT	SEGMENT
??1?$MemPooler@VCClientSockE@@@@QAE@XZ PROC NEAR	; MemPooler<CClientSockE>::~MemPooler<CClientSockE>, COMDAT
; _this$ = ecx

; 53   : 		{	Destroy();	}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?Destroy@?$MemPooler@VCClientSockE@@@@IAEXXZ ; MemPooler<CClientSockE>::Destroy
  00008	83 c6 04	 add	 esi, 4
  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?clear@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXXZ ; std::list<void *,std::allocator<void *> >::clear
  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
??1?$MemPooler@VCClientSockE@@@@QAE@XZ ENDP		; MemPooler<CClientSockE>::~MemPooler<CClientSockE>
_TEXT	ENDS
PUBLIC	??_G?$MemPooler@VCClientSock@@@@QAEPAXI@Z	; MemPooler<CClientSock>::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_G?$MemPooler@VCClientSock@@@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$MemPooler@VCClientSock@@@@QAEPAXI@Z PROC NEAR	; MemPooler<CClientSock>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$MemPooler@VCClientSock@@@@QAE@XZ ; MemPooler<CClientSock>::~MemPooler<CClientSock>
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L156064
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L156064:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$MemPooler@VCClientSock@@@@QAEPAXI@Z ENDP		; MemPooler<CClientSock>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_G?$MemPooler@VCClientSockE@@@@QAEPAXI@Z	; MemPooler<CClientSockE>::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_G?$MemPooler@VCClientSockE@@@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$MemPooler@VCClientSockE@@@@QAEPAXI@Z PROC NEAR	; MemPooler<CClientSockE>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$MemPooler@VCClientSockE@@@@QAE@XZ ; MemPooler<CClientSockE>::~MemPooler<CClientSockE>
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L156068
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L156068:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$MemPooler@VCClientSockE@@@@QAEPAXI@Z ENDP		; MemPooler<CClientSockE>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_G?$MemPooler@VCBuffer@@@@QAEPAXI@Z		; MemPooler<CBuffer>::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_G?$MemPooler@VCBuffer@@@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$MemPooler@VCBuffer@@@@QAEPAXI@Z PROC NEAR		; MemPooler<CBuffer>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$MemPooler@VCBuffer@@@@QAE@XZ ; MemPooler<CBuffer>::~MemPooler<CBuffer>
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L156072
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L156072:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$MemPooler@VCBuffer@@@@QAEPAXI@Z ENDP		; MemPooler<CBuffer>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_G?$MemPooler@VCBuffer2@@@@QAEPAXI@Z		; MemPooler<CBuffer2>::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_G?$MemPooler@VCBuffer2@@@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$MemPooler@VCBuffer2@@@@QAEPAXI@Z PROC NEAR	; MemPooler<CBuffer2>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$MemPooler@VCBuffer2@@@@QAE@XZ ; MemPooler<CBuffer2>::~MemPooler<CBuffer2>
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L156076
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L156076:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$MemPooler@VCBuffer2@@@@QAEPAXI@Z ENDP		; MemPooler<CBuffer2>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?UninitializeNetLib@@YAXXZ			; UninitializeNetLib
EXTRN	?m_pPool@CClientSockE@@2PAV?$MemPooler@VCClientSockE@@@@A:DWORD ; CClientSockE::m_pPool
EXTRN	?m_pHeapMng@CBuffer@@2PAVCHeapMng@@A:DWORD	; CBuffer::m_pHeapMng
EXTRN	?m_pPool@CBuffer@@2PAV?$MemPooler@VCBuffer@@@@A:DWORD ; CBuffer::m_pPool
EXTRN	?m_pHeapMng@CAr@@2PAVCHeapMng@@A:DWORD		; CAr::m_pHeapMng
EXTRN	__imp__WSACleanup@0:NEAR
EXTRN	?m_pPool2@CBuffer2@@2PAV?$MemPooler@VCBuffer2@@@@A:DWORD ; CBuffer2::m_pPool2
EXTRN	?m_pPool@CClientSock@@2PAV?$MemPooler@VCClientSock@@@@A:DWORD ; CClientSock::m_pPool
; Function compile flags: /Ogty
; File c:\offi src_real\offi src!\_network\net\src\dpmng.cpp
;	COMDAT ?UninitializeNetLib@@YAXXZ
_TEXT	SEGMENT
?UninitializeNetLib@@YAXXZ PROC NEAR			; UninitializeNetLib, COMDAT

; 242  : 	SAFE_DELETE( CAr::m_pHeapMng );

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pHeapMng@CAr@@2PAVCHeapMng@@A ; CAr::m_pHeapMng
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	3b ce		 cmp	 ecx, esi
  0000b	74 0c		 je	 SHORT $L153781
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	6a 01		 push	 1
  00011	ff 10		 call	 DWORD PTR [eax]
  00013	89 35 00 00 00
	00		 mov	 DWORD PTR ?m_pHeapMng@CAr@@2PAVCHeapMng@@A, esi ; CAr::m_pHeapMng
$L153781:

; 243  : #ifndef __VM_0820
; 244  : #ifndef __MEM_TRACE
; 245  : 	SAFE_DELETE( CClientSock::m_pPool );

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pPool@CClientSock@@2PAV?$MemPooler@VCClientSock@@@@A ; CClientSock::m_pPool
  0001f	3b ce		 cmp	 ecx, esi
  00021	57		 push	 edi
  00022	74 16		 je	 SHORT $L153785
  00024	8b f9		 mov	 edi, ecx
  00026	e8 00 00 00 00	 call	 ??1?$MemPooler@VCClientSock@@@@QAE@XZ ; MemPooler<CClientSock>::~MemPooler<CClientSock>
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
  00034	89 35 00 00 00
	00		 mov	 DWORD PTR ?m_pPool@CClientSock@@2PAV?$MemPooler@VCClientSock@@@@A, esi ; CClientSock::m_pPool
$L153785:

; 246  : 	SAFE_DELETE( CClientSockE::m_pPool );

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pPool@CClientSockE@@2PAV?$MemPooler@VCClientSockE@@@@A ; CClientSockE::m_pPool
  00040	3b ce		 cmp	 ecx, esi
  00042	74 16		 je	 SHORT $L153789
  00044	8b f9		 mov	 edi, ecx
  00046	e8 00 00 00 00	 call	 ??1?$MemPooler@VCClientSockE@@@@QAE@XZ ; MemPooler<CClientSockE>::~MemPooler<CClientSockE>
  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00051	83 c4 04	 add	 esp, 4
  00054	89 35 00 00 00
	00		 mov	 DWORD PTR ?m_pPool@CClientSockE@@2PAV?$MemPooler@VCClientSockE@@@@A, esi ; CClientSockE::m_pPool
$L153789:

; 247  : 	SAFE_DELETE( CBuffer::m_pPool );

  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pPool@CBuffer@@2PAV?$MemPooler@VCBuffer@@@@A ; CBuffer::m_pPool
  00060	3b ce		 cmp	 ecx, esi
  00062	74 16		 je	 SHORT $L153793
  00064	8b f9		 mov	 edi, ecx
  00066	e8 00 00 00 00	 call	 ??1?$MemPooler@VCBuffer@@@@QAE@XZ ; MemPooler<CBuffer>::~MemPooler<CBuffer>
  0006b	57		 push	 edi
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00071	83 c4 04	 add	 esp, 4
  00074	89 35 00 00 00
	00		 mov	 DWORD PTR ?m_pPool@CBuffer@@2PAV?$MemPooler@VCBuffer@@@@A, esi ; CBuffer::m_pPool
$L153793:

; 248  : 	SAFE_DELETE( CBuffer2::m_pPool2 );	

  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pPool2@CBuffer2@@2PAV?$MemPooler@VCBuffer2@@@@A ; CBuffer2::m_pPool2
  00080	3b ce		 cmp	 ecx, esi
  00082	74 16		 je	 SHORT $L153797
  00084	8b f9		 mov	 edi, ecx
  00086	e8 00 00 00 00	 call	 ??1?$MemPooler@VCBuffer2@@@@QAE@XZ ; MemPooler<CBuffer2>::~MemPooler<CBuffer2>
  0008b	57		 push	 edi
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00091	83 c4 04	 add	 esp, 4
  00094	89 35 00 00 00
	00		 mov	 DWORD PTR ?m_pPool2@CBuffer2@@2PAV?$MemPooler@VCBuffer2@@@@A, esi ; CBuffer2::m_pPool2
$L153797:

; 249  : #endif	// __MEM_TRACE
; 250  : #endif	// __VM_0820
; 251  : 	SAFE_DELETE( CBuffer::m_pHeapMng );

  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pHeapMng@CBuffer@@2PAVCHeapMng@@A ; CBuffer::m_pHeapMng
  000a0	3b ce		 cmp	 ecx, esi
  000a2	5f		 pop	 edi
  000a3	74 0c		 je	 SHORT $L153801
  000a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a7	6a 01		 push	 1
  000a9	ff 12		 call	 DWORD PTR [edx]
  000ab	89 35 00 00 00
	00		 mov	 DWORD PTR ?m_pHeapMng@CBuffer@@2PAVCHeapMng@@A, esi ; CBuffer::m_pHeapMng
$L153801:
  000b1	5e		 pop	 esi

; 252  : 
; 253  : 	UNLOAD_WS2_32_DLL;

  000b2	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__WSACleanup@0
?UninitializeNetLib@@YAXXZ ENDP				; UninitializeNetLib
_TEXT	ENDS
END
